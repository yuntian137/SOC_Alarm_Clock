; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\uart_communication.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\uart_communication.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\uart_communication.crf ..\Apps\UART_Communication.C]
                          THUMB

                          AREA ||i.UART_Communication_UART2Handler||, CODE, READONLY, ALIGN=2

                  UART_Communication_UART2Handler PROC
;;;10     
;;;11     void UART_Communication_UART2Handler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;12     {
;;;13       while (UART_GetFlagStatus(UART2, UART_Flag_RX) == SET) // 接收中断
000002  e037              B        |L1.116|
                  |L1.4|
;;;14       {
;;;15         UART_ClearFlag(UART2, UART_Flag_RX); // 清除接收标志
000004  2101              MOVS     r1,#1
000006  481f              LDR      r0,|L1.132|
000008  f7fffffe          BL       UART_ClearFlag
;;;16         uint8_t receivedChar = UART_ReceiveData(UART2); // 接收数据
00000c  481d              LDR      r0,|L1.132|
00000e  f7fffffe          BL       UART_ReceiveData
000012  b2c5              UXTB     r5,r0
;;;17     
;;;18         UART_RxBuffer[RxIndex++] = receivedChar; // 接收数据并存入缓冲区
000014  491c              LDR      r1,|L1.136|
000016  7808              LDRB     r0,[r1,#0]  ; RxIndex
000018  1c41              ADDS     r1,r0,#1
00001a  4a1b              LDR      r2,|L1.136|
00001c  7011              STRB     r1,[r2,#0]
00001e  491b              LDR      r1,|L1.140|
000020  540d              STRB     r5,[r1,r0]
;;;19     
;;;20         if (RxIndex >= MAX_BUFFER_SIZE) // 防止缓冲区溢出
000022  4610              MOV      r0,r2
000024  7800              LDRB     r0,[r0,#0]  ; RxIndex
000026  2864              CMP      r0,#0x64
000028  db02              BLT      |L1.48|
;;;21         {
;;;22           RxIndex = 0; // 重置接收索引
00002a  2000              MOVS     r0,#0
00002c  4611              MOV      r1,r2
00002e  7008              STRB     r0,[r1,#0]
                  |L1.48|
;;;23         }
;;;24     
;;;25         // 将接收到的数据复制到发送缓冲区
;;;26         memcpy((void *)UART_TxBuffer, (void *)UART_RxBuffer, RxIndex);
000030  4815              LDR      r0,|L1.136|
000032  7802              LDRB     r2,[r0,#0]  ; RxIndex
000034  4915              LDR      r1,|L1.140|
000036  4816              LDR      r0,|L1.144|
000038  f7fffffe          BL       __aeabi_memcpy
;;;27     
;;;28         // 发送数据
;;;29         for (uint8_t i = 0; i < RxIndex; i++)
00003c  2400              MOVS     r4,#0
00003e  e011              B        |L1.100|
                  |L1.64|
;;;30         {
;;;31           UART_SendData(UART2, UART_TxBuffer[i]); // 发送数据
000040  4813              LDR      r0,|L1.144|
000042  5d01              LDRB     r1,[r0,r4]
000044  480f              LDR      r0,|L1.132|
000046  f7fffffe          BL       UART_SendData
;;;32           while (UART_GetFlagStatus(UART2, UART_Flag_TX) == RESET); // 等待发送完成
00004a  bf00              NOP      
                  |L1.76|
00004c  2102              MOVS     r1,#2
00004e  480d              LDR      r0,|L1.132|
000050  f7fffffe          BL       UART_GetFlagStatus
000054  2800              CMP      r0,#0
000056  d0f9              BEQ      |L1.76|
;;;33           UART_ClearFlag(UART2, UART_Flag_TX); // 清除发送标志
000058  2102              MOVS     r1,#2
00005a  480a              LDR      r0,|L1.132|
00005c  f7fffffe          BL       UART_ClearFlag
000060  1c60              ADDS     r0,r4,#1              ;29
000062  b2c4              UXTB     r4,r0                 ;29
                  |L1.100|
000064  4808              LDR      r0,|L1.136|
000066  7800              LDRB     r0,[r0,#0]            ;29  ; RxIndex
000068  4284              CMP      r4,r0                 ;29
00006a  dbe9              BLT      |L1.64|
;;;34         }
;;;35     
;;;36         RxIndex = 0; // 重置接收索引
00006c  2000              MOVS     r0,#0
00006e  4906              LDR      r1,|L1.136|
000070  7008              STRB     r0,[r1,#0]
;;;37       }
000072  bf00              NOP      
                  |L1.116|
000074  2101              MOVS     r1,#1                 ;13
000076  4803              LDR      r0,|L1.132|
000078  f7fffffe          BL       UART_GetFlagStatus
00007c  2801              CMP      r0,#1                 ;13
00007e  d0c1              BEQ      |L1.4|
;;;38     }
000080  bd70              POP      {r4-r6,pc}
;;;39     
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      0x40021020
                  |L1.136|
                          DCD      RxIndex
                  |L1.140|
                          DCD      UART_RxBuffer
                  |L1.144|
                          DCD      UART_TxBuffer

                          AREA ||i.UART_Handler||, CODE, READONLY, ALIGN=2

                  UART_Handler PROC
;;;39     
;;;40     void UART_Handler(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;41     {
;;;42         if (UART_GetFlagStatus(UART2, UART_Flag_RX) == SET) // 接收中断
000002  2101              MOVS     r1,#1
000004  4822              LDR      r0,|L2.144|
000006  f7fffffe          BL       UART_GetFlagStatus
00000a  2801              CMP      r0,#1
00000c  d13f              BNE      |L2.142|
;;;43         {
;;;44             UART_ClearFlag(UART2, UART_Flag_RX); // 清除接收标志
00000e  2101              MOVS     r1,#1
000010  481f              LDR      r0,|L2.144|
000012  f7fffffe          BL       UART_ClearFlag
;;;45             uint8_t receivedChar = UART_ReceiveData(UART2); // 接收数据
000016  481e              LDR      r0,|L2.144|
000018  f7fffffe          BL       UART_ReceiveData
00001c  b2c5              UXTB     r5,r0
;;;46     
;;;47             UART_RxBuffer[RxIndex++] = receivedChar; // 接收数据并存入缓冲区
00001e  491d              LDR      r1,|L2.148|
000020  7808              LDRB     r0,[r1,#0]  ; RxIndex
000022  1c41              ADDS     r1,r0,#1
000024  4a1b              LDR      r2,|L2.148|
000026  7011              STRB     r1,[r2,#0]
000028  491b              LDR      r1,|L2.152|
00002a  540d              STRB     r5,[r1,r0]
;;;48     
;;;49             if (RxIndex >= MAX_BUFFER_SIZE) // 防止缓冲区溢出
00002c  4610              MOV      r0,r2
00002e  7800              LDRB     r0,[r0,#0]  ; RxIndex
000030  2864              CMP      r0,#0x64
000032  db02              BLT      |L2.58|
;;;50             {
;;;51                 RxIndex = 0; // 重置接收索引
000034  2000              MOVS     r0,#0
000036  4611              MOV      r1,r2
000038  7008              STRB     r0,[r1,#0]
                  |L2.58|
;;;52             }
;;;53     
;;;54             // 检查是否接收到特定消息 "0xF1"
;;;55             if (RxIndex >= 1 && UART_RxBuffer[RxIndex - 1] == 0xF1)
00003a  4816              LDR      r0,|L2.148|
00003c  7800              LDRB     r0,[r0,#0]  ; RxIndex
00003e  2801              CMP      r0,#1
000040  db24              BLT      |L2.140|
000042  4814              LDR      r0,|L2.148|
000044  7800              LDRB     r0,[r0,#0]  ; RxIndex
000046  1e40              SUBS     r0,r0,#1
000048  4913              LDR      r1,|L2.152|
00004a  5c08              LDRB     r0,[r1,r0]
00004c  28f1              CMP      r0,#0xf1
00004e  d11d              BNE      |L2.140|
;;;56             {
;;;57                 // 发送特定格式的消息回去
;;;58                 uint8_t response[] = {0xAA, 0x55, 0x01, 0x00, 0x28, 0x55, 0xAA};//播报是十进制
000050  a112              ADR      r1,|L2.156|
000052  c903              LDM      r1,{r0,r1}
000054  9101              STR      r1,[sp,#4]
000056  9000              STR      r0,[sp,#0]
;;;59                 for (uint8_t i = 0; i < sizeof(response); i++)
000058  2400              MOVS     r4,#0
00005a  e011              B        |L2.128|
                  |L2.92|
;;;60                 {
;;;61                     UART_SendData(UART2, response[i]); // 发送数据
00005c  4668              MOV      r0,sp
00005e  5d01              LDRB     r1,[r0,r4]
000060  480b              LDR      r0,|L2.144|
000062  f7fffffe          BL       UART_SendData
;;;62                     while (UART_GetFlagStatus(UART2, UART_Flag_TX) == RESET); // 等待发送完成
000066  bf00              NOP      
                  |L2.104|
000068  2102              MOVS     r1,#2
00006a  4809              LDR      r0,|L2.144|
00006c  f7fffffe          BL       UART_GetFlagStatus
000070  2800              CMP      r0,#0
000072  d0f9              BEQ      |L2.104|
;;;63                     UART_ClearFlag(UART2, UART_Flag_TX); // 清除发送标志
000074  2102              MOVS     r1,#2
000076  4806              LDR      r0,|L2.144|
000078  f7fffffe          BL       UART_ClearFlag
00007c  1c60              ADDS     r0,r4,#1              ;59
00007e  b2c4              UXTB     r4,r0                 ;59
                  |L2.128|
000080  2c07              CMP      r4,#7                 ;59
000082  d3eb              BCC      |L2.92|
;;;64                 }
;;;65     
;;;66                 RxIndex = 0; // 重置接收索引
000084  2000              MOVS     r0,#0
000086  4903              LDR      r1,|L2.148|
000088  7008              STRB     r0,[r1,#0]
;;;67             }
00008a  bf00              NOP      
                  |L2.140|
;;;68         }
00008c  bf00              NOP      
                  |L2.142|
;;;69     }
00008e  bd7c              POP      {r2-r6,pc}
                          ENDP

                  |L2.144|
                          DCD      0x40021020
                  |L2.148|
                          DCD      RxIndex
                  |L2.152|
                          DCD      UART_RxBuffer
                  |L2.156|
00009c  aa550100          DCB      170,"U",1,0
0000a0  2855aa00          DCB      "(U",170,0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_RxBuffer
                          %        100
                  UART_TxBuffer
                          %        100

                          AREA ||.data||, DATA, ALIGN=0

                  RxIndex
000000  00                DCB      0x00
                  UART_RxComplete
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\Apps\\UART_Communication.C"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_UART_Communication_C_3e2e9311____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___20_UART_Communication_C_3e2e9311____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_UART_Communication_C_3e2e9311____REVSH|
#line 478
|__asm___20_UART_Communication_C_3e2e9311____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
