; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\uart_communication.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\uart_communication.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -I..\Mqtt\Inc -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\uart_communication.crf ..\Apps\UART_Communication.C]
                          THUMB

                          AREA ||i.UART2_Handler||, CODE, READONLY, ALIGN=2

                  UART2_Handler PROC
;;;48      */
;;;49     void UART2_Handler(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;50     {
;;;51         if (UART_GetFlagStatus(UART2, UART_Flag_RX) == SET) // 接收中断
000002  2101              MOVS     r1,#1
000004  483f              LDR      r0,|L1.260|
000006  f7fffffe          BL       UART_GetFlagStatus
00000a  2801              CMP      r0,#1
00000c  d178              BNE      |L1.256|
;;;52         {
;;;53             UART_ClearFlag(UART2, UART_Flag_RX); // 清除接收标志
00000e  2101              MOVS     r1,#1
000010  483c              LDR      r0,|L1.260|
000012  f7fffffe          BL       UART_ClearFlag
;;;54             uint8_t receivedChar = UART_ReceiveData(UART2); // 接收数据
000016  483b              LDR      r0,|L1.260|
000018  f7fffffe          BL       UART_ReceiveData
00001c  b2c5              UXTB     r5,r0
;;;55     
;;;56             UART_RxBuffer[RxIndex++] = receivedChar; // 接收数据并存入缓冲区
00001e  493a              LDR      r1,|L1.264|
000020  7808              LDRB     r0,[r1,#0]  ; RxIndex
000022  1c41              ADDS     r1,r0,#1
000024  4a38              LDR      r2,|L1.264|
000026  7011              STRB     r1,[r2,#0]
000028  4938              LDR      r1,|L1.268|
00002a  540d              STRB     r5,[r1,r0]
;;;57     
;;;58             if (RxIndex >= MAX_BUFFER_SIZE) // 防止缓冲区溢出
00002c  4610              MOV      r0,r2
00002e  7800              LDRB     r0,[r0,#0]  ; RxIndex
000030  2864              CMP      r0,#0x64
000032  db02              BLT      |L1.58|
;;;59             {
;;;60               RxIndex = 0; // 重置接收索引
000034  2000              MOVS     r0,#0
000036  4611              MOV      r1,r2
000038  7008              STRB     r0,[r1,#0]
                  |L1.58|
;;;61             }
;;;62     
;;;63             // 检查是否接收到特定消息
;;;64             if (RxIndex >= 1)
00003a  4833              LDR      r0,|L1.264|
00003c  7800              LDRB     r0,[r0,#0]  ; RxIndex
00003e  2801              CMP      r0,#1
000040  db5d              BLT      |L1.254|
;;;65             {
;;;66               uint8_t response[7]; // 定义响应数组
;;;67               response[0] = 0xAA;  // 固定头帧
000042  21aa              MOVS     r1,#0xaa
000044  4668              MOV      r0,sp
000046  7001              STRB     r1,[r0,#0]
;;;68               response[1] = 0x55;  // 固定头帧
000048  2155              MOVS     r1,#0x55
00004a  7041              STRB     r1,[r0,#1]
;;;69     
;;;70               switch (UART_RxBuffer[RxIndex - 1])
00004c  482e              LDR      r0,|L1.264|
00004e  7800              LDRB     r0,[r0,#0]  ; RxIndex
000050  1e40              SUBS     r0,r0,#1
000052  492e              LDR      r1,|L1.268|
000054  5c08              LDRB     r0,[r1,r0]
000056  38f1              SUBS     r0,r0,#0xf1
000058  0003              MOVS     r3,r0
00005a  f7fffffe          BL       __ARM_common_switch8
00005e  0805              DCB      0x08,0x05
000060  0d12181e          DCB      0x0d,0x12,0x18,0x1e
000064  23292e2f          DCB      0x23,0x29,0x2e,0x2f
;;;71               {
;;;72               case 0xF1://返回时间播报
;;;73                 response[2] = 0x01;
000068  2101              MOVS     r1,#1
00006a  4668              MOV      r0,sp
00006c  7081              STRB     r1,[r0,#2]
;;;74                 response[3] = 0x00;
00006e  2100              MOVS     r1,#0
000070  70c1              STRB     r1,[r0,#3]
;;;75                 response[4] = 0x28; // F1对应的中间数据
000072  2128              MOVS     r1,#0x28
000074  7101              STRB     r1,[r0,#4]
;;;76                 break;
000076  e022              B        |L1.190|
;;;77               case 0xF2://开灯
;;;78                 GPIO_ResetBits(GPIOC, GPIO_Pin_4);  // LED1
000078  2110              MOVS     r1,#0x10
00007a  4825              LDR      r0,|L1.272|
00007c  f7fffffe          BL       GPIO_ResetBits
;;;79     
;;;80                 break;
000080  e01d              B        |L1.190|
;;;81               case 0xF3:                            // 关灯
;;;82                 GPIO_ResetBits(GPIOC, GPIO_Pin_10); // LED3
000082  2101              MOVS     r1,#1
000084  0289              LSLS     r1,r1,#10
000086  4822              LDR      r0,|L1.272|
000088  f7fffffe          BL       GPIO_ResetBits
;;;83                 break;
00008c  e017              B        |L1.190|
;;;84               case 0xF4:                            // 提高亮度
;;;85                 GPIO_ResetBits(GPIOC, GPIO_Pin_11); // LED4
00008e  2101              MOVS     r1,#1
000090  02c9              LSLS     r1,r1,#11
000092  481f              LDR      r0,|L1.272|
000094  f7fffffe          BL       GPIO_ResetBits
;;;86                 break;
000098  e011              B        |L1.190|
;;;87               case 0xF5:                           // 降低亮度
;;;88                 GPIO_ResetBits(GPIOA, GPIO_Pin_7); // LED5
00009a  2180              MOVS     r1,#0x80
00009c  481d              LDR      r0,|L1.276|
00009e  f7fffffe          BL       GPIO_ResetBits
;;;89                 break;
0000a2  e00c              B        |L1.190|
;;;90               case 0xF6:                           // 设置闹钟时间
;;;91                 GPIO_ResetBits(GPIOA, GPIO_Pin_8); // LED6
0000a4  21ff              MOVS     r1,#0xff
0000a6  3101              ADDS     r1,#1
0000a8  481a              LDR      r0,|L1.276|
0000aa  f7fffffe          BL       GPIO_ResetBits
;;;92                 break;
0000ae  e006              B        |L1.190|
;;;93               case 0xF7:                           // 关闹钟/停止响铃
;;;94                 GPIO_ResetBits(GPIOC, GPIO_Pin_5); // LED2
0000b0  2120              MOVS     r1,#0x20
0000b2  4817              LDR      r0,|L1.272|
0000b4  f7fffffe          BL       GPIO_ResetBits
;;;95                 break;
0000b8  e001              B        |L1.190|
;;;96               case 0xF8: // 切歌（下一首上一首均可）
;;;97     
;;;98                 break;
0000ba  e000              B        |L1.190|
                  |L1.188|
;;;99               default:
;;;100                return; // 如果没有匹配的消息，直接返回
;;;101              }
;;;102    
;;;103              response[5] = 0x55; // 固定尾帧
;;;104              response[6] = 0xAA; // 固定尾帧
;;;105    
;;;106              // 发送响应
;;;107              for (uint8_t i = 0; i < sizeof(response); i++)
;;;108              {
;;;109                UART_SendData(UART2, response[i]); // 发送数据
;;;110                while (UART_GetFlagStatus(UART2, UART_Flag_TX) == RESET)
;;;111                  ;                                  // 等待发送完成
;;;112                UART_ClearFlag(UART2, UART_Flag_TX); // 清除发送标志
;;;113              }
;;;114    
;;;115              RxIndex = 0; // 重置接收索引
;;;116            }
;;;117        }
;;;118    }
0000bc  bd7c              POP      {r2-r6,pc}
                  |L1.190|
0000be  bf00              NOP                            ;76
0000c0  2155              MOVS     r1,#0x55              ;103
0000c2  4668              MOV      r0,sp                 ;103
0000c4  7141              STRB     r1,[r0,#5]            ;103
0000c6  21aa              MOVS     r1,#0xaa              ;104
0000c8  7181              STRB     r1,[r0,#6]            ;104
0000ca  2400              MOVS     r4,#0                 ;107
0000cc  e011              B        |L1.242|
                  |L1.206|
0000ce  4668              MOV      r0,sp                 ;109
0000d0  5d01              LDRB     r1,[r0,r4]            ;109
0000d2  480c              LDR      r0,|L1.260|
0000d4  f7fffffe          BL       UART_SendData
0000d8  bf00              NOP                            ;110
                  |L1.218|
0000da  2102              MOVS     r1,#2                 ;110
0000dc  4809              LDR      r0,|L1.260|
0000de  f7fffffe          BL       UART_GetFlagStatus
0000e2  2800              CMP      r0,#0                 ;110
0000e4  d0f9              BEQ      |L1.218|
0000e6  2102              MOVS     r1,#2                 ;112
0000e8  4806              LDR      r0,|L1.260|
0000ea  f7fffffe          BL       UART_ClearFlag
0000ee  1c60              ADDS     r0,r4,#1              ;107
0000f0  b2c4              UXTB     r4,r0                 ;107
                  |L1.242|
0000f2  2c07              CMP      r4,#7                 ;107
0000f4  d3eb              BCC      |L1.206|
0000f6  2000              MOVS     r0,#0                 ;115
0000f8  4903              LDR      r1,|L1.264|
0000fa  7008              STRB     r0,[r1,#0]            ;115
0000fc  bf00              NOP                            ;116
                  |L1.254|
0000fe  bf00              NOP                            ;117
                  |L1.256|
000100  bf00              NOP      
000102  e7db              B        |L1.188|
                          ENDP

                  |L1.260|
                          DCD      0x40021020
                  |L1.264|
                          DCD      RxIndex
                  |L1.268|
                          DCD      UART_RxBuffer
                  |L1.272|
                          DCD      0x40011200
                  |L1.276|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UART_RxBuffer
                          %        100
                  UART_TxBuffer
                          %        100

                          AREA ||.data||, DATA, ALIGN=0

                  RxIndex
000000  00                DCB      0x00
                  UART_RxComplete
000001  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L16.24|
                  |L16.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L16.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L16.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Apps\\UART_Communication.C"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_UART_Communication_C_6dbd81b9____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___20_UART_Communication_C_6dbd81b9____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_UART_Communication_C_6dbd81b9____REVSH|
#line 478
|__asm___20_UART_Communication_C_6dbd81b9____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
