; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\main.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\main.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -I..\ADC_IAP\Inc -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.Delay_ms||, CODE, READONLY, ALIGN=1

                  Delay_ms PROC
;;;104    
;;;105    void Delay_ms(uint16_t xms)
000000  b570              PUSH     {r4-r6,lr}
;;;106    {
000002  4604              MOV      r4,r0
;;;107        int i;
;;;108        for (i = 0; i < xms; i++)
000004  2500              MOVS     r5,#0
000006  e004              B        |L1.18|
                  |L1.8|
;;;109        {
;;;110            Delay_us(1000);
000008  207d              MOVS     r0,#0x7d
00000a  00c0              LSLS     r0,r0,#3
00000c  f7fffffe          BL       Delay_us
000010  1c6d              ADDS     r5,r5,#1              ;108
                  |L1.18|
000012  42a5              CMP      r5,r4                 ;108
000014  dbf8              BLT      |L1.8|
;;;111        }
;;;112    }
000016  bd70              POP      {r4-r6,pc}
;;;113    
                          ENDP


                          AREA ||i.Delay_us||, CODE, READONLY, ALIGN=2

                  Delay_us PROC
;;;96     
;;;97     void Delay_us(uint16_t xus)
000000  b510              PUSH     {r4,lr}
;;;98     {
000002  4604              MOV      r4,r0
;;;99         TIM_Cmd(TIM1,ENABLE); 
000004  2101              MOVS     r1,#1
000006  4808              LDR      r0,|L2.40|
000008  f7fffffe          BL       TIM_Cmd
;;;100        while(TIM1->TIM_CNT < xus);
00000c  bf00              NOP      
                  |L2.14|
00000e  4806              LDR      r0,|L2.40|
000010  6840              LDR      r0,[r0,#4]
000012  42a0              CMP      r0,r4
000014  d3fb              BCC      |L2.14|
;;;101        TIM1->TIM_CNT = 0;
000016  2000              MOVS     r0,#0
000018  4903              LDR      r1,|L2.40|
00001a  6048              STR      r0,[r1,#4]
;;;102        TIM_Cmd(TIM1,DISABLE); 
00001c  2100              MOVS     r1,#0
00001e  4802              LDR      r0,|L2.40|
000020  f7fffffe          BL       TIM_Cmd
;;;103    }
000024  bd10              POP      {r4,pc}
;;;104    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40020140

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;40      */
;;;41     int main(void)
000000  f7fffffe          BL       IcResourceInit
;;;42     {
;;;43         /*<Generated by EasyCodeCube begin>*/
;;;44         /*<UserCodeStart>*//*<SinOne-Tag><36>*/
;;;45         IcResourceInit();
;;;46         TIM_Cmd(TIM2, DISABLE);
000004  2100              MOVS     r1,#0
000006  4822              LDR      r0,|L3.144|
000008  f7fffffe          BL       TIM_Cmd
;;;47         Buzzer_SetVolume(50);
00000c  2032              MOVS     r0,#0x32
00000e  f7fffffe          BL       Buzzer_SetVolume
;;;48         TK_Init();                    //重要步骤1：TK的初始化函数
000012  f7fffffe          BL       TK_Init
;;;49         /*读取掉电保存设置*/
;;;50         /*<UserCodeEnd>*//*<SinOne-Tag><36>*/
;;;51         
;;;52         /*<UserCodeStart>*//*<SinOne-Tag><4>*/
;;;53         /*****MainLoop*****/
;;;54         while(1)
000016  e03a              B        |L3.142|
                  |L3.24|
;;;55         {
;;;56             /*<UserCodeStart>*//*<SinOne-Tag><14>*/
;;;57             /***User program***/
;;;58             IAP_Program();
000018  f7fffffe          BL       IAP_Program
;;;59             switch(Task_state)
00001c  481d              LDR      r0,|L3.148|
00001e  7800              LDRB     r0,[r0,#0]  ; Task_state
000020  0003              MOVS     r3,r0
000022  f7fffffe          BL       __ARM_common_switch8
000026  0504              DCB      0x05,0x04
000028  1f202132          DCB      0x1f,0x20,0x21,0x32
00002c  3300              DCB      0x33,0x00
;;;60             {
;;;61                 case 0:                                 // init
;;;62                 GPIO_ResetBits(GPIOC, GPIO_Pin_4);  // LED1
00002e  2110              MOVS     r1,#0x10
000030  4819              LDR      r0,|L3.152|
000032  f7fffffe          BL       GPIO_ResetBits
;;;63                 GPIO_ResetBits(GPIOC, GPIO_Pin_10); // LED3
000036  2101              MOVS     r1,#1
000038  0289              LSLS     r1,r1,#10
00003a  4817              LDR      r0,|L3.152|
00003c  f7fffffe          BL       GPIO_ResetBits
;;;64                 GPIO_ResetBits(GPIOC, GPIO_Pin_11); // LED4
000040  2101              MOVS     r1,#1
000042  02c9              LSLS     r1,r1,#11
000044  4814              LDR      r0,|L3.152|
000046  f7fffffe          BL       GPIO_ResetBits
;;;65                 GPIO_ResetBits(GPIOA, GPIO_Pin_7);  // LED5
00004a  2180              MOVS     r1,#0x80
00004c  4813              LDR      r0,|L3.156|
00004e  f7fffffe          BL       GPIO_ResetBits
;;;66                 GPIO_ResetBits(GPIOA, GPIO_Pin_8);  // LED6
000052  21ff              MOVS     r1,#0xff
000054  3101              ADDS     r1,#1
000056  4811              LDR      r0,|L3.156|
000058  f7fffffe          BL       GPIO_ResetBits
;;;67                 Task_state = 3;
00005c  2003              MOVS     r0,#3
00005e  490d              LDR      r1,|L3.148|
000060  7008              STRB     r0,[r1,#0]
;;;68                 break;
000062  e013              B        |L3.140|
;;;69                 case 1:                             // TK task
;;;70                 break;
000064  e012              B        |L3.140|
;;;71                 case 2: // Buzz SET
;;;72                 break;
000066  e011              B        |L3.140|
;;;73                 case 3: // ADC SET
;;;74                 //ADC_value1 = ADC_GetConversionValue(ADC);
;;;75                 ADC_value2 = readADC(ADC_Channel_13);
000068  200d              MOVS     r0,#0xd
00006a  f7fffffe          BL       readADC
00006e  490c              LDR      r1,|L3.160|
000070  8008              STRH     r0,[r1,#0]
;;;76                 Voltage = adcToVoltage(ADC_value2);
000072  4608              MOV      r0,r1
000074  8800              LDRH     r0,[r0,#0]  ; ADC_value2
000076  f7fffffe          BL       adcToVoltage
00007a  490a              LDR      r1,|L3.164|
00007c  6008              STR      r0,[r1,#0]  ; Voltage
;;;77                 Channel = ADC_GetChannel(ADC);
00007e  480a              LDR      r0,|L3.168|
000080  f7fffffe          BL       ADC_GetChannel
000084  4909              LDR      r1,|L3.172|
000086  7008              STRB     r0,[r1,#0]
;;;78                 
;;;79                 break;
000088  e000              B        |L3.140|
;;;80                 case 4: // ADC get
;;;81                 
;;;82                 break;
00008a  bf00              NOP      
                  |L3.140|
00008c  bf00              NOP                            ;68
                  |L3.142|
00008e  e7c3              B        |L3.24|
;;;83             }
;;;84             
;;;85             /*<UserCodeEnd>*//*<SinOne-Tag><14>*/
;;;86             /*<UserCodeStart>*//*<SinOne-Tag><77>*/
;;;87             /*<UserCodeEnd>*//*<SinOne-Tag><77>*/
;;;88             /*<UserCodeStart>*//*<SinOne-Tag><412>*/
;;;89             //IAP_Program();
;;;90             /*<UserCodeEnd>*//*<SinOne-Tag><412>*/
;;;91             /*<Begin-Inserted by EasyCodeCube for Condition>*/
;;;92         }
;;;93         /*<UserCodeEnd>*//*<SinOne-Tag><4>*/
;;;94         /*<Generated by EasyCodeCube end>*/
;;;95     }
;;;96     
                          ENDP

                  |L3.144|
                          DCD      0x40020180
                  |L3.148|
                          DCD      Task_state
                  |L3.152|
                          DCD      0x40011200
                  |L3.156|
                          DCD      0x40011000
                  |L3.160|
                          DCD      ADC_value2
                  |L3.164|
                          DCD      Voltage
                  |L3.168|
                          DCD      0x40022110
                  |L3.172|
                          DCD      Channel

                          AREA ||.data||, DATA, ALIGN=2

                  Task_state
000000  0000              DCB      0x00,0x00
                  ADC_value1
000002  0000              DCB      0x00,0x00
                  ADC_value2
000004  0000              DCB      0x00,0x00
                  Channel
000006  0000              DCB      0x00,0x00
                  Voltage
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L28.24|
                  |L28.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L28.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L28.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 478
|__asm___6_main_c_main____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
