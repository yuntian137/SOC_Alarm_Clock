; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\main.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\main.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -I..\Mqtt\Inc -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.DataProcessing||, CODE, READONLY, ALIGN=2

                  DataProcessing PROC
;;;32     uint32_t TK_exKeyValueFlag;
;;;33     void DataProcessing(uint32_t value)
000000  490a              LDR      r1,|L1.44|
;;;34     {
;;;35         switch (TK_exKeyValueFlag)
000002  6809              LDR      r1,[r1,#0]  ; TK_exKeyValueFlag
000004  2201              MOVS     r2,#1
000006  0452              LSLS     r2,r2,#17
000008  1a89              SUBS     r1,r1,r2
00000a  d005              BEQ      |L1.24|
00000c  1a89              SUBS     r1,r1,r2
00000e  d107              BNE      |L1.32|
;;;36         {
;;;37             case 0x00040000:
;;;38             exKeyValue = 18;// 模式/确认
000010  2112              MOVS     r1,#0x12
000012  4a07              LDR      r2,|L1.48|
000014  7011              STRB     r1,[r2,#0]
;;;39             break;
000016  e007              B        |L1.40|
                  |L1.24|
;;;40             case 0x00020000:
;;;41             exKeyValue = 17;// 返回
000018  2111              MOVS     r1,#0x11
00001a  4a05              LDR      r2,|L1.48|
00001c  7011              STRB     r1,[r2,#0]
;;;42             break;
00001e  e003              B        |L1.40|
                  |L1.32|
;;;43             default:
;;;44             exKeyValue = 0xff;
000020  21ff              MOVS     r1,#0xff
000022  4a03              LDR      r2,|L1.48|
000024  7011              STRB     r1,[r2,#0]
;;;45             break;
000026  bf00              NOP      
                  |L1.40|
000028  bf00              NOP                            ;39
;;;46         }
;;;47     }
00002a  4770              BX       lr
;;;48     uint8_t first_Press;
                          ENDP

                  |L1.44|
                          DCD      TK_exKeyValueFlag
                  |L1.48|
                          DCD      exKeyValue

                          AREA ||i.Delay_ms||, CODE, READONLY, ALIGN=1

                  Delay_ms PROC
;;;176            
;;;177            void Delay_ms(uint16_t xms)
000000  b570              PUSH     {r4-r6,lr}
;;;178            {
000002  4604              MOV      r4,r0
;;;179                int i;
;;;180                for (i = 0; i < xms; i++)
000004  2500              MOVS     r5,#0
000006  e004              B        |L2.18|
                  |L2.8|
;;;181                {
;;;182                    Delay_us(1000);
000008  207d              MOVS     r0,#0x7d
00000a  00c0              LSLS     r0,r0,#3
00000c  f7fffffe          BL       Delay_us
000010  1c6d              ADDS     r5,r5,#1              ;180
                  |L2.18|
000012  42a5              CMP      r5,r4                 ;180
000014  dbf8              BLT      |L2.8|
;;;183                }
;;;184            }
000016  bd70              POP      {r4-r6,pc}
;;;185            
                          ENDP


                          AREA ||i.Delay_us||, CODE, READONLY, ALIGN=2

                  Delay_us PROC
;;;167    }
;;;168            void Delay_us(uint16_t xus)
000000  b510              PUSH     {r4,lr}
;;;169            {
000002  4604              MOV      r4,r0
;;;170                TIM_Cmd(TIM1, ENABLE);
000004  2101              MOVS     r1,#1
000006  4808              LDR      r0,|L3.40|
000008  f7fffffe          BL       TIM_Cmd
;;;171                while (TIM1->TIM_CNT < xus)
00000c  bf00              NOP      
                  |L3.14|
00000e  4806              LDR      r0,|L3.40|
000010  6840              LDR      r0,[r0,#4]
000012  42a0              CMP      r0,r4
000014  d3fb              BCC      |L3.14|
;;;172                ;
;;;173                TIM1->TIM_CNT = 0;
000016  2000              MOVS     r0,#0
000018  4903              LDR      r1,|L3.40|
00001a  6048              STR      r0,[r1,#4]
;;;174                TIM_Cmd(TIM1, DISABLE);
00001c  2100              MOVS     r1,#0
00001e  4802              LDR      r0,|L3.40|
000020  f7fffffe          BL       TIM_Cmd
;;;175            }
000024  bd10              POP      {r4,pc}
;;;176            
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x40020140

                          AREA ||i.UpdateDisplay||, CODE, READONLY, ALIGN=2

                  UpdateDisplay PROC
;;;48     uint8_t first_Press;
;;;49     void UpdateDisplay(uint8_t KeyValue)
000000  b510              PUSH     {r4,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51         if (exKeyValue != 0XFF) // 松手前只出一次键
000004  481a              LDR      r0,|L4.112|
000006  7800              LDRB     r0,[r0,#0]  ; exKeyValue
000008  28ff              CMP      r0,#0xff
00000a  d02b              BEQ      |L4.100|
;;;52         {
;;;53             gTkIsValid = 1;
00000c  2001              MOVS     r0,#1
00000e  4919              LDR      r1,|L4.116|
000010  7008              STRB     r0,[r1,#0]
;;;54             ///KeyValue = exKeyValue;
;;;55             if (first_Press == 0)
000012  4819              LDR      r0,|L4.120|
000014  7800              LDRB     r0,[r0,#0]  ; first_Press
000016  2800              CMP      r0,#0
000018  d129              BNE      |L4.110|
;;;56             {
;;;57                 if (KeyValue == 17)
00001a  2c11              CMP      r4,#0x11
00001c  d10a              BNE      |L4.52|
;;;58                 {
;;;59                     GPIO_TogglePins(GPIOA, GPIO_Pin_12);  // 红外传感器开�?                GPIO_TogglePins(GPIOC, GPIO_Pin_10); // LED 灯翻�?
00001e  2101              MOVS     r1,#1
000020  0309              LSLS     r1,r1,#12
000022  4816              LDR      r0,|L4.124|
000024  f7fffffe          BL       GPIO_TogglePins
;;;60                     GPIO_SetBits(GPIOA, GPIO_Pin_9);//开马达
000028  2101              MOVS     r1,#1
00002a  0249              LSLS     r1,r1,#9
00002c  4813              LDR      r0,|L4.124|
00002e  f7fffffe          BL       GPIO_SetBits
000032  e010              B        |L4.86|
                  |L4.52|
;;;61                 }
;;;62                 else if (KeyValue == 18)
000034  2c12              CMP      r4,#0x12
000036  d10e              BNE      |L4.86|
;;;63                 {
;;;64                     //GPIO_TogglePins(GPIOC, GPIO_Pin_5);  // LED 灯翻�?
;;;65                     //GPIO_TogglePins(GPIOC, GPIO_Pin_11); // LED 灯翻�?
;;;66                     GPIO_SetBits(GPIOC, GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_10 | GPIO_Pin_11); // 先关闭所�?LED
000038  21c3              MOVS     r1,#0xc3
00003a  0109              LSLS     r1,r1,#4
00003c  4810              LDR      r0,|L4.128|
00003e  f7fffffe          BL       GPIO_SetBits
;;;67                     GPIO_SetBits(GPIOA, GPIO_Pin_7 | GPIO_Pin_8);                             // 先关闭所�?LED
000042  21ff              MOVS     r1,#0xff
000044  3181              ADDS     r1,r1,#0x81
000046  480d              LDR      r0,|L4.124|
000048  f7fffffe          BL       GPIO_SetBits
;;;68                     GPIO_SetBits(GPIOA, GPIO_Pin_9);//开马达
00004c  2101              MOVS     r1,#1
00004e  0249              LSLS     r1,r1,#9
000050  480a              LDR      r0,|L4.124|
000052  f7fffffe          BL       GPIO_SetBits
                  |L4.86|
;;;69                     
;;;70                 }
;;;71                 //震动0.1s
;;;72                 Delay_ms(100);
000056  2064              MOVS     r0,#0x64
000058  f7fffffe          BL       Delay_ms
;;;73                 //printf("按下value%u\r\n", exKeyValue);
;;;74                 first_Press = 1;
00005c  2001              MOVS     r0,#1
00005e  4906              LDR      r1,|L4.120|
000060  7008              STRB     r0,[r1,#0]
000062  e004              B        |L4.110|
                  |L4.100|
;;;75             }
;;;76         }
;;;77         else
;;;78         {
;;;79             gTkIsValid = 0;
000064  2000              MOVS     r0,#0
000066  4903              LDR      r1,|L4.116|
000068  7008              STRB     r0,[r1,#0]
;;;80             first_Press = 0;
00006a  4903              LDR      r1,|L4.120|
00006c  7008              STRB     r0,[r1,#0]
                  |L4.110|
;;;81         }
;;;82     }
00006e  bd10              POP      {r4,pc}
;;;83     /**
                          ENDP

                  |L4.112|
                          DCD      exKeyValue
                  |L4.116|
                          DCD      gTkIsValid
                  |L4.120|
                          DCD      first_Press
                  |L4.124|
                          DCD      0x40011000
                  |L4.128|
                          DCD      0x40011200

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;185            
;;;186            int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;187            {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;188                //发送字符到UART0
;;;189                UART_SendData(UART1, (uint8_t)ch);
000006  b2e1              UXTB     r1,r4
000008  4805              LDR      r0,|L5.32|
00000a  f7fffffe          BL       UART_SendData
;;;190                while (UART_GetFlagStatus(UART1, UART_Flag_TX) == RESET); // 等待发送完�?    UART_ClearFlag(UART1, UART_Flag_TX); // 清除发送完成标�?
00000e  bf00              NOP      
                  |L5.16|
000010  2102              MOVS     r1,#2
000012  4803              LDR      r0,|L5.32|
000014  f7fffffe          BL       UART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L5.16|
;;;191                return ch;
00001c  4620              MOV      r0,r4
;;;192            }
00001e  bd70              POP      {r4-r6,pc}
;;;193    
                          ENDP

                  |L5.32|
                          DCD      0x40020080

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;89     uint32_t cnt2;
;;;90     int main(void)
000000  f7fffffe          BL       IcResourceInit
;;;91     {
;;;92         /*<Generated by EasyCodeCube begin>*/
;;;93         /*<UserCodeStart>*/ /*<SinOne-Tag><36>*/
;;;94         IcResourceInit();
;;;95         TIM_Cmd(TIM2, DISABLE);
000004  2100              MOVS     r1,#0
000006  4839              LDR      r0,|L6.236|
000008  f7fffffe          BL       TIM_Cmd
;;;96         Buzzer_SetVolume(50);
00000c  2032              MOVS     r0,#0x32
00000e  f7fffffe          BL       Buzzer_SetVolume
;;;97         TK_Init();        // 重要步骤1：TK的初始化函数
000012  f7fffffe          BL       TK_Init
;;;98         WIFI_Init();
000016  f7fffffe          BL       WIFI_Init
;;;99         /*<UserCodeEnd>*/ /*<SinOne-Tag><36>*/
;;;100    
;;;101        /*<UserCodeStart>*/ /*<SinOne-Tag><4>*/
;;;102        /*****MainLoop*****/
;;;103        while (1)
00001a  e066              B        |L6.234|
                  |L6.28|
;;;104        {
;;;105            /*<UserCodeStart>*/ /*<SinOne-Tag><14>*/
;;;106            /***User program***/
;;;107    
;;;108            switch (Task_state)
00001c  4834              LDR      r0,|L6.240|
00001e  7800              LDRB     r0,[r0,#0]  ; Task_state
000020  0003              MOVS     r3,r0
000022  f7fffffe          BL       __ARM_common_switch8
000026  0504              DCB      0x05,0x04
000028  1f5e5f60          DCB      0x1f,0x5e,0x5f,0x60
00002c  6100              DCB      0x61,0x00
;;;109            {
;;;110            case 0:                                 // init
;;;111                GPIO_ResetBits(GPIOC, GPIO_Pin_4);  // LED1
00002e  2110              MOVS     r1,#0x10
000030  4830              LDR      r0,|L6.244|
000032  f7fffffe          BL       GPIO_ResetBits
;;;112                GPIO_ResetBits(GPIOC, GPIO_Pin_10); // LED3
000036  2101              MOVS     r1,#1
000038  0289              LSLS     r1,r1,#10
00003a  482e              LDR      r0,|L6.244|
00003c  f7fffffe          BL       GPIO_ResetBits
;;;113                GPIO_ResetBits(GPIOC, GPIO_Pin_11); // LED4
000040  2101              MOVS     r1,#1
000042  02c9              LSLS     r1,r1,#11
000044  482b              LDR      r0,|L6.244|
000046  f7fffffe          BL       GPIO_ResetBits
;;;114                GPIO_ResetBits(GPIOA, GPIO_Pin_7);  // LED5
00004a  2180              MOVS     r1,#0x80
00004c  482a              LDR      r0,|L6.248|
00004e  f7fffffe          BL       GPIO_ResetBits
;;;115                GPIO_ResetBits(GPIOA, GPIO_Pin_8);  // LED6
000052  21ff              MOVS     r1,#0xff
000054  3101              ADDS     r1,#1
000056  4828              LDR      r0,|L6.248|
000058  f7fffffe          BL       GPIO_ResetBits
;;;116                Task_state = 1;
00005c  2001              MOVS     r0,#1
00005e  4924              LDR      r1,|L6.240|
000060  7008              STRB     r0,[r1,#0]
;;;117                break;
000062  e041              B        |L6.232|
;;;118            case 1:                             // TK task
;;;119                WDT->WDT_CON |= WDT_CON_CLRWDT; // 清watchdog
000064  4825              LDR      r0,|L6.252|
000066  6bc0              LDR      r0,[r0,#0x3c]
000068  2101              MOVS     r1,#1
00006a  4308              ORRS     r0,r0,r1
00006c  4923              LDR      r1,|L6.252|
00006e  63c8              STR      r0,[r1,#0x3c]
;;;120    
;;;121                // 重要步骤2：触摸键扫描一轮标志，是否调用TouchKeyScan()一定要根据此标志位置起�?
;;;122                if (TK_TouchKeyStatus & 0x80)
000070  4823              LDR      r0,|L6.256|
000072  7800              LDRB     r0,[r0,#0]  ; TK_TouchKeyStatus
000074  2180              MOVS     r1,#0x80
000076  4008              ANDS     r0,r0,r1
000078  2800              CMP      r0,#0
00007a  d013              BEQ      |L6.164|
;;;123                { // 重要步骤3：清除标志位，需要外部清�?
;;;124                    TK_TouchKeyStatus &= 0x7f;
00007c  4820              LDR      r0,|L6.256|
00007e  7800              LDRB     r0,[r0,#0]  ; TK_TouchKeyStatus
000080  0640              LSLS     r0,r0,#25
000082  0e40              LSRS     r0,r0,#25
000084  491e              LDR      r1,|L6.256|
000086  7008              STRB     r0,[r1,#0]
;;;125                    // 重要步骤4：分析按键数据，并返回结果出�?
;;;126                    TK_exKeyValueFlag = TK_TouchKeyScan();
000088  f7fffffe          BL       TK_TouchKeyScan
00008c  491d              LDR      r1,|L6.260|
00008e  6008              STR      r0,[r1,#0]  ; TK_exKeyValueFlag
;;;127                    DataProcessing(TK_exKeyValueFlag); // 按键数据处理函数
000090  4608              MOV      r0,r1
000092  6800              LDR      r0,[r0,#0]  ; TK_exKeyValueFlag
000094  f7fffffe          BL       DataProcessing
;;;128    
;;;129                    UpdateDisplay(exKeyValue);
000098  481b              LDR      r0,|L6.264|
00009a  7800              LDRB     r0,[r0,#0]  ; exKeyValue
00009c  f7fffffe          BL       UpdateDisplay
;;;130                    TK_Restart(); // 启动下一轮转�?
0000a0  f7fffffe          BL       TK_Restart
                  |L6.164|
;;;131                }
;;;132                if (cnt1 % 300 == 0)
0000a4  21ff              MOVS     r1,#0xff
0000a6  312d              ADDS     r1,r1,#0x2d
0000a8  4818              LDR      r0,|L6.268|
0000aa  6800              LDR      r0,[r0,#0]  ; cnt1
0000ac  f7fffffe          BL       __aeabi_uidivmod
0000b0  2900              CMP      r1,#0
0000b2  d110              BNE      |L6.214|
;;;133                {
;;;134                    cnt2++;
0000b4  4816              LDR      r0,|L6.272|
0000b6  6800              LDR      r0,[r0,#0]  ; cnt2
0000b8  1c40              ADDS     r0,r0,#1
0000ba  4915              LDR      r1,|L6.272|
0000bc  6008              STR      r0,[r1,#0]  ; cnt2
;;;135                    if (cnt2 % 80 == 0)
0000be  2150              MOVS     r1,#0x50
0000c0  4813              LDR      r0,|L6.272|
0000c2  6800              LDR      r0,[r0,#0]  ; cnt2
0000c4  f7fffffe          BL       __aeabi_uidivmod
0000c8  2900              CMP      r1,#0
0000ca  d104              BNE      |L6.214|
;;;136                        GPIO_TogglePins(GPIOA, GPIO_Pin_8); // LED 灯翻�?
0000cc  21ff              MOVS     r1,#0xff
0000ce  3101              ADDS     r1,#1
0000d0  4809              LDR      r0,|L6.248|
0000d2  f7fffffe          BL       GPIO_TogglePins
                  |L6.214|
;;;137                }
;;;138                cnt1++;
0000d6  480d              LDR      r0,|L6.268|
0000d8  6800              LDR      r0,[r0,#0]  ; cnt1
0000da  1c40              ADDS     r0,r0,#1
0000dc  490b              LDR      r1,|L6.268|
0000de  6008              STR      r0,[r1,#0]  ; cnt1
;;;139    
;;;140    
;;;141    
;;;142    
;;;143                break;
0000e0  e002              B        |L6.232|
;;;144            case 2: // Buzz SET
;;;145                break;
0000e2  e001              B        |L6.232|
;;;146            case 3: // RGB SET
;;;147                break;
0000e4  e000              B        |L6.232|
;;;148            case 4: // ADC get
;;;149                break;
0000e6  bf00              NOP      
                  |L6.232|
0000e8  bf00              NOP                            ;117
                  |L6.234|
0000ea  e797              B        |L6.28|
;;;150            }
;;;151    
;;;152            /*<UserCodeEnd>*/   /*<SinOne-Tag><14>*/
;;;153            /*<UserCodeStart>*/ /*<SinOne-Tag><77>*/
;;;154            /*<UserCodeEnd>*/   /*<SinOne-Tag><77>*/
;;;155            /*<UserCodeStart>*/ /*<SinOne-Tag><453>*/
;;;156            /*<UserCodeEnd>*/   /*<SinOne-Tag><453>*/
;;;157            /*<UserCodeStart>*/ /*<SinOne-Tag><469>*/
;;;158            /*<UserCodeEnd>*/   /*<SinOne-Tag><469>*/
;;;159            /*<UserCodeStart>*/ /*<SinOne-Tag><481>*/
;;;160            //UART_Communication_DMA();
;;;161            /*<UserCodeEnd>*/ /*<SinOne-Tag><481>*/
;;;162                              /*<Begin-Inserted by EasyCodeCube for Condition>*/
;;;163    
;;;164            /*<UserCodeEnd>*/ /*<SinOne-Tag><4>*/
;;;165                              /*<Generated by EasyCodeCube end>*/
;;;166        }
;;;167    }
;;;168            void Delay_us(uint16_t xus)
                          ENDP

                  |L6.236|
                          DCD      0x40020180
                  |L6.240|
                          DCD      Task_state
                  |L6.244|
                          DCD      0x40011200
                  |L6.248|
                          DCD      0x40011000
                  |L6.252|
                          DCD      0x40000300
                  |L6.256|
                          DCD      TK_TouchKeyStatus
                  |L6.260|
                          DCD      TK_exKeyValueFlag
                  |L6.264|
                          DCD      exKeyValue
                  |L6.268|
                          DCD      cnt1
                  |L6.272|
                          DCD      cnt2

                          AREA ||.data||, DATA, ALIGN=2

                  exKeyValue
000000  00                DCB      0x00
                  gTkIsValid
000001  00                DCB      0x00
                  Task_state
000002  0000              DCB      0x00,0x00
                  TK_exKeyValueFlag
                          DCD      0x00000000
                  first_Press
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt1
                          DCD      0x00000000
                  cnt2
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L46.24|
                  |L46.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L46.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L46.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_04ffa752____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___6_main_c_04ffa752____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_04ffa752____REVSH|
#line 478
|__asm___6_main_c_04ffa752____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
