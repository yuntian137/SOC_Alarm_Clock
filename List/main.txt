; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\main.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\main.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -I..\ADC_IAP\Inc -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.DataProcessing||, CODE, READONLY, ALIGN=2

                  DataProcessing PROC
;;;39     uint32_t TK_exKeyValueFlag;
;;;40     void DataProcessing(uint32_t value)
000000  490a              LDR      r1,|L1.44|
;;;41     {
;;;42         switch (TK_exKeyValueFlag)
000002  6809              LDR      r1,[r1,#0]  ; TK_exKeyValueFlag
000004  2201              MOVS     r2,#1
000006  0452              LSLS     r2,r2,#17
000008  1a89              SUBS     r1,r1,r2
00000a  d005              BEQ      |L1.24|
00000c  1a89              SUBS     r1,r1,r2
00000e  d107              BNE      |L1.32|
;;;43         {
;;;44         case 0x00040000:
;;;45             exKeyValue = 18;// 模式/确认
000010  2112              MOVS     r1,#0x12
000012  4a07              LDR      r2,|L1.48|
000014  7011              STRB     r1,[r2,#0]
;;;46             break;
000016  e007              B        |L1.40|
                  |L1.24|
;;;47         case 0x00020000:
;;;48             exKeyValue = 17;// 返回
000018  2111              MOVS     r1,#0x11
00001a  4a05              LDR      r2,|L1.48|
00001c  7011              STRB     r1,[r2,#0]
;;;49             break;
00001e  e003              B        |L1.40|
                  |L1.32|
;;;50         default:
;;;51             exKeyValue = 0xff;
000020  21ff              MOVS     r1,#0xff
000022  4a03              LDR      r2,|L1.48|
000024  7011              STRB     r1,[r2,#0]
;;;52             break;
000026  bf00              NOP      
                  |L1.40|
000028  bf00              NOP                            ;46
;;;53         }
;;;54     }
00002a  4770              BX       lr
;;;55     uint8_t first_Press;
                          ENDP

                  |L1.44|
                          DCD      TK_exKeyValueFlag
                  |L1.48|
                          DCD      exKeyValue

                          AREA ||i.Delay_ms||, CODE, READONLY, ALIGN=1

                  Delay_ms PROC
;;;188    
;;;189    void Delay_ms(uint16_t xms)
000000  b570              PUSH     {r4-r6,lr}
;;;190    {
000002  4604              MOV      r4,r0
;;;191        int i;
;;;192        for (i = 0; i < xms; i++)
000004  2500              MOVS     r5,#0
000006  e004              B        |L2.18|
                  |L2.8|
;;;193        {
;;;194            Delay_us(1000);
000008  207d              MOVS     r0,#0x7d
00000a  00c0              LSLS     r0,r0,#3
00000c  f7fffffe          BL       Delay_us
000010  1c6d              ADDS     r5,r5,#1              ;192
                  |L2.18|
000012  42a5              CMP      r5,r4                 ;192
000014  dbf8              BLT      |L2.8|
;;;195        }
;;;196    }
000016  bd70              POP      {r4-r6,pc}
;;;197    
                          ENDP


                          AREA ||i.Delay_us||, CODE, READONLY, ALIGN=2

                  Delay_us PROC
;;;180    
;;;181    void Delay_us(uint16_t xus)
000000  b510              PUSH     {r4,lr}
;;;182    {
000002  4604              MOV      r4,r0
;;;183        TIM_Cmd(TIM1,ENABLE); 
000004  2101              MOVS     r1,#1
000006  4808              LDR      r0,|L3.40|
000008  f7fffffe          BL       TIM_Cmd
;;;184        while(TIM1->TIM_CNT < xus);
00000c  bf00              NOP      
                  |L3.14|
00000e  4806              LDR      r0,|L3.40|
000010  6840              LDR      r0,[r0,#4]
000012  42a0              CMP      r0,r4
000014  d3fb              BCC      |L3.14|
;;;185        TIM1->TIM_CNT = 0;
000016  2000              MOVS     r0,#0
000018  4903              LDR      r1,|L3.40|
00001a  6048              STR      r0,[r1,#4]
;;;186        TIM_Cmd(TIM1,DISABLE); 
00001c  2100              MOVS     r1,#0
00001e  4802              LDR      r0,|L3.40|
000020  f7fffffe          BL       TIM_Cmd
;;;187    }
000024  bd10              POP      {r4,pc}
;;;188    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x40020140

                          AREA ||i.UpdateDisplay||, CODE, READONLY, ALIGN=2

                  UpdateDisplay PROC
;;;56     uint8_t cnt;
;;;57     void UpdateDisplay(uint8_t KeyValue)
000000  4911              LDR      r1,|L4.72|
;;;58     {
;;;59         if (exKeyValue != 0XFF) // 松手前只出一次键
000002  7809              LDRB     r1,[r1,#0]  ; exKeyValue
000004  29ff              CMP      r1,#0xff
000006  d019              BEQ      |L4.60|
;;;60         {
;;;61             gTkIsValid = 1;
000008  2101              MOVS     r1,#1
00000a  4a10              LDR      r2,|L4.76|
00000c  7011              STRB     r1,[r2,#0]
;;;62             KeyValue = exKeyValue;
00000e  490e              LDR      r1,|L4.72|
000010  7808              LDRB     r0,[r1,#0]  ; exKeyValue
;;;63             if (first_Press == 0)
000012  490f              LDR      r1,|L4.80|
000014  7809              LDRB     r1,[r1,#0]  ; first_Press
000016  2900              CMP      r1,#0
000018  d115              BNE      |L4.70|
;;;64             {
;;;65                 if (KeyValue == 17)
00001a  2811              CMP      r0,#0x11
00001c  d105              BNE      |L4.42|
;;;66                 {
;;;67                     cnt++;
00001e  490d              LDR      r1,|L4.84|
000020  7809              LDRB     r1,[r1,#0]  ; cnt
000022  1c49              ADDS     r1,r1,#1
000024  4a0b              LDR      r2,|L4.84|
000026  7011              STRB     r1,[r2,#0]
000028  e004              B        |L4.52|
                  |L4.42|
;;;68                 }else if(KeyValue == 18)
00002a  2812              CMP      r0,#0x12
00002c  d102              BNE      |L4.52|
;;;69                 {
;;;70                     cnt = 0;
00002e  2100              MOVS     r1,#0
000030  4a08              LDR      r2,|L4.84|
000032  7011              STRB     r1,[r2,#0]
                  |L4.52|
;;;71                 }
;;;72                 
;;;73                 first_Press = 1;
000034  2101              MOVS     r1,#1
000036  4a06              LDR      r2,|L4.80|
000038  7011              STRB     r1,[r2,#0]
00003a  e004              B        |L4.70|
                  |L4.60|
;;;74             }
;;;75         }
;;;76         else
;;;77         {
;;;78             gTkIsValid = 0;
00003c  2100              MOVS     r1,#0
00003e  4a03              LDR      r2,|L4.76|
000040  7011              STRB     r1,[r2,#0]
;;;79             first_Press = 0;
000042  4a03              LDR      r2,|L4.80|
000044  7011              STRB     r1,[r2,#0]
                  |L4.70|
;;;80         }
;;;81     }
000046  4770              BX       lr
;;;82     /**
                          ENDP

                  |L4.72|
                          DCD      exKeyValue
                  |L4.76|
                          DCD      gTkIsValid
                  |L4.80|
                          DCD      first_Press
                  |L4.84|
                          DCD      ||cnt||

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;86      */
;;;87     int main(void)
000000  b508              PUSH     {r3,lr}
;;;88     {
;;;89         /*<Generated by EasyCodeCube begin>*/
;;;90         /*<UserCodeStart>*//*<SinOne-Tag><36>*/
;;;91         IcResourceInit();
000002  f7fffffe          BL       IcResourceInit
;;;92         TIM_Cmd(TIM2, DISABLE);
000006  2100              MOVS     r1,#0
000008  484e              LDR      r0,|L5.324|
00000a  f7fffffe          BL       TIM_Cmd
;;;93         Buzzer_SetVolume(50);
00000e  2032              MOVS     r0,#0x32
000010  f7fffffe          BL       Buzzer_SetVolume
;;;94         TK_Init();                    //重要步骤1：TK的初始化函数
000014  f7fffffe          BL       TK_Init
;;;95         /*读取掉电保存设置*/
;;;96         LED = loadAlarmSettings();
000018  f7fffffe          BL       loadAlarmSettings
00001c  2203              MOVS     r2,#3
00001e  4669              MOV      r1,sp
000020  9000              STR      r0,[sp,#0]
000022  4849              LDR      r0,|L5.328|
000024  f7fffffe          BL       __aeabi_memcpy4
;;;97         /*<UserCodeEnd>*//*<SinOne-Tag><36>*/
;;;98         
;;;99         /*<UserCodeStart>*//*<SinOne-Tag><4>*/
;;;100        /*****MainLoop*****/
;;;101        while(1)
000028  e08b              B        |L5.322|
                  |L5.42|
;;;102        {
;;;103            /*<UserCodeStart>*//*<SinOne-Tag><14>*/
;;;104            /***User program***/
;;;105            //IAP_Program();
;;;106            switch(Task_state)
00002a  4848              LDR      r0,|L5.332|
00002c  7800              LDRB     r0,[r0,#0]  ; Task_state
00002e  0003              MOVS     r3,r0
000030  f7fffffe          BL       __ARM_common_switch8
000034  05042383          DCB      0x05,0x04,0x23,0x83
000038  84858600          DCB      0x84,0x85,0x86,0x00
;;;107            {
;;;108                case 0:                                 // init
;;;109                GPIO_SetBits(GPIOC, GPIO_Pin_4);  // LED1
00003c  2110              MOVS     r1,#0x10
00003e  4844              LDR      r0,|L5.336|
000040  f7fffffe          BL       GPIO_SetBits
;;;110                GPIO_SetBits(GPIOC, GPIO_Pin_5);  // LED2       
000044  2120              MOVS     r1,#0x20
000046  4842              LDR      r0,|L5.336|
000048  f7fffffe          BL       GPIO_SetBits
;;;111                GPIO_SetBits(GPIOC, GPIO_Pin_10); // LED3
00004c  2101              MOVS     r1,#1
00004e  0289              LSLS     r1,r1,#10
000050  483f              LDR      r0,|L5.336|
000052  f7fffffe          BL       GPIO_SetBits
;;;112                GPIO_SetBits(GPIOC, GPIO_Pin_11); // LED4
000056  2101              MOVS     r1,#1
000058  02c9              LSLS     r1,r1,#11
00005a  483d              LDR      r0,|L5.336|
00005c  f7fffffe          BL       GPIO_SetBits
;;;113                GPIO_SetBits(GPIOA, GPIO_Pin_7);  // LED5
000060  2180              MOVS     r1,#0x80
000062  483c              LDR      r0,|L5.340|
000064  f7fffffe          BL       GPIO_SetBits
;;;114                GPIO_SetBits(GPIOA, GPIO_Pin_8);  // LED6
000068  21ff              MOVS     r1,#0xff
00006a  3101              ADDS     r1,#1
00006c  4839              LDR      r0,|L5.340|
00006e  f7fffffe          BL       GPIO_SetBits
;;;115                Task_state = 1;
000072  2001              MOVS     r0,#1
000074  4935              LDR      r1,|L5.332|
000076  7008              STRB     r0,[r1,#0]
;;;116                break;
000078  e062              B        |L5.320|
;;;117                case 1:                             // TK task
;;;118                    WDT->WDT_CON |= WDT_CON_CLRWDT; // 清watchdog
00007a  4837              LDR      r0,|L5.344|
00007c  6bc0              LDR      r0,[r0,#0x3c]
00007e  2101              MOVS     r1,#1
000080  4308              ORRS     r0,r0,r1
000082  4935              LDR      r1,|L5.344|
000084  63c8              STR      r0,[r1,#0x3c]
;;;119    
;;;120                    // 重要步骤2：触摸键扫描一轮标志，是否调用TouchKeyScan()一定要根据此标志位置起�?
;;;121                    if (TK_TouchKeyStatus & 0x80)
000086  4835              LDR      r0,|L5.348|
000088  7800              LDRB     r0,[r0,#0]  ; TK_TouchKeyStatus
00008a  2180              MOVS     r1,#0x80
00008c  4008              ANDS     r0,r0,r1
00008e  2800              CMP      r0,#0
000090  d013              BEQ      |L5.186|
;;;122                    { // 重要步骤3：清除标志位，需要外部清零
;;;123                        TK_TouchKeyStatus &= 0x7f;
000092  4832              LDR      r0,|L5.348|
000094  7800              LDRB     r0,[r0,#0]  ; TK_TouchKeyStatus
000096  0640              LSLS     r0,r0,#25
000098  0e40              LSRS     r0,r0,#25
00009a  4930              LDR      r1,|L5.348|
00009c  7008              STRB     r0,[r1,#0]
;;;124                        // 重要步骤4：分析按键数据，并返回结果出来
;;;125                        TK_exKeyValueFlag = TK_TouchKeyScan();
00009e  f7fffffe          BL       TK_TouchKeyScan
0000a2  492f              LDR      r1,|L5.352|
0000a4  6008              STR      r0,[r1,#0]  ; TK_exKeyValueFlag
;;;126                        DataProcessing(TK_exKeyValueFlag); // 按键数据处理函数
0000a6  4608              MOV      r0,r1
0000a8  6800              LDR      r0,[r0,#0]  ; TK_exKeyValueFlag
0000aa  f7fffffe          BL       DataProcessing
;;;127    
;;;128                        UpdateDisplay(exKeyValue);
0000ae  482d              LDR      r0,|L5.356|
0000b0  7800              LDRB     r0,[r0,#0]  ; exKeyValue
0000b2  f7fffffe          BL       UpdateDisplay
;;;129                        TK_Restart(); // 启动下一轮转换
0000b6  f7fffffe          BL       TK_Restart
                  |L5.186|
;;;130                    }
;;;131                    // 先关灯
;;;132                    GPIO_SetBits(GPIOC, GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_10 | GPIO_Pin_11); // 先关闭所有 LED
0000ba  21c3              MOVS     r1,#0xc3
0000bc  0109              LSLS     r1,r1,#4
0000be  4824              LDR      r0,|L5.336|
0000c0  f7fffffe          BL       GPIO_SetBits
;;;133                    GPIO_SetBits(GPIOA, GPIO_Pin_7 | GPIO_Pin_8);                             // 先关闭所有 LED
0000c4  21ff              MOVS     r1,#0xff
0000c6  3181              ADDS     r1,r1,#0x81
0000c8  4822              LDR      r0,|L5.340|
0000ca  f7fffffe          BL       GPIO_SetBits
;;;134    
;;;135                    // 根据 cnt 的值点亮相应数量的 LED
;;;136                    if (cnt >= 1)
0000ce  4826              LDR      r0,|L5.360|
0000d0  7800              LDRB     r0,[r0,#0]  ; cnt
0000d2  2801              CMP      r0,#1
0000d4  db03              BLT      |L5.222|
;;;137                        GPIO_ResetBits(GPIOC, GPIO_Pin_4); // LED1
0000d6  2110              MOVS     r1,#0x10
0000d8  481d              LDR      r0,|L5.336|
0000da  f7fffffe          BL       GPIO_ResetBits
                  |L5.222|
;;;138                    if (cnt >= 2)
0000de  4822              LDR      r0,|L5.360|
0000e0  7800              LDRB     r0,[r0,#0]  ; cnt
0000e2  2802              CMP      r0,#2
0000e4  db03              BLT      |L5.238|
;;;139                        GPIO_ResetBits(GPIOC, GPIO_Pin_5); // LED2
0000e6  2120              MOVS     r1,#0x20
0000e8  4819              LDR      r0,|L5.336|
0000ea  f7fffffe          BL       GPIO_ResetBits
                  |L5.238|
;;;140                    if (cnt >= 3)
0000ee  481e              LDR      r0,|L5.360|
0000f0  7800              LDRB     r0,[r0,#0]  ; cnt
0000f2  2803              CMP      r0,#3
0000f4  db04              BLT      |L5.256|
;;;141                        GPIO_ResetBits(GPIOC, GPIO_Pin_10); // LED3
0000f6  2101              MOVS     r1,#1
0000f8  0289              LSLS     r1,r1,#10
0000fa  4815              LDR      r0,|L5.336|
0000fc  f7fffffe          BL       GPIO_ResetBits
                  |L5.256|
;;;142                    if (cnt >= 4)
000100  4819              LDR      r0,|L5.360|
000102  7800              LDRB     r0,[r0,#0]  ; cnt
000104  2804              CMP      r0,#4
000106  db04              BLT      |L5.274|
;;;143                        GPIO_ResetBits(GPIOC, GPIO_Pin_11); // LED4
000108  2101              MOVS     r1,#1
00010a  02c9              LSLS     r1,r1,#11
00010c  4810              LDR      r0,|L5.336|
00010e  f7fffffe          BL       GPIO_ResetBits
                  |L5.274|
;;;144                    if (cnt >= 5)
000112  4815              LDR      r0,|L5.360|
000114  7800              LDRB     r0,[r0,#0]  ; cnt
000116  2805              CMP      r0,#5
000118  db03              BLT      |L5.290|
;;;145                        GPIO_ResetBits(GPIOA, GPIO_Pin_7); // LED5
00011a  2180              MOVS     r1,#0x80
00011c  480d              LDR      r0,|L5.340|
00011e  f7fffffe          BL       GPIO_ResetBits
                  |L5.290|
;;;146                    if (cnt >= 6)
000122  4811              LDR      r0,|L5.360|
000124  7800              LDRB     r0,[r0,#0]  ; cnt
000126  2806              CMP      r0,#6
000128  db04              BLT      |L5.308|
;;;147                        GPIO_ResetBits(GPIOA, GPIO_Pin_8); // LED6
00012a  21ff              MOVS     r1,#0xff
00012c  3101              ADDS     r1,#1
00012e  4809              LDR      r0,|L5.340|
000130  f7fffffe          BL       GPIO_ResetBits
                  |L5.308|
;;;148    
;;;149    
;;;150                    checkPowerLoss();
000134  f7fffffe          BL       checkPowerLoss
;;;151                    break;
000138  e002              B        |L5.320|
;;;152                case 2: // Buzz SET
;;;153                break;
00013a  e001              B        |L5.320|
;;;154                case 3: // ADC SET
;;;155                //ADC_value1 = ADC_GetConversionValue(ADC);
;;;156                // ADC_value2 = readADC(ADC_Channel_13);
;;;157                // Voltage = adcToVoltage(ADC_value2);
;;;158                // Channel = ADC_GetChannel(ADC);
;;;159    
;;;160                
;;;161    
;;;162                
;;;163                break;
00013c  e000              B        |L5.320|
;;;164                case 4: // ADC get
;;;165                
;;;166                break;
00013e  bf00              NOP      
                  |L5.320|
000140  bf00              NOP                            ;116
                  |L5.322|
000142  e772              B        |L5.42|
;;;167            }
;;;168            
;;;169            /*<UserCodeEnd>*//*<SinOne-Tag><14>*/
;;;170            /*<UserCodeStart>*//*<SinOne-Tag><77>*/
;;;171            /*<UserCodeEnd>*//*<SinOne-Tag><77>*/
;;;172            /*<UserCodeStart>*//*<SinOne-Tag><412>*/
;;;173            //IAP_Program();
;;;174            /*<UserCodeEnd>*//*<SinOne-Tag><412>*/
;;;175            /*<Begin-Inserted by EasyCodeCube for Condition>*/
;;;176        }
;;;177        /*<UserCodeEnd>*//*<SinOne-Tag><4>*/
;;;178        /*<Generated by EasyCodeCube end>*/
;;;179    }
;;;180    
                          ENDP

                  |L5.324|
                          DCD      0x40020180
                  |L5.328|
                          DCD      LED
                  |L5.332|
                          DCD      Task_state
                  |L5.336|
                          DCD      0x40011200
                  |L5.340|
                          DCD      0x40011000
                  |L5.344|
                          DCD      0x40000300
                  |L5.348|
                          DCD      TK_TouchKeyStatus
                  |L5.352|
                          DCD      TK_exKeyValueFlag
                  |L5.356|
                          DCD      exKeyValue
                  |L5.360|
                          DCD      ||cnt||

                          AREA ||.data||, DATA, ALIGN=2

                  ADC_value1
000000  0000              DCB      0x00,0x00
                  ADC_value2
000002  0000              DCB      0x00,0x00
                  Channel
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  Voltage
                          DCD      0x00000000
                  LED
00000c  000000            DCB      0x00,0x00,0x00
                  exKeyValue
00000f  00                DCB      0x00
                  gTkIsValid
000010  00                DCB      0x00
                  Task_state
000011  000000            DCB      0x00,0x00,0x00
                  TK_exKeyValueFlag
                          DCD      0x00000000
                  first_Press
000018  00                DCB      0x00
                  ||cnt||
000019  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L40.24|
                  |L40.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L40.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L40.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_04ffa752____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___6_main_c_04ffa752____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_04ffa752____REVSH|
#line 478
|__asm___6_main_c_04ffa752____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
