; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\main.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\main.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.DataProcessing||, CODE, READONLY, ALIGN=2

                  DataProcessing PROC
;;;32     uint32_t TK_exKeyValueFlag;
;;;33     void DataProcessing(uint32_t value)
000000  490a              LDR      r1,|L1.44|
;;;34     {
;;;35         switch (TK_exKeyValueFlag)
000002  6809              LDR      r1,[r1,#0]  ; TK_exKeyValueFlag
000004  2201              MOVS     r2,#1
000006  0452              LSLS     r2,r2,#17
000008  1a89              SUBS     r1,r1,r2
00000a  d005              BEQ      |L1.24|
00000c  1a89              SUBS     r1,r1,r2
00000e  d107              BNE      |L1.32|
;;;36         {
;;;37             case 0x00040000:
;;;38             exKeyValue = 18;// 模式/确认
000010  2112              MOVS     r1,#0x12
000012  4a07              LDR      r2,|L1.48|
000014  7011              STRB     r1,[r2,#0]
;;;39             break;
000016  e007              B        |L1.40|
                  |L1.24|
;;;40             case 0x00020000:
;;;41             exKeyValue = 17;// 返回
000018  2111              MOVS     r1,#0x11
00001a  4a05              LDR      r2,|L1.48|
00001c  7011              STRB     r1,[r2,#0]
;;;42             break;
00001e  e003              B        |L1.40|
                  |L1.32|
;;;43             default:
;;;44             exKeyValue = 0xff;
000020  21ff              MOVS     r1,#0xff
000022  4a03              LDR      r2,|L1.48|
000024  7011              STRB     r1,[r2,#0]
;;;45             break;
000026  bf00              NOP      
                  |L1.40|
000028  bf00              NOP                            ;39
;;;46         }
;;;47     }
00002a  4770              BX       lr
;;;48     uint8_t first_Press;
                          ENDP

                  |L1.44|
                          DCD      TK_exKeyValueFlag
                  |L1.48|
                          DCD      exKeyValue

                          AREA ||i.Delay_ms||, CODE, READONLY, ALIGN=1

                  Delay_ms PROC
;;;175    
;;;176    void Delay_ms(uint16_t xms)
000000  b570              PUSH     {r4-r6,lr}
;;;177    {
000002  4604              MOV      r4,r0
;;;178        int i;
;;;179        for (i = 0; i < xms; i++)
000004  2500              MOVS     r5,#0
000006  e004              B        |L2.18|
                  |L2.8|
;;;180        {
;;;181            Delay_us(1000);
000008  207d              MOVS     r0,#0x7d
00000a  00c0              LSLS     r0,r0,#3
00000c  f7fffffe          BL       Delay_us
000010  1c6d              ADDS     r5,r5,#1              ;179
                  |L2.18|
000012  42a5              CMP      r5,r4                 ;179
000014  dbf8              BLT      |L2.8|
;;;182        }
;;;183    }
000016  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP


                          AREA ||i.Delay_us||, CODE, READONLY, ALIGN=2

                  Delay_us PROC
;;;166    }
;;;167    void Delay_us(uint16_t xus)
000000  b510              PUSH     {r4,lr}
;;;168    {
000002  4604              MOV      r4,r0
;;;169        TIM_Cmd(TIM1, ENABLE);
000004  2101              MOVS     r1,#1
000006  4808              LDR      r0,|L3.40|
000008  f7fffffe          BL       TIM_Cmd
;;;170        while (TIM1->TIM_CNT < xus)
00000c  bf00              NOP      
                  |L3.14|
00000e  4806              LDR      r0,|L3.40|
000010  6840              LDR      r0,[r0,#4]
000012  42a0              CMP      r0,r4
000014  d3fb              BCC      |L3.14|
;;;171        ;
;;;172        TIM1->TIM_CNT = 0;
000016  2000              MOVS     r0,#0
000018  4903              LDR      r1,|L3.40|
00001a  6048              STR      r0,[r1,#4]
;;;173        TIM_Cmd(TIM1, DISABLE);
00001c  2100              MOVS     r1,#0
00001e  4802              LDR      r0,|L3.40|
000020  f7fffffe          BL       TIM_Cmd
;;;174    }
000024  bd10              POP      {r4,pc}
;;;175    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x40020140

                          AREA ||i.UpdateDisplay||, CODE, READONLY, ALIGN=2

                  UpdateDisplay PROC
;;;48     uint8_t first_Press;
;;;49     void UpdateDisplay(uint8_t KeyValue)
000000  b510              PUSH     {r4,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51         if (exKeyValue != 0XFF) // 松手前只出一次键
000004  4817              LDR      r0,|L4.100|
000006  7800              LDRB     r0,[r0,#0]  ; exKeyValue
000008  28ff              CMP      r0,#0xff
00000a  d025              BEQ      |L4.88|
;;;52         {
;;;53             gTkIsValid = 1;
00000c  2001              MOVS     r0,#1
00000e  4916              LDR      r1,|L4.104|
000010  7008              STRB     r0,[r1,#0]
;;;54             ///KeyValue = exKeyValue;
;;;55             if (first_Press == 0)
000012  4816              LDR      r0,|L4.108|
000014  7800              LDRB     r0,[r0,#0]  ; first_Press
000016  2800              CMP      r0,#0
000018  d123              BNE      |L4.98|
;;;56             {
;;;57                 if (KeyValue == 17)
00001a  2c11              CMP      r4,#0x11
00001c  d10a              BNE      |L4.52|
;;;58                 {
;;;59                     GPIO_TogglePins(GPIOA, GPIO_Pin_12);  // 红外传感器开关
00001e  2101              MOVS     r1,#1
000020  0309              LSLS     r1,r1,#12
000022  4813              LDR      r0,|L4.112|
000024  f7fffffe          BL       GPIO_TogglePins
;;;60                     GPIO_TogglePins(GPIOC, GPIO_Pin_10); // LED 灯翻�?
000028  2101              MOVS     r1,#1
00002a  0289              LSLS     r1,r1,#10
00002c  4811              LDR      r0,|L4.116|
00002e  f7fffffe          BL       GPIO_TogglePins
000032  e00a              B        |L4.74|
                  |L4.52|
;;;61                 }
;;;62                 else if (KeyValue == 18)
000034  2c12              CMP      r4,#0x12
000036  d108              BNE      |L4.74|
;;;63                 {
;;;64                     GPIO_TogglePins(GPIOC, GPIO_Pin_5);  // LED 灯翻�?
000038  2120              MOVS     r1,#0x20
00003a  480e              LDR      r0,|L4.116|
00003c  f7fffffe          BL       GPIO_TogglePins
;;;65                     GPIO_TogglePins(GPIOC, GPIO_Pin_11); // LED 灯翻�?
000040  2101              MOVS     r1,#1
000042  02c9              LSLS     r1,r1,#11
000044  480b              LDR      r0,|L4.116|
000046  f7fffffe          BL       GPIO_TogglePins
                  |L4.74|
;;;66                 }
;;;67                 //输出触摸按键按下的�?
;;;68                 Delay_ms(100);
00004a  2064              MOVS     r0,#0x64
00004c  f7fffffe          BL       Delay_ms
;;;69                 //printf("按下value%u\r\n", exKeyValue);
;;;70                 first_Press = 1;
000050  2001              MOVS     r0,#1
000052  4906              LDR      r1,|L4.108|
000054  7008              STRB     r0,[r1,#0]
000056  e004              B        |L4.98|
                  |L4.88|
;;;71             }
;;;72         }
;;;73         else
;;;74         {
;;;75             gTkIsValid = 0;
000058  2000              MOVS     r0,#0
00005a  4903              LDR      r1,|L4.104|
00005c  7008              STRB     r0,[r1,#0]
;;;76             first_Press = 0;
00005e  4903              LDR      r1,|L4.108|
000060  7008              STRB     r0,[r1,#0]
                  |L4.98|
;;;77         }
;;;78     }
000062  bd10              POP      {r4,pc}
;;;79     /**
                          ENDP

                  |L4.100|
                          DCD      exKeyValue
                  |L4.104|
                          DCD      gTkIsValid
                  |L4.108|
                          DCD      first_Press
                  |L4.112|
                          DCD      0x40011000
                  |L4.116|
                          DCD      0x40011200

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;184    
;;;185    int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;186    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;187        //发送字符到UART0
;;;188        UART_SendData(UART1, (uint8_t)ch);
000006  b2e1              UXTB     r1,r4
000008  4807              LDR      r0,|L5.40|
00000a  f7fffffe          BL       UART_SendData
;;;189        while (UART_GetFlagStatus(UART1, UART_Flag_TX) == RESET); // 等待发送完成
00000e  bf00              NOP      
                  |L5.16|
000010  2102              MOVS     r1,#2
000012  4805              LDR      r0,|L5.40|
000014  f7fffffe          BL       UART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L5.16|
;;;190        UART_ClearFlag(UART1, UART_Flag_TX); // 清除发送完成标�?
00001c  2102              MOVS     r1,#2
00001e  4802              LDR      r0,|L5.40|
000020  f7fffffe          BL       UART_ClearFlag
;;;191        return ch;
000024  4620              MOV      r0,r4
;;;192    }
000026  bd70              POP      {r4-r6,pc}
;;;193    
                          ENDP

                  |L5.40|
                          DCD      0x40020080

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;85     uint32_t cnt2;
;;;86     int main(void)
000000  f7fffffe          BL       IcResourceInit
;;;87     {
;;;88         /*<Generated by EasyCodeCube begin>*/
;;;89         /*<UserCodeStart>*/ /*<SinOne-Tag><36>*/
;;;90         IcResourceInit();
;;;91         TIM_Cmd(TIM2, DISABLE);
000004  2100              MOVS     r1,#0
000006  4843              LDR      r0,|L6.276|
000008  f7fffffe          BL       TIM_Cmd
;;;92         Buzzer_SetVolume(50);
00000c  2032              MOVS     r0,#0x32
00000e  f7fffffe          BL       Buzzer_SetVolume
;;;93         TK_Init();          // 重要步骤1：TK的初始化函数
000012  f7fffffe          BL       TK_Init
;;;94         /*<UserCodeEnd>*/   /*<SinOne-Tag><36>*/
;;;95         /*<UserCodeStart>*/ /*<SinOne-Tag><4>*/
;;;96         /*****MainLoop*****/
;;;97         while (1)
000016  e07b              B        |L6.272|
                  |L6.24|
;;;98         {
;;;99             /*<UserCodeStart>*/ /*<SinOne-Tag><14>*/
;;;100            /***User program***/
;;;101    
;;;102            switch (Task_state)
000018  483f              LDR      r0,|L6.280|
00001a  7800              LDRB     r0,[r0,#0]  ; Task_state
00001c  0003              MOVS     r3,r0
00001e  f7fffffe          BL       __ARM_common_switch8
000022  0504              DCB      0x05,0x04
000024  24737475          DCB      0x24,0x73,0x74,0x75
000028  7600              DCB      0x76,0x00
;;;103            {
;;;104            case 0:                                 // init
;;;105                GPIO_ResetBits(GPIOC, GPIO_Pin_4);  // LED1
00002a  2110              MOVS     r1,#0x10
00002c  483b              LDR      r0,|L6.284|
00002e  f7fffffe          BL       GPIO_ResetBits
;;;106                GPIO_ResetBits(GPIOC, GPIO_Pin_10); // LED3
000032  2101              MOVS     r1,#1
000034  0289              LSLS     r1,r1,#10
000036  4839              LDR      r0,|L6.284|
000038  f7fffffe          BL       GPIO_ResetBits
;;;107                GPIO_ResetBits(GPIOC, GPIO_Pin_11); // LED4
00003c  2101              MOVS     r1,#1
00003e  02c9              LSLS     r1,r1,#11
000040  4836              LDR      r0,|L6.284|
000042  f7fffffe          BL       GPIO_ResetBits
;;;108                GPIO_ResetBits(GPIOA, GPIO_Pin_7);  // LED5
000046  2180              MOVS     r1,#0x80
000048  4835              LDR      r0,|L6.288|
00004a  f7fffffe          BL       GPIO_ResetBits
;;;109                GPIO_ResetBits(GPIOA, GPIO_Pin_8);  // LED6
00004e  21ff              MOVS     r1,#0xff
000050  3101              ADDS     r1,#1
000052  4833              LDR      r0,|L6.288|
000054  f7fffffe          BL       GPIO_ResetBits
;;;110    
;;;111                GPIO_SetBits(GPIOA, GPIO_Pin_12);//红外线控制
000058  2101              MOVS     r1,#1
00005a  0309              LSLS     r1,r1,#12
00005c  4830              LDR      r0,|L6.288|
00005e  f7fffffe          BL       GPIO_SetBits
;;;112                Task_state = 1;
000062  2001              MOVS     r0,#1
000064  492c              LDR      r1,|L6.280|
000066  7008              STRB     r0,[r1,#0]
;;;113                break;
000068  e051              B        |L6.270|
;;;114            case 1:                             // TK task
;;;115                WDT->WDT_CON |= WDT_CON_CLRWDT; // 清watchdog
00006a  482e              LDR      r0,|L6.292|
00006c  6bc0              LDR      r0,[r0,#0x3c]
00006e  2101              MOVS     r1,#1
000070  4308              ORRS     r0,r0,r1
000072  492c              LDR      r1,|L6.292|
000074  63c8              STR      r0,[r1,#0x3c]
;;;116    
;;;117                // 重要步骤2：触摸键扫描一轮标志，是否调用TouchKeyScan()一定要根据此标志位置起�?
;;;118                if (TK_TouchKeyStatus & 0x80)
000076  482c              LDR      r0,|L6.296|
000078  7800              LDRB     r0,[r0,#0]  ; TK_TouchKeyStatus
00007a  2180              MOVS     r1,#0x80
00007c  4008              ANDS     r0,r0,r1
00007e  2800              CMP      r0,#0
000080  d013              BEQ      |L6.170|
;;;119                { // 重要步骤3：清除标志位，需要外部清�?
;;;120                    TK_TouchKeyStatus &= 0x7f;
000082  4829              LDR      r0,|L6.296|
000084  7800              LDRB     r0,[r0,#0]  ; TK_TouchKeyStatus
000086  0640              LSLS     r0,r0,#25
000088  0e40              LSRS     r0,r0,#25
00008a  4927              LDR      r1,|L6.296|
00008c  7008              STRB     r0,[r1,#0]
;;;121                    // 重要步骤4：分析按键数据，并返回结果出�?
;;;122                    TK_exKeyValueFlag = TK_TouchKeyScan();
00008e  f7fffffe          BL       TK_TouchKeyScan
000092  4926              LDR      r1,|L6.300|
000094  6008              STR      r0,[r1,#0]  ; TK_exKeyValueFlag
;;;123                    DataProcessing(TK_exKeyValueFlag); // 按键数据处理函数
000096  4608              MOV      r0,r1
000098  6800              LDR      r0,[r0,#0]  ; TK_exKeyValueFlag
00009a  f7fffffe          BL       DataProcessing
;;;124    
;;;125                    UpdateDisplay(exKeyValue);
00009e  4824              LDR      r0,|L6.304|
0000a0  7800              LDRB     r0,[r0,#0]  ; exKeyValue
0000a2  f7fffffe          BL       UpdateDisplay
;;;126                    TK_Restart(); // 启动下一轮转�?
0000a6  f7fffffe          BL       TK_Restart
                  |L6.170|
;;;127                }
;;;128                if (cnt1 % 300 == 0)
0000aa  21ff              MOVS     r1,#0xff
0000ac  312d              ADDS     r1,r1,#0x2d
0000ae  4821              LDR      r0,|L6.308|
0000b0  6800              LDR      r0,[r0,#0]  ; cnt1
0000b2  f7fffffe          BL       __aeabi_uidivmod
0000b6  2900              CMP      r1,#0
0000b8  d110              BNE      |L6.220|
;;;129                {
;;;130                    cnt2++;
0000ba  481f              LDR      r0,|L6.312|
0000bc  6800              LDR      r0,[r0,#0]  ; cnt2
0000be  1c40              ADDS     r0,r0,#1
0000c0  491d              LDR      r1,|L6.312|
0000c2  6008              STR      r0,[r1,#0]  ; cnt2
;;;131                    if (cnt2 % 80 == 0)
0000c4  2150              MOVS     r1,#0x50
0000c6  481c              LDR      r0,|L6.312|
0000c8  6800              LDR      r0,[r0,#0]  ; cnt2
0000ca  f7fffffe          BL       __aeabi_uidivmod
0000ce  2900              CMP      r1,#0
0000d0  d104              BNE      |L6.220|
;;;132                        GPIO_TogglePins(GPIOA, GPIO_Pin_8); // LED 灯翻�?
0000d2  21ff              MOVS     r1,#0xff
0000d4  3101              ADDS     r1,#1
0000d6  4812              LDR      r0,|L6.288|
0000d8  f7fffffe          BL       GPIO_TogglePins
                  |L6.220|
;;;133                }
;;;134                cnt1++;
0000dc  4815              LDR      r0,|L6.308|
0000de  6800              LDR      r0,[r0,#0]  ; cnt1
0000e0  1c40              ADDS     r0,r0,#1
0000e2  4914              LDR      r1,|L6.308|
0000e4  6008              STR      r0,[r1,#0]  ; cnt1
;;;135    
;;;136                if(GPIO_ReadDataBit(GPIOA, GPIO_Pin_11))
0000e6  2101              MOVS     r1,#1
0000e8  02c9              LSLS     r1,r1,#11
0000ea  480d              LDR      r0,|L6.288|
0000ec  f7fffffe          BL       GPIO_ReadDataBit
0000f0  2800              CMP      r0,#0
0000f2  d004              BEQ      |L6.254|
;;;137                {
;;;138                    GPIO_ResetBits(GPIOC, GPIO_Pin_4);  // LED 灯翻�?
0000f4  2110              MOVS     r1,#0x10
0000f6  4809              LDR      r0,|L6.284|
0000f8  f7fffffe          BL       GPIO_ResetBits
0000fc  e003              B        |L6.262|
                  |L6.254|
;;;139                }else
;;;140                {
;;;141                    GPIO_SetBits(GPIOC, GPIO_Pin_4);  // LED 灯翻�?
0000fe  2110              MOVS     r1,#0x10
000100  4806              LDR      r0,|L6.284|
000102  f7fffffe          BL       GPIO_SetBits
                  |L6.262|
;;;142                }
;;;143    
;;;144                break;
000106  e002              B        |L6.270|
;;;145            case 2: // Buzz SET
;;;146                break;
000108  e001              B        |L6.270|
;;;147            case 3: // RGB SET
;;;148                break;
00010a  e000              B        |L6.270|
;;;149            case 4: // ADC get
;;;150                break;
00010c  bf00              NOP      
                  |L6.270|
00010e  bf00              NOP                            ;113
                  |L6.272|
000110  e782              B        |L6.24|
;;;151            }
;;;152    
;;;153            /*<UserCodeEnd>*/   /*<SinOne-Tag><14>*/
;;;154            /*<UserCodeStart>*/ /*<SinOne-Tag><77>*/
;;;155            /*<UserCodeEnd>*/   /*<SinOne-Tag><77>*/
;;;156            /*<UserCodeStart>*/ /*<SinOne-Tag><453>*/
;;;157            //TIM_TI_DMA();
;;;158            /*<UserCodeEnd>*/   /*<SinOne-Tag><453>*/
;;;159            /*<UserCodeStart>*/ /*<SinOne-Tag><469>*/
;;;160            //UART_Communication();
;;;161            /*<UserCodeEnd>*/ /*<SinOne-Tag><469>*/
;;;162            /*<Begin-Inserted by EasyCodeCube for Condition>*/
;;;163        }
;;;164        /*<UserCodeEnd>*/ /*<SinOne-Tag><4>*/
;;;165                          /*<Generated by EasyCodeCube end>*/
;;;166    }
;;;167    void Delay_us(uint16_t xus)
                          ENDP

000112  0000              DCW      0x0000
                  |L6.276|
                          DCD      0x40020180
                  |L6.280|
                          DCD      Task_state
                  |L6.284|
                          DCD      0x40011200
                  |L6.288|
                          DCD      0x40011000
                  |L6.292|
                          DCD      0x40000300
                  |L6.296|
                          DCD      TK_TouchKeyStatus
                  |L6.300|
                          DCD      TK_exKeyValueFlag
                  |L6.304|
                          DCD      exKeyValue
                  |L6.308|
                          DCD      cnt1
                  |L6.312|
                          DCD      cnt2

                          AREA ||.data||, DATA, ALIGN=2

                  exKeyValue
000000  00                DCB      0x00
                  gTkIsValid
000001  00                DCB      0x00
                  Task_state
000002  0000              DCB      0x00,0x00
                  TK_exKeyValueFlag
                          DCD      0x00000000
                  first_Press
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt1
                          DCD      0x00000000
                  cnt2
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L46.24|
                  |L46.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L46.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L46.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_04ffa752____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___6_main_c_04ffa752____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_04ffa752____REVSH|
#line 478
|__asm___6_main_c_04ffa752____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
