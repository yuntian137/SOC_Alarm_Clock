; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\sc32f1xxx_rcc.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\sc32f1xxx_rcc.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -I..\Mqtt\Inc -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\sc32f1xxx_rcc.crf ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_rcc.c]
                          THUMB

                          AREA ||i.RCC_AHBPeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHBPeriphClockCmd PROC
;;;732      */
;;;733    void RCC_AHBPeriphClockCmd ( uint32_t RCC_AHBPeriph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;734    {
;;;735        /* Check the parameters */
;;;736        assert_param ( IS_RCC_AHBPERIPH ( RCC_AHBPeriph ) );
;;;737    
;;;738        if ( NewState != DISABLE )
000002  d005              BEQ      |L1.16|
;;;739        {
;;;740            RCCAHB->AHB_CFG |= RCC_AHBPeriph;
000004  4a05              LDR      r2,|L1.28|
000006  6812              LDR      r2,[r2,#0]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L1.28|
00000c  601a              STR      r2,[r3,#0]
00000e  e004              B        |L1.26|
                  |L1.16|
;;;741        }
;;;742        else
;;;743        {
;;;744            RCCAHB->AHB_CFG &= ~RCC_AHBPeriph;
000010  4a02              LDR      r2,|L1.28|
000012  6812              LDR      r2,[r2,#0]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L1.28|
000018  601a              STR      r2,[r3,#0]
                  |L1.26|
;;;745        }
;;;746    }
00001a  4770              BX       lr
;;;747    
                          ENDP

                  |L1.28|
                          DCD      0x40003000

                          AREA ||i.RCC_AHBPeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHBPeriphResetCmd PROC
;;;873     */
;;;874    void RCC_AHBPeriphResetCmd ( uint32_t RCC_AHBPeriph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;875    {
;;;876        /* Check the parameters */
;;;877        assert_param ( IS_RCC_AHBPERIPH ( RCC_AHBPeriph ) );
;;;878    
;;;879        if ( NewState != DISABLE )
000002  d005              BEQ      |L2.16|
;;;880        {
;;;881            RCCAHB->AHB_RST |= RCC_AHBPeriph;
000004  4a05              LDR      r2,|L2.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L2.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L2.26|
                  |L2.16|
;;;882        }
;;;883        else
;;;884        {
;;;885            RCCAHB->AHB_RST &= ~RCC_AHBPeriph;
000010  4a02              LDR      r2,|L2.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L2.28|
000018  605a              STR      r2,[r3,#4]
                  |L2.26|
;;;886        }
;;;887    }
00001a  4770              BX       lr
;;;888    
                          ENDP

                  |L2.28|
                          DCD      0x40003000

                          AREA ||i.RCC_APB0Cmd||, CODE, READONLY, ALIGN=2

                  RCC_APB0Cmd PROC
;;;257      */
;;;258    void RCC_APB0Cmd ( FunctionalState NewState )
000000  2800              CMP      r0,#0
;;;259    {
;;;260        /* Check the parameters */
;;;261        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;262    
;;;263        if ( NewState != DISABLE )
000002  d007              BEQ      |L3.20|
;;;264        {
;;;265            RCCAPB0->APB0_CFG |= APB0_CFG_ENAPB;
000004  4907              LDR      r1,|L3.36|
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  05d2              LSLS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a05              LDR      r2,|L3.36|
000010  6011              STR      r1,[r2,#0]
000012  e006              B        |L3.34|
                  |L3.20|
;;;266        }
;;;267        else
;;;268        {
;;;269            RCCAPB0->APB0_CFG &= ~APB0_CFG_ENAPB;
000014  4903              LDR      r1,|L3.36|
000016  6809              LDR      r1,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  05d2              LSLS     r2,r2,#23
00001c  4391              BICS     r1,r1,r2
00001e  4a01              LDR      r2,|L3.36|
000020  6011              STR      r1,[r2,#0]
                  |L3.34|
;;;270        }
;;;271    }
000022  4770              BX       lr
;;;272    
                          ENDP

                  |L3.36|
                          DCD      0x40020000

                          AREA ||i.RCC_APB0Config||, CODE, READONLY, ALIGN=2

                  RCC_APB0Config PROC
;;;498     */
;;;499    void RCC_APB0Config ( RCC_PCLK_TypeDef RCC_APB0CLK )
000000  4905              LDR      r1,|L4.24|
;;;500    {
;;;501        /* Check the parameters */
;;;502        assert_param ( IS_RCC_PCLK ( RCC_APB0CLK ) );
;;;503    
;;;504        RCCAPB0->APB0_CFG &= ~ ( ( uint32_t ) APB0_CFG_CLKDIV );
000002  6809              LDR      r1,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0512              LSLS     r2,r2,#20
000008  4391              BICS     r1,r1,r2
00000a  4a03              LDR      r2,|L4.24|
00000c  6011              STR      r1,[r2,#0]
;;;505        RCCAPB0->APB0_CFG |= RCC_APB0CLK;
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  4301              ORRS     r1,r1,r0
000014  6011              STR      r1,[r2,#0]
;;;506    }
000016  4770              BX       lr
;;;507    
                          ENDP

                  |L4.24|
                          DCD      0x40020000

                          AREA ||i.RCC_APB0PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB0PeriphClockCmd PROC
;;;770      */
;;;771    void RCC_APB0PeriphClockCmd ( uint32_t RCC_APB0Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;772    {
;;;773        /* Check the parameters */
;;;774        assert_param ( IS_RCC_APB0PERIPH ( RCC_APB0Periph ) );
;;;775    
;;;776        if ( NewState != DISABLE )
000002  d005              BEQ      |L5.16|
;;;777        {
;;;778            RCCAPB0->APB0_CFG |= RCC_APB0Periph;
000004  4a05              LDR      r2,|L5.28|
000006  6812              LDR      r2,[r2,#0]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L5.28|
00000c  601a              STR      r2,[r3,#0]
00000e  e004              B        |L5.26|
                  |L5.16|
;;;779        }
;;;780        else
;;;781        {
;;;782            RCCAPB0->APB0_CFG &= ~RCC_APB0Periph;
000010  4a02              LDR      r2,|L5.28|
000012  6812              LDR      r2,[r2,#0]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L5.28|
000018  601a              STR      r2,[r3,#0]
                  |L5.26|
;;;783        }
;;;784    }
00001a  4770              BX       lr
;;;785    
                          ENDP

                  |L5.28|
                          DCD      0x40020000

                          AREA ||i.RCC_APB0PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB0PeriphResetCmd PROC
;;;911     */
;;;912    void RCC_APB0PeriphResetCmd ( uint32_t RCC_APB0Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;913    {
;;;914        /* Check the parameters */
;;;915        assert_param ( IS_RCC_APB0PERIPH ( RCC_APB0Periph ) );
;;;916    
;;;917        if ( NewState != DISABLE )
000002  d005              BEQ      |L6.16|
;;;918        {
;;;919            RCCAPB0->APB0_RST |= RCC_APB0Periph;
000004  4a05              LDR      r2,|L6.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L6.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L6.26|
                  |L6.16|
;;;920        }
;;;921        else
;;;922        {
;;;923            RCCAPB0->APB0_RST &= ~RCC_APB0Periph;
000010  4a02              LDR      r2,|L6.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L6.28|
000018  605a              STR      r2,[r3,#4]
                  |L6.26|
;;;924        }
;;;925    }
00001a  4770              BX       lr
;;;926    
                          ENDP

                  |L6.28|
                          DCD      0x40020000

                          AREA ||i.RCC_APB1Cmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1Cmd PROC
;;;279      */
;;;280    void RCC_APB1Cmd ( FunctionalState NewState )
000000  2800              CMP      r0,#0
;;;281    {
;;;282        /* Check the parameters */
;;;283        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;284    
;;;285        if ( NewState != DISABLE )
000002  d007              BEQ      |L7.20|
;;;286        {
;;;287            RCCAPB1->APB1_CFG |= APB1_CFG_ENAPB;
000004  4907              LDR      r1,|L7.36|
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  05d2              LSLS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a05              LDR      r2,|L7.36|
000010  6011              STR      r1,[r2,#0]
000012  e006              B        |L7.34|
                  |L7.20|
;;;288        }
;;;289        else
;;;290        {
;;;291            RCCAPB1->APB1_CFG &= ~APB1_CFG_ENAPB;
000014  4903              LDR      r1,|L7.36|
000016  6809              LDR      r1,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  05d2              LSLS     r2,r2,#23
00001c  4391              BICS     r1,r1,r2
00001e  4a01              LDR      r2,|L7.36|
000020  6011              STR      r1,[r2,#0]
                  |L7.34|
;;;292        }
;;;293    }
000022  4770              BX       lr
;;;294    
                          ENDP

                  |L7.36|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1Config||, CODE, READONLY, ALIGN=2

                  RCC_APB1Config PROC
;;;520     */
;;;521    void RCC_APB1Config ( RCC_PCLK_TypeDef RCC_APB1CLK )
000000  4905              LDR      r1,|L8.24|
;;;522    {
;;;523        /* Check the parameters */
;;;524        assert_param ( IS_RCC_PCLK ( RCC_APB1CLK ) );
;;;525    
;;;526        RCCAPB1->APB1_CFG &= ~ ( ( uint32_t ) APB1_CFG_CLKDIV );
000002  6809              LDR      r1,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0512              LSLS     r2,r2,#20
000008  4391              BICS     r1,r1,r2
00000a  4a03              LDR      r2,|L8.24|
00000c  6011              STR      r1,[r2,#0]
;;;527        RCCAPB1->APB1_CFG |= RCC_APB1CLK;
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  4301              ORRS     r1,r1,r0
000014  6011              STR      r1,[r2,#0]
;;;528    }
000016  4770              BX       lr
;;;529    
                          ENDP

                  |L8.24|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;807      */
;;;808    void RCC_APB1PeriphClockCmd ( uint32_t RCC_APB1Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;809    {
;;;810        /* Check the parameters */
;;;811        assert_param ( IS_RCC_APB1PERIPH ( RCC_APB1Periph ) );
;;;812    
;;;813        if ( NewState != DISABLE )
000002  d005              BEQ      |L9.16|
;;;814        {
;;;815            RCCAPB1->APB1_CFG |= RCC_APB1Periph;
000004  4a05              LDR      r2,|L9.28|
000006  6812              LDR      r2,[r2,#0]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L9.28|
00000c  601a              STR      r2,[r3,#0]
00000e  e004              B        |L9.26|
                  |L9.16|
;;;816        }
;;;817        else
;;;818        {
;;;819            RCCAPB1->APB1_CFG &= ~RCC_APB1Periph;
000010  4a02              LDR      r2,|L9.28|
000012  6812              LDR      r2,[r2,#0]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L9.28|
000018  601a              STR      r2,[r3,#0]
                  |L9.26|
;;;820        }
;;;821    }
00001a  4770              BX       lr
;;;822    
                          ENDP

                  |L9.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;948     */
;;;949    void RCC_APB1PeriphResetCmd ( uint32_t RCC_APB1Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;950    {
;;;951        /* Check the parameters */
;;;952        assert_param ( IS_RCC_APB1PERIPH ( RCC_APB1Periph ) );
;;;953    
;;;954        if ( NewState != DISABLE )
000002  d005              BEQ      |L10.16|
;;;955        {
;;;956            RCCAPB1->APB1_RST |= RCC_APB1Periph;
000004  4a05              LDR      r2,|L10.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L10.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L10.26|
                  |L10.16|
;;;957        }
;;;958        else
;;;959        {
;;;960            RCCAPB1->APB1_RST &= ~RCC_APB1Periph;
000010  4a02              LDR      r2,|L10.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L10.28|
000018  605a              STR      r2,[r3,#4]
                  |L10.26|
;;;961        }
;;;962    }
00001a  4770              BX       lr
;;;963    
                          ENDP

                  |L10.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2Cmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2Cmd PROC
;;;301      */
;;;302    void RCC_APB2Cmd ( FunctionalState NewState )
000000  2800              CMP      r0,#0
;;;303    {
;;;304        /* Check the parameters */
;;;305        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;306    
;;;307        if ( NewState != DISABLE )
000002  d007              BEQ      |L11.20|
;;;308        {
;;;309            RCCAPB2->APB2_CFG |= APB2_CFG_ENAPB;
000004  4907              LDR      r1,|L11.36|
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  05d2              LSLS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a05              LDR      r2,|L11.36|
000010  6011              STR      r1,[r2,#0]
000012  e006              B        |L11.34|
                  |L11.20|
;;;310        }
;;;311        else
;;;312        {
;;;313            RCCAPB2->APB2_CFG &= ~APB2_CFG_ENAPB;
000014  4903              LDR      r1,|L11.36|
000016  6809              LDR      r1,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  05d2              LSLS     r2,r2,#23
00001c  4391              BICS     r1,r1,r2
00001e  4a01              LDR      r2,|L11.36|
000020  6011              STR      r1,[r2,#0]
                  |L11.34|
;;;314        }
;;;315    }
000022  4770              BX       lr
;;;316    
                          ENDP

                  |L11.36|
                          DCD      0x40022000

                          AREA ||i.RCC_APB2Config||, CODE, READONLY, ALIGN=2

                  RCC_APB2Config PROC
;;;542     */
;;;543    void RCC_APB2Config ( RCC_PCLK_TypeDef RCC_APB2CLK )
000000  4905              LDR      r1,|L12.24|
;;;544    {
;;;545        /* Check the parameters */
;;;546        assert_param ( IS_RCC_PCLK ( RCC_APB2CLK ) );
;;;547    
;;;548        RCCAPB2->APB2_CFG &= ~ ( ( uint32_t ) APB2_CFG_CLKDIV );
000002  6809              LDR      r1,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0512              LSLS     r2,r2,#20
000008  4391              BICS     r1,r1,r2
00000a  4a03              LDR      r2,|L12.24|
00000c  6011              STR      r1,[r2,#0]
;;;549        RCCAPB2->APB2_CFG |= RCC_APB2CLK;
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  4301              ORRS     r1,r1,r0
000014  6011              STR      r1,[r2,#0]
;;;550    }
000016  4770              BX       lr
;;;551    
                          ENDP

                  |L12.24|
                          DCD      0x40022000

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;841      */
;;;842    void RCC_APB2PeriphClockCmd ( uint32_t RCC_APB2Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;843    {
;;;844        /* Check the parameters */
;;;845        assert_param ( IS_RCC_APB2PERIPH ( RCC_APB2Periph ) );
;;;846    
;;;847        if ( NewState != DISABLE )
000002  d005              BEQ      |L13.16|
;;;848        {
;;;849            RCCAPB2->APB2_CFG |= RCC_APB2Periph;
000004  4a05              LDR      r2,|L13.28|
000006  6812              LDR      r2,[r2,#0]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L13.28|
00000c  601a              STR      r2,[r3,#0]
00000e  e004              B        |L13.26|
                  |L13.16|
;;;850        }
;;;851        else
;;;852        {
;;;853            RCCAPB2->APB2_CFG &= ~RCC_APB2Periph;
000010  4a02              LDR      r2,|L13.28|
000012  6812              LDR      r2,[r2,#0]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L13.28|
000018  601a              STR      r2,[r3,#0]
                  |L13.26|
;;;854        }
;;;855    }
00001a  4770              BX       lr
;;;856    
                          ENDP

                  |L13.28|
                          DCD      0x40022000

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;982     */
;;;983    void RCC_APB2PeriphResetCmd ( uint32_t RCC_APB2Periph, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;984    {
;;;985        /* Check the parameters */
;;;986        assert_param ( IS_RCC_APB2PERIPH ( RCC_APB2Periph ) );
;;;987    
;;;988        if ( NewState != DISABLE )
000002  d005              BEQ      |L14.16|
;;;989        {
;;;990            RCCAPB2->APB2_RST |= RCC_APB2Periph;
000004  4a05              LDR      r2,|L14.28|
000006  6852              LDR      r2,[r2,#4]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L14.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L14.26|
                  |L14.16|
;;;991        }
;;;992        else
;;;993        {
;;;994            RCCAPB2->APB2_RST &= ~RCC_APB2Periph;
000010  4a02              LDR      r2,|L14.28|
000012  6852              LDR      r2,[r2,#4]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L14.28|
000018  605a              STR      r2,[r3,#4]
                  |L14.26|
;;;995        }
;;;996    }
00001a  4770              BX       lr
;;;997    
                          ENDP

                  |L14.28|
                          DCD      0x40022000

                          AREA ||i.RCC_BTMCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_BTMCLKConfig PROC
;;;704     */
;;;705    void RCC_BTMCLKConfig ( RCC_BTMCLKSource_TypeDef RCC_BTMCLKSource )
000000  b500              PUSH     {lr}
;;;706    {
000002  4602              MOV      r2,r0
;;;707        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;708        /* Check the parameters */
;;;709        assert_param ( RCC_BTMCLKSOURCE ( RCC_BTMCLKSource ) );
;;;710    
;;;711        RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_BTMCLKSEL );
00000a  4805              LDR      r0,|L15.32|
00000c  6980              LDR      r0,[r0,#0x18]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  4903              LDR      r1,|L15.32|
000014  6188              STR      r0,[r1,#0x18]
;;;712        RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_BTMCLKSource );
000016  4608              MOV      r0,r1
000018  6980              LDR      r0,[r0,#0x18]
00001a  4310              ORRS     r0,r0,r2
00001c  6188              STR      r0,[r1,#0x18]
;;;713    }
00001e  bd00              POP      {pc}
;;;714    
                          ENDP

                  |L15.32|
                          DCD      0x40003000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;45      */
;;;46     void RCC_DeInit ( void )
000000  2040              MOVS     r0,#0x40
;;;47     {
;;;48         /*	RCC Reg Unlock = 0 */
;;;49         RCC->RCC_KEY = 0x40;
000002  4905              LDR      r1,|L16.24|
000004  60c8              STR      r0,[r1,#0xc]
;;;50     
;;;51         /* Reset RCC_CFG0 register */
;;;52         RCC->RCC_CFG0 = ( uint32_t ) 0x00001040;
000006  2041              MOVS     r0,#0x41
000008  0180              LSLS     r0,r0,#6
00000a  6148              STR      r0,[r1,#0x14]
;;;53     
;;;54         /* Reset RCC_CFG1 register */
;;;55         RCC->RCC_CFG1 = ( uint32_t ) 0x00000000;
00000c  2000              MOVS     r0,#0
00000e  6188              STR      r0,[r1,#0x18]
;;;56     
;;;57     #if defined(SC32f10xx)
;;;58         /* Reset PLL_CFG register */
;;;59         RCC->PLL_CFG = ( uint32_t ) 0x00000000;
000010  61c8              STR      r0,[r1,#0x1c]
;;;60     #endif
;;;61     
;;;62         /* Reset PLL_CFG register */
;;;63         RCC->NMI_CFG = ( uint32_t ) 0x00000000;
000012  62c8              STR      r0,[r1,#0x2c]
;;;64     
;;;65     }
000014  4770              BX       lr
;;;66     
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x40003000

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;557      */
;;;558    void RCC_GetClocksFreq ( RCC_ClocksTypeDef* RCC_Clocks )
000000  b5fe              PUSH     {r1-r7,lr}
;;;559    {
000002  4604              MOV      r4,r0
;;;560        uint32_t  tmp;
;;;561    
;;;562    #if defined(SC32f10xx)
;;;563        uint32_t  pllp, pllsource, pllm, plln;
;;;564    #endif
;;;565    
;;;566        /* Get SYSCLK source -------------------------------------------------------*/
;;;567        if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) == RESET )
000004  4833              LDR      r0,|L17.212|
000006  6940              LDR      r0,[r0,#0x14]
000008  2180              MOVS     r1,#0x80
00000a  4008              ANDS     r0,r0,r1
00000c  2800              CMP      r0,#0
00000e  d102              BNE      |L17.22|
;;;568        {
;;;569    #if defined(SC32f10xx)
;;;570            RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE;
000010  4831              LDR      r0,|L17.216|
000012  6020              STR      r0,[r4,#0]
000014  e03f              B        |L17.150|
                  |L17.22|
;;;571    #elif defined(SC32f11xx) ||defined(SC32f12xx)
;;;572            RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE / 2;
;;;573    #endif
;;;574        }
;;;575        else
;;;576        {
;;;577            switch ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSEL )
000016  482f              LDR      r0,|L17.212|
000018  6940              LDR      r0,[r0,#0x14]
00001a  2103              MOVS     r1,#3
00001c  0209              LSLS     r1,r1,#8
00001e  4008              ANDS     r0,r0,r1
000020  2800              CMP      r0,#0
000022  d009              BEQ      |L17.56|
000024  38ff              SUBS     r0,r0,#0xff
000026  38ff              SUBS     r0,r0,#0xff
000028  3802              SUBS     r0,#2
00002a  2800              CMP      r0,#0
00002c  d00c              BEQ      |L17.72|
00002e  38ff              SUBS     r0,r0,#0xff
000030  3801              SUBS     r0,#1
000032  2800              CMP      r0,#0
000034  d12e              BNE      |L17.148|
000036  e003              B        |L17.64|
                  |L17.56|
;;;578            {
;;;579    #if defined(SC32f11xx) ||defined(SC32f12xx)
;;;580            case RCC_SYSCLKSource_HXT:   /* HXT used as system clock source */
;;;581                RCC_Clocks->SYSCLK_Frequency = HXT_VALUE;
;;;582                break;
;;;583    #endif
;;;584            case RCC_SYSCLKSource_LIRC:   /* LIRC used as system clock source */
;;;585                RCC_Clocks->SYSCLK_Frequency = LIRC_VALUE;
000038  207d              MOVS     r0,#0x7d
00003a  0200              LSLS     r0,r0,#8
00003c  6020              STR      r0,[r4,#0]
;;;586                break;
00003e  e029              B        |L17.148|
                  |L17.64|
;;;587            case RCC_SYSCLKSource_LXT:   /* LXT used as system clock source */
;;;588                RCC_Clocks->SYSCLK_Frequency = LXT_VALUE;
000040  2001              MOVS     r0,#1
000042  03c0              LSLS     r0,r0,#15
000044  6020              STR      r0,[r4,#0]
;;;589                break;
000046  e025              B        |L17.148|
                  |L17.72|
;;;590    #if defined(SC32f11xx) ||defined(SC32f12xx)||defined(SC32f15xx)
;;;591            case RCC_SYSCLKSource_HIRC_2:   /* HIRC used as system clock source */
;;;592                RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE;
;;;593                break;
;;;594    #elif defined(SC32f10xx)
;;;595            case RCC_SYSCLKSource_PLLRCLK:   /* PLL used as system clock source */
;;;596                if ( ( RCC->PLL_CFG & PLL_CFG_PLLCLKSEL ) == RESET ) /* HXT used as PLL clock source */
000048  4822              LDR      r0,|L17.212|
00004a  69c0              LDR      r0,[r0,#0x1c]
00004c  2101              MOVS     r1,#1
00004e  05c9              LSLS     r1,r1,#23
000050  4008              ANDS     r0,r0,r1
000052  2800              CMP      r0,#0
000054  d101              BNE      |L17.90|
;;;597                {
;;;598                    pllsource = HIRC_VALUE;
000056  4e20              LDR      r6,|L17.216|
000058  e000              B        |L17.92|
                  |L17.90|
;;;599                }
;;;600                else   /* HIRC used as PLL clock source */
;;;601                {
;;;602                    pllsource = HXT_VALUE;
00005a  4e20              LDR      r6,|L17.220|
                  |L17.92|
;;;603                }
;;;604    
;;;605                pllm = ( ( RCC->PLL_CFG & PLL_CFG_MDIVM ) >> PLL_CFG_MDIVM_Pos );
00005c  481d              LDR      r0,|L17.212|
00005e  69c0              LDR      r0,[r0,#0x1c]
000060  211f              MOVS     r1,#0x1f
000062  0409              LSLS     r1,r1,#16
000064  4008              ANDS     r0,r0,r1
000066  0c00              LSRS     r0,r0,#16
000068  9001              STR      r0,[sp,#4]
;;;606                plln = ( ( RCC->PLL_CFG & PLL_CFG_NDIVN ) >> PLL_CFG_NDIVN_Pos );
00006a  481a              LDR      r0,|L17.212|
00006c  69c0              LDR      r0,[r0,#0x1c]
00006e  21ff              MOVS     r1,#0xff
000070  0209              LSLS     r1,r1,#8
000072  4008              ANDS     r0,r0,r1
000074  0a01              LSRS     r1,r0,#8
000076  9100              STR      r1,[sp,#0]
;;;607                pllp = ( ( RCC->PLL_CFG & PLL_CFG_PDIVP ) >> PLL_CFG_PDIVP_Pos );
000078  4816              LDR      r0,|L17.212|
00007a  69c0              LDR      r0,[r0,#0x1c]
00007c  0787              LSLS     r7,r0,#30
00007e  0fbf              LSRS     r7,r7,#30
;;;608    
;;;609                RCC_Clocks->SYSCLK_Frequency = ( ( ( pllsource / pllm ) * plln ) >> ( pllp + 1 ) );
000080  4630              MOV      r0,r6
000082  9901              LDR      r1,[sp,#4]
000084  f7fffffe          BL       __aeabi_uidivmod
000088  9900              LDR      r1,[sp,#0]
00008a  4348              MULS     r0,r1,r0
00008c  1c79              ADDS     r1,r7,#1
00008e  40c8              LSRS     r0,r0,r1
000090  6020              STR      r0,[r4,#0]
;;;610                break;
000092  bf00              NOP      
                  |L17.148|
000094  bf00              NOP                            ;586
                  |L17.150|
;;;611    #endif
;;;612            }
;;;613        }
;;;614    
;;;615        /* Get AHB source -------------------------------------------------------*/
;;;616        tmp = ( ( RCCAHB->AHB_CFG & AHB_CFG_CLKDIV ) >> AHB_CFG_CLKDIV_Pos );
000096  480f              LDR      r0,|L17.212|
000098  6800              LDR      r0,[r0,#0]
00009a  2107              MOVS     r1,#7
00009c  0509              LSLS     r1,r1,#20
00009e  4008              ANDS     r0,r0,r1
0000a0  0d05              LSRS     r5,r0,#20
;;;617        RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> tmp;
0000a2  6820              LDR      r0,[r4,#0]
0000a4  40e8              LSRS     r0,r0,r5
0000a6  6060              STR      r0,[r4,#4]
;;;618    
;;;619        /* Get APB source -------------------------------------------------------*/
;;;620        tmp = ( ( RCCAPB0->APB0_CFG & APB0_CFG_CLKDIV ) >> APB0_CFG_CLKDIV_Pos );
0000a8  480d              LDR      r0,|L17.224|
0000aa  6800              LDR      r0,[r0,#0]
0000ac  4008              ANDS     r0,r0,r1
0000ae  0d05              LSRS     r5,r0,#20
;;;621        RCC_Clocks->PCLK0_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
0000b0  6860              LDR      r0,[r4,#4]
0000b2  40e8              LSRS     r0,r0,r5
0000b4  60a0              STR      r0,[r4,#8]
;;;622    
;;;623        /* Get AHB source -------------------------------------------------------*/
;;;624        tmp = ( ( RCCAPB1->APB1_CFG & APB1_CFG_CLKDIV ) >> APB1_CFG_CLKDIV_Pos );
0000b6  480b              LDR      r0,|L17.228|
0000b8  6800              LDR      r0,[r0,#0]
0000ba  4008              ANDS     r0,r0,r1
0000bc  0d05              LSRS     r5,r0,#20
;;;625        RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
0000be  6860              LDR      r0,[r4,#4]
0000c0  40e8              LSRS     r0,r0,r5
0000c2  60e0              STR      r0,[r4,#0xc]
;;;626    
;;;627        /* Get AHB source -------------------------------------------------------*/
;;;628        tmp = ( ( RCCAPB2->APB2_CFG & APB2_CFG_CLKDIV ) >> APB2_CFG_CLKDIV_Pos );
0000c4  4808              LDR      r0,|L17.232|
0000c6  6800              LDR      r0,[r0,#0]
0000c8  4008              ANDS     r0,r0,r1
0000ca  0d05              LSRS     r5,r0,#20
;;;629        RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
0000cc  6860              LDR      r0,[r4,#4]
0000ce  40e8              LSRS     r0,r0,r5
0000d0  6120              STR      r0,[r4,#0x10]
;;;630    }
0000d2  bdfe              POP      {r1-r7,pc}
;;;631    
                          ENDP

                  |L17.212|
                          DCD      0x40003000
                  |L17.216|
                          DCD      0x01e84800
                  |L17.220|
                          DCD      0x00f42400
                  |L17.224|
                          DCD      0x40020000
                  |L17.228|
                          DCD      0x40021000
                  |L17.232|
                          DCD      0x40022000

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;1179    */
;;;1180   FlagStatus RCC_GetFlagStatus ( uint32_t RCC_FLAG )
000000  4601              MOV      r1,r0
;;;1181   {
;;;1182       /* Check the parameters */
;;;1183       assert_param ( IS_GET_RCC_FLAG ( RCC_FLAG ) );
;;;1184   
;;;1185       if( ( RCC->RCC_STS & RCC_FLAG ) != ( uint32_t ) RESET )
000002  4804              LDR      r0,|L18.20|
000004  6a00              LDR      r0,[r0,#0x20]
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L18.16|
;;;1186       {
;;;1187           return ( SET );
00000c  2001              MOVS     r0,#1
                  |L18.14|
;;;1188       }
;;;1189       return ( RESET );
;;;1190   }
00000e  4770              BX       lr
                  |L18.16|
000010  2000              MOVS     r0,#0                 ;1189
000012  e7fc              B        |L18.14|
;;;1191   
                          ENDP

                  |L18.20|
                          DCD      0x40003000

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;449      */
;;;450    RCC_SYSCLKSource_TypeDef RCC_GetSYSCLKSource ( void )
000000  4806              LDR      r0,|L19.28|
;;;451    {
;;;452        if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) != RESET )
000002  6940              LDR      r0,[r0,#0x14]
000004  2180              MOVS     r1,#0x80
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d005              BEQ      |L19.24|
;;;453        {
;;;454            return ( ( RCC_SYSCLKSource_TypeDef ) ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSEL ) );
00000c  4803              LDR      r0,|L19.28|
00000e  6940              LDR      r0,[r0,#0x14]
000010  2103              MOVS     r1,#3
000012  0209              LSLS     r1,r1,#8
000014  4008              ANDS     r0,r0,r1
                  |L19.22|
;;;455        }
;;;456        else
;;;457        {
;;;458    #if defined (SC32f10xx)
;;;459            return RCC_SYSCLKSource_HIRC;
;;;460    #elif defined (SC32f11xx) ||  defined (SC32f12xx) ||  defined (SC32f15xx)
;;;461            return RCC_SYSCLKSource_HIRC_2;
;;;462    #endif
;;;463        }
;;;464    
;;;465    }
000016  4770              BX       lr
                  |L19.24|
000018  4801              LDR      r0,|L19.32|
00001a  e7fc              B        |L19.22|
;;;466    
                          ENDP

                  |L19.28|
                          DCD      0x40003000
                  |L19.32|
                          DCD      0x0000ff7f

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;476     */
;;;477    void RCC_HCLKConfig ( RCC_HCLK_TypeDef RCC_HCLK )
000000  4905              LDR      r1,|L20.24|
;;;478    {
;;;479        /* Check the parameters */
;;;480        assert_param ( IS_RCC_HCLK ( RCC_HCLK ) );
;;;481    
;;;482        RCCAHB->AHB_CFG &= ( uint32_t ) ~ ( AHB_CFG_CLKDIV );
000002  6809              LDR      r1,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0512              LSLS     r2,r2,#20
000008  4391              BICS     r1,r1,r2
00000a  4a03              LDR      r2,|L20.24|
00000c  6011              STR      r1,[r2,#0]
;;;483        RCCAHB->AHB_CFG |= RCC_HCLK;
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  4301              ORRS     r1,r1,r0
000014  6011              STR      r1,[r2,#0]
;;;484    }
000016  4770              BX       lr
;;;485    
                          ENDP

                  |L20.24|
                          DCD      0x40003000

                          AREA ||i.RCC_HIRCCmd||, CODE, READONLY, ALIGN=2

                  RCC_HIRCCmd PROC
;;;118      */
;;;119    void RCC_HIRCCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;120    {
000002  4602              MOV      r2,r0
;;;121        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;122        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L21.28|
;;;123        {
;;;124            /* Enable the selected HIRC peripheral */
;;;125            RCC->RCC_CFG0 |= RCC_CFG0_HIRCEN;
00000e  4807              LDR      r0,|L21.44|
000010  6940              LDR      r0,[r0,#0x14]
000012  2140              MOVS     r1,#0x40
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L21.44|
000018  6148              STR      r0,[r1,#0x14]
00001a  e005              B        |L21.40|
                  |L21.28|
;;;126        }
;;;127        else
;;;128        {
;;;129            /* Disable the selected HIRC peripheral */
;;;130            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_HIRCEN );
00001c  4803              LDR      r0,|L21.44|
00001e  6940              LDR      r0,[r0,#0x14]
000020  2140              MOVS     r1,#0x40
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L21.44|
000026  6148              STR      r0,[r1,#0x14]
                  |L21.40|
;;;131        }
;;;132    }
000028  bd00              POP      {pc}
;;;133    
                          ENDP

00002a  0000              DCW      0x0000
                  |L21.44|
                          DCD      0x40003000

                          AREA ||i.RCC_HXTCmd||, CODE, READONLY, ALIGN=2

                  RCC_HXTCmd PROC
;;;96       */
;;;97     void RCC_HXTCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;98     {
000002  4602              MOV      r2,r0
;;;99         RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;100        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L22.28|
;;;101        {
;;;102            /* Enable the selected HXT peripheral */
;;;103            RCC->RCC_CFG0 |= RCC_CFG0_HXTEN;
00000e  4807              LDR      r0,|L22.44|
000010  6940              LDR      r0,[r0,#0x14]
000012  2120              MOVS     r1,#0x20
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L22.44|
000018  6148              STR      r0,[r1,#0x14]
00001a  e005              B        |L22.40|
                  |L22.28|
;;;104        }
;;;105        else
;;;106        {
;;;107            /* Disable the selected HXT peripheral */
;;;108            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_HXTEN );
00001c  4803              LDR      r0,|L22.44|
00001e  6940              LDR      r0,[r0,#0x14]
000020  2120              MOVS     r1,#0x20
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L22.44|
000026  6148              STR      r0,[r1,#0x14]
                  |L22.40|
;;;109        }
;;;110    }
000028  bd00              POP      {pc}
;;;111    #endif
                          ENDP

00002a  0000              DCW      0x0000
                  |L22.44|
                          DCD      0x40003000

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;1153     */
;;;1154   void RCC_ITConfig ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;1155   {
000002  4602              MOV      r2,r0
;;;1156       RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;1157       if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d007              BEQ      |L23.30|
;;;1158       {
;;;1159           RCC->RCC_CFG0 |= RCC_CFG0_INTEN;
00000e  4808              LDR      r0,|L23.48|
000010  6940              LDR      r0,[r0,#0x14]
000012  2101              MOVS     r1,#1
000014  03c9              LSLS     r1,r1,#15
000016  4308              ORRS     r0,r0,r1
000018  4905              LDR      r1,|L23.48|
00001a  6148              STR      r0,[r1,#0x14]
00001c  e006              B        |L23.44|
                  |L23.30|
;;;1160       }
;;;1161       else
;;;1162       {
;;;1163           RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_INTEN );
00001e  4804              LDR      r0,|L23.48|
000020  6940              LDR      r0,[r0,#0x14]
000022  2101              MOVS     r1,#1
000024  03c9              LSLS     r1,r1,#15
000026  4388              BICS     r0,r0,r1
000028  4901              LDR      r1,|L23.48|
00002a  6148              STR      r0,[r1,#0x14]
                  |L23.44|
;;;1164       }
;;;1165   }
00002c  bd00              POP      {pc}
;;;1166   
                          ENDP

00002e  0000              DCW      0x0000
                  |L23.48|
                          DCD      0x40003000

                          AREA ||i.RCC_LCDLEDCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_LCDLEDCLKConfig PROC
;;;687     */
;;;688    void RCC_LCDLEDCLKConfig ( RCC_LCDLEDCLKSource_TypeDef RCC_LCDLEDCLKSource )
000000  b500              PUSH     {lr}
;;;689    {
000002  4602              MOV      r2,r0
;;;690        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;691        /* Check the parameters */
;;;692        assert_param ( RCC_LCDLEDCLKSOURCE ( RCC_LCDLEDCLKSource ) );
;;;693    
;;;694        RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_LCDCLKSEL );
00000a  4805              LDR      r0,|L24.32|
00000c  6980              LDR      r0,[r0,#0x18]
00000e  2102              MOVS     r1,#2
000010  4388              BICS     r0,r0,r1
000012  4903              LDR      r1,|L24.32|
000014  6188              STR      r0,[r1,#0x18]
;;;695        RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_LCDLEDCLKSource );
000016  4608              MOV      r0,r1
000018  6980              LDR      r0,[r0,#0x18]
00001a  4310              ORRS     r0,r0,r2
00001c  6188              STR      r0,[r1,#0x18]
;;;696    }
00001e  bd00              POP      {pc}
;;;697    #endif
                          ENDP

                  |L24.32|
                          DCD      0x40003000

                          AREA ||i.RCC_LIRCCmd||, CODE, READONLY, ALIGN=2

                  RCC_LIRCCmd PROC
;;;162      */
;;;163    void RCC_LIRCCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;164    {
000002  4602              MOV      r2,r0
;;;165        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;166        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L25.28|
;;;167        {
;;;168            /* Enable the selected LIRC peripheral */
;;;169            RCC->RCC_CFG0 |= RCC_CFG0_LIRCEN;
00000e  4807              LDR      r0,|L25.44|
000010  6940              LDR      r0,[r0,#0x14]
000012  2102              MOVS     r1,#2
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L25.44|
000018  6148              STR      r0,[r1,#0x14]
00001a  e005              B        |L25.40|
                  |L25.28|
;;;170        }
;;;171        else
;;;172        {
;;;173            /* Disable the selected LIRC peripheral */
;;;174            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_LIRCEN );
00001c  4803              LDR      r0,|L25.44|
00001e  6940              LDR      r0,[r0,#0x14]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L25.44|
000026  6148              STR      r0,[r1,#0x14]
                  |L25.40|
;;;175        }
;;;176    }
000028  bd00              POP      {pc}
;;;177    
                          ENDP

00002a  0000              DCW      0x0000
                  |L25.44|
                          DCD      0x40003000

                          AREA ||i.RCC_LXTCmd||, CODE, READONLY, ALIGN=2

                  RCC_LXTCmd PROC
;;;140      */
;;;141    void RCC_LXTCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;142    {
000002  4602              MOV      r2,r0
;;;143        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;144        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L26.28|
;;;145        {
;;;146            /* Enable the selected LXT peripheral */
;;;147            RCC->RCC_CFG0 |= RCC_CFG0_LXTEN;
00000e  4807              LDR      r0,|L26.44|
000010  6940              LDR      r0,[r0,#0x14]
000012  2101              MOVS     r1,#1
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L26.44|
000018  6148              STR      r0,[r1,#0x14]
00001a  e005              B        |L26.40|
                  |L26.28|
;;;148        }
;;;149        else
;;;150        {
;;;151            /* Disable the selected LXT peripheral */
;;;152            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_LXTEN );
00001c  4803              LDR      r0,|L26.44|
00001e  6940              LDR      r0,[r0,#0x14]
000020  0840              LSRS     r0,r0,#1
000022  0040              LSLS     r0,r0,#1
000024  4901              LDR      r1,|L26.44|
000026  6148              STR      r0,[r1,#0x14]
                  |L26.40|
;;;153        }
;;;154    }
000028  bd00              POP      {pc}
;;;155    
                          ENDP

00002a  0000              DCW      0x0000
                  |L26.44|
                          DCD      0x40003000

                          AREA ||i.RCC_NMICmd||, CODE, READONLY, ALIGN=2

                  RCC_NMICmd PROC
;;;1018    */
;;;1019   void RCC_NMICmd ( uint32_t RCC_NMIPeriph, FunctionalState NewState )
000000  4602              MOV      r2,r0
;;;1020   {
;;;1021       uint32_t temp;
;;;1022       /* Check the parameters */
;;;1023       assert_param ( IS_RCC_NMIPeriph ( RCC_NMIPeriph ) );
;;;1024   
;;;1025       temp = RCC->NMI_CFG;
000002  4b08              LDR      r3,|L27.36|
000004  6ad8              LDR      r0,[r3,#0x2c]
;;;1026   
;;;1027       temp &= ( ~RCC_NMIPeriph );
000006  4603              MOV      r3,r0
000008  4393              BICS     r3,r3,r2
00000a  4618              MOV      r0,r3
;;;1028   
;;;1029       if ( NewState != DISABLE )
00000c  2900              CMP      r1,#0
00000e  d003              BEQ      |L27.24|
;;;1030       {
;;;1031           temp |= 0xA05F0000 | RCC_NMIPeriph;
000010  4b05              LDR      r3,|L27.40|
000012  4313              ORRS     r3,r3,r2
000014  4318              ORRS     r0,r0,r3
000016  e001              B        |L27.28|
                  |L27.24|
;;;1032       }
;;;1033       else
;;;1034       {
;;;1035           temp |= 0xA05F0000;
000018  4b03              LDR      r3,|L27.40|
00001a  4318              ORRS     r0,r0,r3
                  |L27.28|
;;;1036       }
;;;1037       RCC->NMI_CFG = temp;
00001c  4b01              LDR      r3,|L27.36|
00001e  62d8              STR      r0,[r3,#0x2c]
;;;1038   }
000020  4770              BX       lr
;;;1039   /* End of RCC_Group3.	*/
                          ENDP

000022  0000              DCW      0x0000
                  |L27.36|
                          DCD      0x40003000
                  |L27.40|
                          DCD      0xa05f0000

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;185      */
;;;186    void RCC_PLLCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;187    {
000002  4602              MOV      r2,r0
;;;188        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;189        /* Check the parameters */
;;;190        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;191    
;;;192        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L28.28|
;;;193        {
;;;194            /* Enable the PLL peripheral */
;;;195            RCC->PLL_CFG |= PLL_CFG_PLLON;
00000e  4807              LDR      r0,|L28.44|
000010  69c0              LDR      r0,[r0,#0x1c]
000012  2180              MOVS     r1,#0x80
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L28.44|
000018  61c8              STR      r0,[r1,#0x1c]
00001a  e005              B        |L28.40|
                  |L28.28|
;;;196        }
;;;197        else
;;;198        {
;;;199            /* Disable the PLL Clock */
;;;200            RCC->PLL_CFG &= ( uint32_t ) ~ ( ( uint32_t ) PLL_CFG_PLLON );
00001c  4803              LDR      r0,|L28.44|
00001e  69c0              LDR      r0,[r0,#0x1c]
000020  2180              MOVS     r1,#0x80
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L28.44|
000026  61c8              STR      r0,[r1,#0x1c]
                  |L28.40|
;;;201        }
;;;202    }
000028  bd00              POP      {pc}
;;;203    
                          ENDP

00002a  0000              DCW      0x0000
                  |L28.44|
                          DCD      0x40003000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;326     */
;;;327    void RCC_PLLConfig ( RCC_PLLCLKSource_TypeDef RCC_PLLCLKSource, RLL_Factor_TypeDef* RLL_Factor )
000000  b510              PUSH     {r4,lr}
;;;328    {
000002  4604              MOV      r4,r0
000004  460a              MOV      r2,r1
;;;329        RCC_Unlock ( 0xFF );
000006  20ff              MOVS     r0,#0xff
000008  f7fffffe          BL       RCC_Unlock
;;;330        uint32_t tmpreg = 0;
00000c  2300              MOVS     r3,#0
;;;331        
;;;332        /* Check the parameters */
;;;333        assert_param ( RCC_PLLCLKSOURCE ( RCC_PLLCLKSource ) );
;;;334    	
;;;335            tmpreg = RCC->PLL_CFG;
00000e  4808              LDR      r0,|L29.48|
000010  69c3              LDR      r3,[r0,#0x1c]
;;;336    
;;;337        tmpreg &= ( uint32_t ) ~ ( PLL_CFG_PLLCLKSEL | PLL_CFG_MDIVM | PLL_CFG_NDIVN | PLL_CFG_PDIVP );
000012  4808              LDR      r0,|L29.52|
000014  4003              ANDS     r3,r3,r0
;;;338    
;;;339        tmpreg |= ( uint32_t ) ( RCC_PLLCLKSource | ( RLL_Factor->PLLM << PLL_CFG_MDIVM_Pos ) |
000016  8810              LDRH     r0,[r2,#0]
000018  0400              LSLS     r0,r0,#16
00001a  4320              ORRS     r0,r0,r4
00001c  6851              LDR      r1,[r2,#4]
00001e  0209              LSLS     r1,r1,#8
000020  4308              ORRS     r0,r0,r1
000022  6891              LDR      r1,[r2,#8]
000024  4308              ORRS     r0,r0,r1
000026  4303              ORRS     r3,r3,r0
;;;340                                 ( RLL_Factor->PLLN << PLL_CFG_NDIVN_Pos ) | ( RLL_Factor->PLLP << PLL_CFG_PDIVP_Pos ) );
;;;341    
;;;342        RCC->PLL_CFG = tmpreg;
000028  4801              LDR      r0,|L29.48|
00002a  61c3              STR      r3,[r0,#0x1c]
;;;343    }
00002c  bd10              POP      {r4,pc}
;;;344    #endif
                          ENDP

00002e  0000              DCW      0x0000
                  |L29.48|
                          DCD      0x40003000
                  |L29.52|
                          DCD      0xff6000fc

                          AREA ||i.RCC_PLLRCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLRCmd PROC
;;;210      */
;;;211    void RCC_PLLRCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;212    {
000002  4602              MOV      r2,r0
;;;213        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;214        /* Check the parameters */
;;;215        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;216    
;;;217        if ( NewState != DISABLE )
00000a  2a00              CMP      r2,#0
00000c  d006              BEQ      |L30.28|
;;;218        {
;;;219            RCC->PLL_CFG |= PLL_CFG_PLLREN;
00000e  4807              LDR      r0,|L30.44|
000010  69c0              LDR      r0,[r0,#0x1c]
000012  2140              MOVS     r1,#0x40
000014  4308              ORRS     r0,r0,r1
000016  4905              LDR      r1,|L30.44|
000018  61c8              STR      r0,[r1,#0x1c]
00001a  e005              B        |L30.40|
                  |L30.28|
;;;220        }
;;;221        else
;;;222        {
;;;223            RCC->PLL_CFG &= ( uint32_t ) ~ ( ( uint32_t ) PLL_CFG_PLLREN );
00001c  4803              LDR      r0,|L30.44|
00001e  69c0              LDR      r0,[r0,#0x1c]
000020  2140              MOVS     r1,#0x40
000022  4388              BICS     r0,r0,r1
000024  4901              LDR      r1,|L30.44|
000026  61c8              STR      r0,[r1,#0x1c]
                  |L30.40|
;;;224        }
;;;225    }
000028  bd00              POP      {pc}
;;;226    #endif
                          ENDP

00002a  0000              DCW      0x0000
                  |L30.44|
                          DCD      0x40003000

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;375     */
;;;376    ErrorStatus RCC_SYSCLKConfig ( RCC_SYSCLKSource_TypeDef RCC_SYSCLKSource )
000000  b570              PUSH     {r4-r6,lr}
;;;377    {
000002  4604              MOV      r4,r0
;;;378        uint32_t tmpreg;
;;;379        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;380    
;;;381    
;;;382        /* Check the parameters */
;;;383        assert_param ( IS_RCC_SYSCLKSOURCE ( RCC_SYSCLKSource ) );
;;;384        if ( RCC_SYSCLKSource != ( ( uint16_t ) ( ~RCC_CFG0_SYSCLKSW ) ) )
00000a  4831              LDR      r0,|L31.208|
00000c  4284              CMP      r4,r0
00000e  d042              BEQ      |L31.150|
;;;385        {
;;;386    
;;;387    #if defined(SC32f11xx)||defined(SC32f12xx)||defined(SC32f15xx)
;;;388            if ( RCC_SYSCLKSource == RCC_SYSCLKSource_HIRC )
;;;389            {
;;;390                RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
;;;391                RCC->RCC_CFG0 |= RCC_WAIT_2;
;;;392            }
;;;393    #elif defined(SC32f10xx)
;;;394        uint32_t Multioperator = 1;
000010  2601              MOVS     r6,#1
;;;395        for ( int i = 1; i <= ((RCC->PLL_CFG &0x03) + 1 ); i++ )
000012  2001              MOVS     r0,#1
000014  e001              B        |L31.26|
                  |L31.22|
;;;396        {
;;;397            Multioperator *=  2;
000016  0076              LSLS     r6,r6,#1
000018  1c40              ADDS     r0,r0,#1              ;395
                  |L31.26|
00001a  492e              LDR      r1,|L31.212|
00001c  69c9              LDR      r1,[r1,#0x1c]         ;395
00001e  0789              LSLS     r1,r1,#30             ;395
000020  0f89              LSRS     r1,r1,#30             ;395
000022  1c49              ADDS     r1,r1,#1              ;395
000024  4281              CMP      r1,r0                 ;395
000026  d2f6              BCS      |L31.22|
;;;398        }
;;;399        if ( ( ( 2 * ((RCC->PLL_CFG &0xFF00)>>8) ) / Multioperator ) >= 64 )
000028  492a              LDR      r1,|L31.212|
00002a  69c9              LDR      r1,[r1,#0x1c]
00002c  22ff              MOVS     r2,#0xff
00002e  0212              LSLS     r2,r2,#8
000030  4011              ANDS     r1,r1,r2
000032  0a09              LSRS     r1,r1,#8
000034  0048              LSLS     r0,r1,#1
000036  4631              MOV      r1,r6
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  2840              CMP      r0,#0x40
00003e  d30c              BCC      |L31.90|
;;;400        {
;;;401            RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
000040  4824              LDR      r0,|L31.212|
000042  6940              LDR      r0,[r0,#0x14]
000044  2103              MOVS     r1,#3
000046  0309              LSLS     r1,r1,#12
000048  4388              BICS     r0,r0,r1
00004a  4922              LDR      r1,|L31.212|
00004c  6148              STR      r0,[r1,#0x14]
;;;402            RCC->RCC_CFG0 |= RCC_WAIT_1;
00004e  4608              MOV      r0,r1
000050  6940              LDR      r0,[r0,#0x14]
000052  1489              ASRS     r1,r1,#18
000054  4308              ORRS     r0,r0,r1
000056  491f              LDR      r1,|L31.212|
000058  6148              STR      r0,[r1,#0x14]
                  |L31.90|
;;;403        }
;;;404    #endif
;;;405    		    RCC_Unlock ( 0xFF );
00005a  20ff              MOVS     r0,#0xff
00005c  f7fffffe          BL       RCC_Unlock
;;;406    				
;;;407            tmpreg = RCC->RCC_CFG0;
000060  481c              LDR      r0,|L31.212|
000062  6945              LDR      r5,[r0,#0x14]
;;;408    
;;;409            tmpreg &= ( uint32_t ) ~ ( RCC_CFG0_SYSCLKSEL | RCC_CFG0_SYSCLKSW );
000064  2107              MOVS     r1,#7
000066  01c9              LSLS     r1,r1,#7
000068  4628              MOV      r0,r5
00006a  4388              BICS     r0,r0,r1
00006c  4605              MOV      r5,r0
;;;410    
;;;411            tmpreg |= ( uint32_t ) RCC_SYSCLKSource;
00006e  4628              MOV      r0,r5
000070  4320              ORRS     r0,r0,r4
000072  4605              MOV      r5,r0
;;;412    
;;;413            RCC->RCC_CFG0 = tmpreg;
000074  4817              LDR      r0,|L31.212|
000076  6145              STR      r5,[r0,#0x14]
;;;414    
;;;415            RCC->RCC_CFG0 |= RCC_CFG0_SYSCLKSW;
000078  6940              LDR      r0,[r0,#0x14]
00007a  2180              MOVS     r1,#0x80
00007c  4308              ORRS     r0,r0,r1
00007e  4915              LDR      r1,|L31.212|
000080  6148              STR      r0,[r1,#0x14]
;;;416    
;;;417            if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) != RESET )
000082  4608              MOV      r0,r1
000084  6940              LDR      r0,[r0,#0x14]
000086  2180              MOVS     r1,#0x80
000088  4008              ANDS     r0,r0,r1
00008a  2800              CMP      r0,#0
00008c  d001              BEQ      |L31.146|
;;;418                return SUCCESS;
00008e  2000              MOVS     r0,#0
                  |L31.144|
;;;419            else
;;;420                return ERROR;
;;;421        }
;;;422        else
;;;423        {
;;;424            RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
;;;425            RCC->RCC_CFG0 |= RCC_WAIT_1;
;;;426            RCC->RCC_CFG0 &= ( uint32_t ) ~RCC_CFG0_SYSCLKSW;
;;;427    
;;;428            if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) == RESET )
;;;429                return SUCCESS;
;;;430            else
;;;431                return ERROR;
;;;432        }
;;;433    }
000090  bd70              POP      {r4-r6,pc}
                  |L31.146|
000092  2001              MOVS     r0,#1                 ;420
000094  e7fc              B        |L31.144|
                  |L31.150|
000096  480f              LDR      r0,|L31.212|
000098  6940              LDR      r0,[r0,#0x14]         ;424
00009a  2103              MOVS     r1,#3                 ;424
00009c  0309              LSLS     r1,r1,#12             ;424
00009e  4388              BICS     r0,r0,r1              ;424
0000a0  490c              LDR      r1,|L31.212|
0000a2  6148              STR      r0,[r1,#0x14]         ;424
0000a4  4608              MOV      r0,r1                 ;425
0000a6  6940              LDR      r0,[r0,#0x14]         ;425
0000a8  1489              ASRS     r1,r1,#18             ;425
0000aa  4308              ORRS     r0,r0,r1              ;425
0000ac  4909              LDR      r1,|L31.212|
0000ae  6148              STR      r0,[r1,#0x14]         ;425
0000b0  4608              MOV      r0,r1                 ;426
0000b2  6940              LDR      r0,[r0,#0x14]         ;426
0000b4  2180              MOVS     r1,#0x80              ;426
0000b6  4388              BICS     r0,r0,r1              ;426
0000b8  4906              LDR      r1,|L31.212|
0000ba  6148              STR      r0,[r1,#0x14]         ;426
0000bc  4608              MOV      r0,r1                 ;428
0000be  6940              LDR      r0,[r0,#0x14]         ;428
0000c0  2180              MOVS     r1,#0x80              ;428
0000c2  4008              ANDS     r0,r0,r1              ;428
0000c4  2800              CMP      r0,#0                 ;428
0000c6  d100              BNE      |L31.202|
0000c8  e7e2              B        |L31.144|
                  |L31.202|
0000ca  2001              MOVS     r0,#1                 ;431
0000cc  e7e0              B        |L31.144|
;;;434    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L31.208|
                          DCD      0x0000ff7f
                  |L31.212|
                          DCD      0x40003000

                          AREA ||i.RCC_SystickCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SystickCLKConfig PROC
;;;1062    */
;;;1063   void RCC_SystickCLKConfig ( RCC_SysTickSource_TypeDef RCC_SysTickSource )
000000  b500              PUSH     {lr}
;;;1064   {
000002  4602              MOV      r2,r0
;;;1065   
;;;1066       /* Check the parameters */
;;;1067       assert_param ( IS_RCC_SYSTICKSOURCE ( RCC_SysTickSource ) );
;;;1068   
;;;1069       if ( RCC_SysTickSource == RCC_SysTickSource_HCLK )
000004  2a01              CMP      r2,#1
000006  d106              BNE      |L32.22|
;;;1070       {
;;;1071           SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
000008  480d              LDR      r0,|L32.64|
00000a  6900              LDR      r0,[r0,#0x10]
00000c  2104              MOVS     r1,#4
00000e  4308              ORRS     r0,r0,r1
000010  490b              LDR      r1,|L32.64|
000012  6108              STR      r0,[r1,#0x10]
000014  e012              B        |L32.60|
                  |L32.22|
;;;1072       }
;;;1073       else
;;;1074       {
;;;1075           RCC_Unlock ( 0xFF );
000016  20ff              MOVS     r0,#0xff
000018  f7fffffe          BL       RCC_Unlock
;;;1076           SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
00001c  4808              LDR      r0,|L32.64|
00001e  6900              LDR      r0,[r0,#0x10]
000020  2104              MOVS     r1,#4
000022  4388              BICS     r0,r0,r1
000024  4906              LDR      r1,|L32.64|
000026  6108              STR      r0,[r1,#0x10]
;;;1077           RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_STCLKSEL );
000028  4806              LDR      r0,|L32.68|
00002a  6980              LDR      r0,[r0,#0x18]
00002c  2160              MOVS     r1,#0x60
00002e  4388              BICS     r0,r0,r1
000030  4904              LDR      r1,|L32.68|
000032  6188              STR      r0,[r1,#0x18]
;;;1078           RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_SysTickSource );
000034  4608              MOV      r0,r1
000036  6980              LDR      r0,[r0,#0x18]
000038  4310              ORRS     r0,r0,r2
00003a  6188              STR      r0,[r1,#0x18]
                  |L32.60|
;;;1079       }
;;;1080   }
00003c  bd00              POP      {pc}
;;;1081   /**
                          ENDP

00003e  0000              DCW      0x0000
                  |L32.64|
                          DCD      0xe000e000
                  |L32.68|
                          DCD      0x40003000

                          AREA ||i.RCC_SystickCmd||, CODE, READONLY, ALIGN=2

                  RCC_SystickCmd PROC
;;;1100     */
;;;1101   void RCC_SystickCmd ( FunctionalState NewState )
000000  2800              CMP      r0,#0
;;;1102   {
;;;1103       /* Check the parameters */
;;;1104       assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;1105   
;;;1106       if ( NewState != DISABLE )
000002  d006              BEQ      |L33.18|
;;;1107       {
;;;1108           SysTick->CTRL |= ( uint32_t ) ( SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk ); /* Enable SysTick IRQ and SysTick Timer */
000004  4906              LDR      r1,|L33.32|
000006  6909              LDR      r1,[r1,#0x10]
000008  2203              MOVS     r2,#3
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L33.32|
00000e  6111              STR      r1,[r2,#0x10]
000010  e005              B        |L33.30|
                  |L33.18|
;;;1109       }
;;;1110       else
;;;1111       {
;;;1112           SysTick->CTRL &= ~ ( uint32_t ) ( SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk );
000012  4903              LDR      r1,|L33.32|
000014  6909              LDR      r1,[r1,#0x10]
000016  0889              LSRS     r1,r1,#2
000018  0089              LSLS     r1,r1,#2
00001a  4a01              LDR      r2,|L33.32|
00001c  6111              STR      r1,[r2,#0x10]
                  |L33.30|
;;;1113       }
;;;1114   }
00001e  4770              BX       lr
;;;1115   /**
                          ENDP

                  |L33.32|
                          DCD      0xe000e000

                          AREA ||i.RCC_SystickGetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_SystickGetFlagStatus PROC
;;;1121    */
;;;1122   FlagStatus RCC_SystickGetFlagStatus ( void )
000000  4805              LDR      r0,|L34.24|
;;;1123   {
;;;1124       if ( ( SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk ) != ( uint32_t ) RESET )
000002  6900              LDR      r0,[r0,#0x10]
000004  2101              MOVS     r1,#1
000006  0409              LSLS     r1,r1,#16
000008  4008              ANDS     r0,r0,r1
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L34.18|
;;;1125       {
;;;1126           return ( SET );
00000e  2001              MOVS     r0,#1
                  |L34.16|
;;;1127       }
;;;1128       return ( RESET );
;;;1129   }
000010  4770              BX       lr
                  |L34.18|
000012  2000              MOVS     r0,#0                 ;1128
000014  e7fc              B        |L34.16|
;;;1130   /**
                          ENDP

000016  0000              DCW      0x0000
                  |L34.24|
                          DCD      0xe000e000

                          AREA ||i.RCC_SystickSetCounter||, CODE, READONLY, ALIGN=2

                  RCC_SystickSetCounter PROC
;;;1085    */
;;;1086   void RCC_SystickSetCounter ( uint32_t Counter )
000000  1e41              SUBS     r1,r0,#1
;;;1087   {
;;;1088       if ( ( Counter - 1UL ) <= SysTick_LOAD_RELOAD_Msk ) /* Reload value possible */
000002  4a04              LDR      r2,|L35.20|
000004  4291              CMP      r1,r2
000006  d803              BHI      |L35.16|
;;;1089       {
;;;1090           SysTick->LOAD = ( uint32_t ) ( Counter - 1UL ); /* set reload register */
000008  4a03              LDR      r2,|L35.24|
00000a  6151              STR      r1,[r2,#0x14]
;;;1091           SysTick->VAL  = 0UL;   /* Load the SysTick Counter Value */
00000c  2100              MOVS     r1,#0
00000e  6191              STR      r1,[r2,#0x18]
                  |L35.16|
;;;1092       }
;;;1093   }
000010  4770              BX       lr
;;;1094   /**
                          ENDP

000012  0000              DCW      0x0000
                  |L35.20|
                          DCD      0x00ffffff
                  |L35.24|
                          DCD      0xe000e000

                          AREA ||i.RCC_Unlock||, CODE, READONLY, ALIGN=2

                  RCC_Unlock PROC
;;;76      */
;;;77     ErrorStatus RCC_Unlock ( uint8_t TimeLimit )
000000  4601              MOV      r1,r0
;;;78     {
;;;79         if ( TimeLimit >= 0x40 )
000002  2940              CMP      r1,#0x40
000004  db03              BLT      |L36.14|
;;;80         {
;;;81             RCC->RCC_KEY = TimeLimit;
000006  4803              LDR      r0,|L36.20|
000008  60c1              STR      r1,[r0,#0xc]
;;;82             return SUCCESS;
00000a  2000              MOVS     r0,#0
                  |L36.12|
;;;83         }
;;;84         else
;;;85         {
;;;86             return ERROR;
;;;87         }
;;;88     }
00000c  4770              BX       lr
                  |L36.14|
00000e  2001              MOVS     r0,#1                 ;86
000010  e7fc              B        |L36.12|
;;;89     #if !defined(SC32f15xx)
                          ENDP

000012  0000              DCW      0x0000
                  |L36.20|
                          DCD      0x40003000

                          AREA ||i.RCC_WaitConfig||, CODE, READONLY, ALIGN=2

                  RCC_WaitConfig PROC
;;;640     */
;;;641    void RCC_WaitConfig ( RCC_Wait_TypeDef RCC_Wait )
000000  b500              PUSH     {lr}
;;;642    {
000002  4602              MOV      r2,r0
;;;643        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;644        /* Check the parameters */
;;;645        assert_param ( IS_RCC_Wait ( RCC_Wait ) );
;;;646    
;;;647        RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
00000a  4806              LDR      r0,|L37.36|
00000c  6940              LDR      r0,[r0,#0x14]
00000e  2103              MOVS     r1,#3
000010  0309              LSLS     r1,r1,#12
000012  4388              BICS     r0,r0,r1
000014  4903              LDR      r1,|L37.36|
000016  6148              STR      r0,[r1,#0x14]
;;;648        RCC->RCC_CFG0 |= RCC_Wait;
000018  4608              MOV      r0,r1
00001a  6940              LDR      r0,[r0,#0x14]
00001c  4310              ORRS     r0,r0,r2
00001e  6148              STR      r0,[r1,#0x14]
;;;649    
;;;650    }
000020  bd00              POP      {pc}
;;;651    /** @defgroup RCC_Group3 Peripheral clocks configuration functions
                          ENDP

000022  0000              DCW      0x0000
                  |L37.36|
                          DCD      0x40003000

;*** Start embedded assembler ***

#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_rcc_c_49e27980____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___15_sc32f1xxx_rcc_c_49e27980____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_rcc_c_49e27980____REVSH|
#line 478
|__asm___15_sc32f1xxx_rcc_c_49e27980____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
