; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: armcc [4d365d]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\sc32f1xxx_twi.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -DSC32f10xx -D__UVISION_VERSION=536 ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_twi.c]
                          THUMB
                          AREA ||i.TWI_AcknowledgeConfig||, CODE, READONLY, ALIGN=2
                  TWI_AcknowledgeConfig PROC
;;;211      */
;;;212    void TWI_AcknowledgeConfig ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;213    {
;;;214        
;;;215        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;216        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;217        if ( NewState != DISABLE )
;;;218        {
;;;219            
;;;220            TWIx->TWI_CON |= TWI_CON_AA;
;;;221        }
;;;222        else
;;;223        {
;;;224            
;;;225            TWIx->TWI_CON &= ( uint16_t ) ~TWI_CON_AA;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L1.12|
000006  2202              MOVS     r2,#2                 ;220
000008  4311              ORRS     r1,r1,r2              ;220
00000a  e001              B        |L1.16|
                  |L1.12|
00000c  4a01              LDR      r2,|L1.20|
00000e  4011              ANDS     r1,r1,r2
                  |L1.16|
000010  6001              STR      r1,[r0,#0]            ;220
;;;226        }
;;;227    }
000012  4770              BX       lr
;;;228    
                          ENDP
                  |L1.20|
                          DCD      0x0000fffd
                          AREA ||i.TWI_ClearFlag||, CODE, READONLY, ALIGN=1
                  TWI_ClearFlag PROC
;;;608     */
;;;609    void TWI_ClearFlag ( TWI_TypeDef* TWIx, TWI_FLAG_TypeDef TWI_FLAG )
000000  6842              LDR      r2,[r0,#4]
;;;610    {
;;;611        
;;;612        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;613        
;;;614        TWIx->TWI_STS |= ( uint16_t ) TWI_FLAG;
000002  430a              ORRS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;615    }
000006  4770              BX       lr
;;;616    
                          ENDP
                          AREA ||i.TWI_Cmd||, CODE, READONLY, ALIGN=2
                  TWI_Cmd PROC
;;;184     */
;;;185    void TWI_Cmd ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;186    {
;;;187        
;;;188        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;189        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;190        if ( NewState != DISABLE )
;;;191        {
;;;192            
;;;193            TWIx->TWI_CON |= TWI_CON_TWEN;
;;;194        }
;;;195        else
;;;196        {
;;;197            
;;;198            TWIx->TWI_CON &= ( uint16_t ) ~TWI_CON_TWEN;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  2280              MOVS     r2,#0x80              ;193
000008  4311              ORRS     r1,r1,r2              ;193
00000a  e001              B        |L3.16|
                  |L3.12|
00000c  4a01              LDR      r2,|L3.20|
00000e  4011              ANDS     r1,r1,r2
                  |L3.16|
000010  6001              STR      r1,[r0,#0]            ;193
;;;199        }
;;;200    }
000012  4770              BX       lr
;;;201    
                          ENDP
                  |L3.20|
                          DCD      0x0000ff7f
                          AREA ||i.TWI_DMACmd||, CODE, READONLY, ALIGN=1
                  TWI_DMACmd PROC
;;;656     */
;;;657    void TWI_DMACmd ( TWI_TypeDef* TWIx, TWI_DMAReq_TypeDef TWI_DMAReq, FunctionalState NewState )
000000  2a00              CMP      r2,#0
;;;658    {
;;;659        
;;;660        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;661        assert_param ( IS_TWI_DMAREQ ( TWI_DMAReq ) );
;;;662        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;663        if ( NewState != DISABLE )
;;;664        {
;;;665            
;;;666            TWIx->TWI_IDE |= TWI_DMAReq;
;;;667        }
;;;668        else
;;;669        {
;;;670            
;;;671            TWIx->TWI_IDE &= ( uint16_t ) ~TWI_DMAReq;
000002  6902              LDR      r2,[r0,#0x10]
000004  d001              BEQ      |L4.10|
000006  430a              ORRS     r2,r2,r1              ;666
000008  e002              B        |L4.16|
                  |L4.10|
00000a  43c9              MVNS     r1,r1
00000c  b289              UXTH     r1,r1
00000e  400a              ANDS     r2,r2,r1
                  |L4.16|
000010  6102              STR      r2,[r0,#0x10]         ;666
;;;672        }
;;;673    }
000012  4770              BX       lr
;;;674    
                          ENDP
                          AREA ||i.TWI_DeInit||, CODE, READONLY, ALIGN=2
                  TWI_DeInit PROC
;;;46      */
;;;47     void TWI_DeInit ( TWI_TypeDef* TWIx )
000000  490c              LDR      r1,|L5.52|
;;;48     {
000002  b510              PUSH     {r4,lr}
;;;49         
;;;50         assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;51         if ( TWIx == TWI0 )
000004  4288              CMP      r0,r1
000006  d108              BNE      |L5.26|
;;;52         {
;;;53             
;;;54             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TWI0, ENABLE );
000008  2101              MOVS     r1,#1
00000a  2010              MOVS     r0,#0x10
00000c  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;55             
;;;56             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TWI0, DISABLE );
000010  2100              MOVS     r1,#0
000012  2010              MOVS     r0,#0x10
000014  f7fffffe          BL       RCC_APB0PeriphResetCmd
                  |L5.24|
;;;57         }
;;;58         else if ( TWIx == TWI1 )
;;;59         {
;;;60     #if !defined (SC32f15xx)
;;;61             
;;;62             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TWI1, ENABLE );
;;;63             
;;;64             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TWI1, DISABLE );
;;;65     #else
;;;66     			    
;;;67         RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI1_TWI1, ENABLE);
;;;68         
;;;69         RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI1_TWI1, DISABLE);		
;;;70     #endif
;;;71     			
;;;72         }
;;;73     }
000018  bd10              POP      {r4,pc}
                  |L5.26|
00001a  4907              LDR      r1,|L5.56|
00001c  4288              CMP      r0,r1                 ;58
00001e  d1fb              BNE      |L5.24|
000020  2101              MOVS     r1,#1                 ;62
000022  2010              MOVS     r0,#0x10              ;62
000024  f7fffffe          BL       RCC_APB1PeriphResetCmd
000028  2100              MOVS     r1,#0                 ;64
00002a  2010              MOVS     r0,#0x10              ;64
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000030  bd10              POP      {r4,pc}
;;;74     
                          ENDP
000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      0x40020060
                  |L5.56|
                          DCD      0x40021060
                          AREA ||i.TWI_GeneralCallCmd||, CODE, READONLY, ALIGN=2
                  TWI_GeneralCallCmd PROC
;;;238      */
;;;239    void TWI_GeneralCallCmd ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;240    {
;;;241        
;;;242        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;243        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;244        if ( NewState != DISABLE )
;;;245        {
;;;246            
;;;247            TWIx->TWI_ADD |= TWI_ADD_GC;
;;;248        }
;;;249        else
;;;250        {
;;;251            
;;;252            TWIx->TWI_ADD &= ( uint16_t ) ~TWI_ADD_GC;
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L6.12|
000006  2201              MOVS     r2,#1                 ;247
000008  4311              ORRS     r1,r1,r2              ;247
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  4a01              LDR      r2,|L6.20|
00000e  4011              ANDS     r1,r1,r2
                  |L6.16|
000010  6081              STR      r1,[r0,#8]            ;247
;;;253        }
;;;254    }
000012  4770              BX       lr
;;;255    
                          ENDP
                  |L6.20|
                          DCD      0x0000fffe
                          AREA ||i.TWI_GenerateSTART||, CODE, READONLY, ALIGN=2
                  TWI_GenerateSTART PROC
;;;340      */
;;;341    void TWI_GenerateSTART ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;342    {
;;;343        
;;;344        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;345        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;346        if ( NewState != DISABLE )
;;;347        {
;;;348            
;;;349            TWIx->TWI_CON |= TWI_CON_STA;
;;;350        }
;;;351        else
;;;352        {
;;;353            
;;;354            TWIx->TWI_CON &= ( uint16_t ) ~TWI_CON_STA;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L7.12|
000006  2220              MOVS     r2,#0x20              ;349
000008  4311              ORRS     r1,r1,r2              ;349
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  4a01              LDR      r2,|L7.20|
00000e  4011              ANDS     r1,r1,r2
                  |L7.16|
000010  6001              STR      r1,[r0,#0]            ;349
;;;355        }
;;;356    }
000012  4770              BX       lr
;;;357    
                          ENDP
                  |L7.20|
                          DCD      0x0000ffdf
                          AREA ||i.TWI_GenerateSTOP||, CODE, READONLY, ALIGN=2
                  TWI_GenerateSTOP PROC
;;;367      */
;;;368    void TWI_GenerateSTOP ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;369    {
;;;370        
;;;371        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;372        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;373        if ( NewState != DISABLE )
;;;374        {
;;;375            
;;;376            TWIx->TWI_CON |= TWI_CON_STO;
;;;377        }
;;;378        else
;;;379        {
;;;380            
;;;381            TWIx->TWI_CON &= ( uint16_t ) ~TWI_CON_STO;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L8.12|
000006  2210              MOVS     r2,#0x10              ;376
000008  4311              ORRS     r1,r1,r2              ;376
00000a  e001              B        |L8.16|
                  |L8.12|
00000c  4a01              LDR      r2,|L8.20|
00000e  4011              ANDS     r1,r1,r2
                  |L8.16|
000010  6001              STR      r1,[r0,#0]            ;376
;;;382        }
;;;383    }
000012  4770              BX       lr
;;;384    
                          ENDP
                  |L8.20|
                          DCD      0x0000ffef
                          AREA ||i.TWI_GetFlagStatus||, CODE, READONLY, ALIGN=1
                  TWI_GetFlagStatus PROC
;;;579     */
;;;580    FlagStatus TWI_GetFlagStatus ( TWI_TypeDef* TWIx, TWI_FLAG_TypeDef TWI_FLAG )
000000  4602              MOV      r2,r0
;;;581    {
;;;582        ITStatus bitstatus = RESET;
;;;583        
;;;584        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;585        assert_param ( IS_TWI_FLAG ( TWI_FLAG ) );
;;;586        if ( ( TWIx->TWI_STS & TWI_FLAG ) != ( uint16_t ) RESET )
000002  6852              LDR      r2,[r2,#4]
000004  2000              MOVS     r0,#0                 ;582
000006  420a              TST      r2,r1
000008  d000              BEQ      |L9.12|
;;;587        {
;;;588            bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;589        }
;;;590        else
;;;591        {
;;;592            bitstatus = RESET;
;;;593        }
;;;594        return bitstatus;
;;;595    }
00000c  4770              BX       lr
;;;596    
                          ENDP
                          AREA ||i.TWI_GetNbytes||, CODE, READONLY, ALIGN=1
                  TWI_GetNbytes PROC
;;;306      */
;;;307    uint8_t TWI_GetNbytes ( TWI_TypeDef* TWIx )
000000  6840              LDR      r0,[r0,#4]
;;;308    {
;;;309        uint8_t tmpnum;
;;;310    
;;;311        
;;;312        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;313    
;;;314        tmpnum = ( uint8_t ) ( TWIx->TWI_STS >> TWI_STS_NBYTES_Pos );
000002  0200              LSLS     r0,r0,#8
000004  0e00              LSRS     r0,r0,#24
;;;315    
;;;316        return tmpnum;
;;;317    }
000006  4770              BX       lr
;;;318    
                          ENDP
                          AREA ||i.TWI_GetStateMachine||, CODE, READONLY, ALIGN=1
                  TWI_GetStateMachine PROC
;;;635     */
;;;636    TWI_StateMachine_TypeDef TWI_GetStateMachine ( TWI_TypeDef* TWIx )
000000  6840              LDR      r0,[r0,#4]
;;;637    {
;;;638        
;;;639        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;640    
;;;641        return ( TWI_StateMachine_TypeDef ) ( TWIx->TWI_STS & TWI_STS_STATE );
000002  2107              MOVS     r1,#7
000004  0209              LSLS     r1,r1,#8
000006  4008              ANDS     r0,r0,r1
;;;642    }
000008  4770              BX       lr
;;;643    
                          ENDP
                          AREA ||i.TWI_ITConfig||, CODE, READONLY, ALIGN=1
                  TWI_ITConfig PROC
;;;542     */
;;;543    void TWI_ITConfig ( TWI_TypeDef* TWIx, uint16_t TWI_IT, FunctionalState NewState )
000000  2a00              CMP      r2,#0
;;;544    {
;;;545        
;;;546        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;547        assert_param ( IS_TWI_IT ( TWI_IT ) );
;;;548        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;549        if ( NewState != DISABLE )
;;;550        {
;;;551            
;;;552            TWIx->TWI_IDE |= TWI_IT;
;;;553        }
;;;554        else
;;;555        {
;;;556            
;;;557            TWIx->TWI_IDE &= ( uint16_t ) ~TWI_IT;
000002  6902              LDR      r2,[r0,#0x10]
000004  d001              BEQ      |L12.10|
000006  430a              ORRS     r2,r2,r1              ;552
000008  e002              B        |L12.16|
                  |L12.10|
00000a  43c9              MVNS     r1,r1
00000c  b289              UXTH     r1,r1
00000e  400a              ANDS     r2,r2,r1
                  |L12.16|
000010  6102              STR      r2,[r0,#0x10]         ;552
;;;558        }
;;;559    }
000012  4770              BX       lr
;;;560    
                          ENDP
                          AREA ||i.TWI_Init||, CODE, READONLY, ALIGN=2
                  TWI_Init PROC
;;;98      */
;;;99     void TWI_Init ( TWI_TypeDef* TWIx, TWI_InitTypeDef* TWI_InitStruct )
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101    #if !defined (SC32f15xx)
;;;102        uint32_t tmpreg;
;;;103        
;;;104        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;105        assert_param ( IS_TWI_ACK ( TWI_InitStruct->TWI_Ack ) );
;;;106        assert_param ( IS_TWI_PRESCALER ( TWI_InitStruct->TWI_Prescaler ) );
;;;107        assert_param ( IS_TWI_STRETCH ( TWI_InitStruct->TWI_Stretch ) );
;;;108        assert_param ( IS_TWI_GENERALCALL ( TWI_InitStruct->TWI_GeneralCall ) );
;;;109        
;;;110        
;;;111        tmpreg = TWIx->TWI_CON;
000002  6803              LDR      r3,[r0,#0]
;;;112        
;;;113        tmpreg &= ( uint32_t ) ~ ( TWI_CON_AA | TWI_CON_SPOS | TWI_CON_STRETCH );
000004  4a09              LDR      r2,|L13.44|
;;;114        
;;;115        
;;;116        
;;;117        
;;;118        tmpreg |= ( uint32_t ) ( TWI_InitStruct->TWI_Ack | TWI_InitStruct->TWI_Prescaler |
000006  884c              LDRH     r4,[r1,#2]
000008  4013              ANDS     r3,r3,r2              ;113
00000a  880a              LDRH     r2,[r1,#0]
00000c  4322              ORRS     r2,r2,r4
00000e  888c              LDRH     r4,[r1,#4]
000010  431c              ORRS     r4,r4,r3
000012  4322              ORRS     r2,r2,r4
;;;119                                 TWI_InitStruct->TWI_Stretch );
;;;120        
;;;121        TWIx->TWI_CON = tmpreg;
000014  6002              STR      r2,[r0,#0]
;;;122        
;;;123        
;;;124        tmpreg = TWIx->TWI_ADD;
000016  6882              LDR      r2,[r0,#8]
;;;125        
;;;126        tmpreg &= ( uint32_t ) ~ ( TWI_ADD_GC | TWI_ADD_TWA );
;;;127        
;;;128        
;;;129        
;;;130        tmpreg |= ( uint32_t ) ( TWI_InitStruct->TWI_GeneralCall | ( ( TWI_InitStruct->TWI_SlaveAdress << 1 ) & 0xFE ) );
000018  88cb              LDRH     r3,[r1,#6]
00001a  7a09              LDRB     r1,[r1,#8]
00001c  0a12              LSRS     r2,r2,#8              ;126
00001e  0212              LSLS     r2,r2,#8              ;126
000020  0649              LSLS     r1,r1,#25
000022  0e09              LSRS     r1,r1,#24
000024  4311              ORRS     r1,r1,r2
000026  430b              ORRS     r3,r3,r1
;;;131    
;;;132        
;;;133        TWIx->TWI_ADD = tmpreg;
000028  6083              STR      r3,[r0,#8]
;;;134    #else
;;;135      uint32_t tmpreg;
;;;136      
;;;137      assert_param(IS_TWI_ALL_PERIPH(TWIx));
;;;138      assert_param(IS_TWI_ACK(TWI_InitStruct->TWI_Ack));
;;;139      assert_param(IS_TWI_PRESCALER(TWI_InitStruct->TWI_Prescaler));
;;;140      assert_param(IS_TWI_STRETCH(TWI_InitStruct->TWI_Stretch));
;;;141      assert_param(IS_TWI_GENERALCALL(TWI_InitStruct->TWI_GeneralCall));
;;;142    	
;;;143    
;;;144    	
;;;145      tmpreg = TWIx->TWI_CON;
;;;146      
;;;147      tmpreg &= (uint32_t) ~(TWI_CON_AA | TWI_CON_SPOS | TWI_CON_STRETCH |TWI_CON_TWCK);
;;;148      
;;;149      
;;;150      
;;;151      
;;;152      tmpreg |= (uint32_t)(TWI_InitStruct->TWI_Ack | TWI_InitStruct->TWI_Prescaler |
;;;153                           TWI_InitStruct->TWI_Stretch);
;;;154      if(TWIx == TWI1)
;;;155    	{
;;;156    		tmpreg &=~(0x00<<SPI1_TWI1_CON_MODE_Pos);
;;;157    	}
;;;158      
;;;159      TWIx->TWI_CON = tmpreg;
;;;160      
;;;161      
;;;162      tmpreg = TWIx->TWI_ADD;
;;;163      
;;;164      tmpreg &= (uint32_t) ~(TWI_ADD_GC | TWI_ADD_TWA);
;;;165      
;;;166      
;;;167      
;;;168      tmpreg |= (uint32_t)(TWI_InitStruct->TWI_GeneralCall |  ( ( TWI_InitStruct->TWI_SlaveAdress << 1 ) & 0xFE ) );
;;;169    
;;;170      
;;;171      TWIx->TWI_ADD = tmpreg;
;;;172    #endif
;;;173    }
00002a  bd10              POP      {r4,pc}
;;;174    
                          ENDP
                  |L13.44|
                          DCD      0xffff3ffc
                          AREA ||i.TWI_PinRemapConfig||, CODE, READONLY, ALIGN=1
                  TWI_PinRemapConfig PROC
;;;475     */
;;;476    void TWI_PinRemapConfig ( TWI_TypeDef* TWIx, TWI_PinRemap_TypeDef TWI_Remap )
000000  6802              LDR      r2,[r0,#0]
;;;477    {
;;;478    #if !defined (SC32f15xx)
;;;479        uint32_t tmpreg ;
;;;480        
;;;481        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;482        if ( TWIx == TWI0 )
;;;483        {
;;;484            assert_param ( IS_TWI_LIST1_PINREMAP ( TWI_Remap ) );
;;;485        }
;;;486        else
;;;487        {
;;;488            assert_param ( IS_TWI_LIST2_PINREMAP ( TWI_Remap ) );
;;;489        }
;;;490    
;;;491        tmpreg = TWIx->TWI_CON;
;;;492    
;;;493        tmpreg &= ( uint32_t ) ( ~TWI_CON_SPOS );
000002  2303              MOVS     r3,#3
000004  039b              LSLS     r3,r3,#14
000006  439a              BICS     r2,r2,r3
;;;494    
;;;495        tmpreg |= TWI_Remap;
000008  430a              ORRS     r2,r2,r1
;;;496    
;;;497        TWIx->TWI_CON = tmpreg;
00000a  6002              STR      r2,[r0,#0]
;;;498    #else
;;;499      uint32_t tmpreg ;
;;;500      
;;;501      assert_param(IS_TWI_ALL_PERIPH(TWIx));
;;;502      
;;;503    	
;;;504    
;;;505      tmpreg = TWIx->TWI_CON;
;;;506    
;;;507      tmpreg &= (uint32_t)(~TWI_CON_SPOS);
;;;508    
;;;509      tmpreg |= TWI_Remap;
;;;510    
;;;511      TWIx->TWI_CON = tmpreg;
;;;512    #endif	
;;;513    }
00000c  4770              BX       lr
;;;514    
                          ENDP
                          AREA ||i.TWI_ReceiveData||, CODE, READONLY, ALIGN=1
                  TWI_ReceiveData PROC
;;;445     */
;;;446    uint16_t TWI_ReceiveData ( TWI_TypeDef* TWIx )
000000  68c0              LDR      r0,[r0,#0xc]
;;;447    {
;;;448        
;;;449        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;450        
;;;451        return ( uint16_t ) TWIx->TWI_DATA;
000002  b280              UXTH     r0,r0
;;;452    }
000004  4770              BX       lr
;;;453    
                          ENDP
                          AREA ||i.TWI_Send7bitAddress||, CODE, READONLY, ALIGN=1
                  TWI_Send7bitAddress PROC
;;;395      */
;;;396    void TWI_Send7bitAddress ( TWI_TypeDef* TWIx, uint8_t Address, TWI_Command_TypeDef TWI_Command )
000000  0649              LSLS     r1,r1,#25
;;;397    {
;;;398        
;;;399        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;400        assert_param ( IS_TWI_COMMAND ( TWI_Command ) );
;;;401        Address = ( Address << 1 );
000002  0e09              LSRS     r1,r1,#24
;;;402        
;;;403        if ( TWI_Command != TWI_Command_Write )
000004  2a00              CMP      r2,#0
000006  d002              BEQ      |L16.14|
;;;404        {
;;;405            
;;;406            Address |= TWI_Command_Read;
000008  2201              MOVS     r2,#1
00000a  4311              ORRS     r1,r1,r2
00000c  e001              B        |L16.18|
                  |L16.14|
;;;407        }
;;;408        else
;;;409        {
;;;410            
;;;411            Address &= ( uint8_t ) ~ ( ( uint8_t ) TWI_Command_Read );
00000e  0849              LSRS     r1,r1,#1
000010  0049              LSLS     r1,r1,#1
                  |L16.18|
;;;412        }
;;;413    
;;;414        
;;;415        TWIx->TWI_DATA = Address;
000012  60c1              STR      r1,[r0,#0xc]
;;;416    }
000014  4770              BX       lr
;;;417    
                          ENDP
                          AREA ||i.TWI_SendData||, CODE, READONLY, ALIGN=1
                  TWI_SendData PROC
;;;430     */
;;;431    void TWI_SendData ( TWI_TypeDef* TWIx, uint8_t Data )
000000  60c1              STR      r1,[r0,#0xc]
;;;432    {
;;;433        
;;;434        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;435        
;;;436        TWIx->TWI_DATA = Data;
;;;437    }
000002  4770              BX       lr
;;;438    
                          ENDP
                          AREA ||i.TWI_SetNbytes||, CODE, READONLY, ALIGN=1
                  TWI_SetNbytes PROC
;;;291      */
;;;292    void TWI_SetNbytes ( TWI_TypeDef* TWIx, uint8_t Nbytes )
000000  0409              LSLS     r1,r1,#16
;;;293    {
;;;294        
;;;295        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;296    
;;;297        TWIx->TWI_STS = ( uint32_t ) ( Nbytes << TWI_STS_NBYTES_Pos );
000002  6041              STR      r1,[r0,#4]
;;;298    }
000004  4770              BX       lr
;;;299    
                          ENDP
                          AREA ||i.TWI_StretchClockConfig||, CODE, READONLY, ALIGN=2
                  TWI_StretchClockConfig PROC
;;;265      */
;;;266    void TWI_StretchClockConfig ( TWI_TypeDef* TWIx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;267    {
;;;268        
;;;269        assert_param ( IS_TWI_ALL_PERIPH ( TWIx ) );
;;;270        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;271        if ( NewState == DISABLE )
;;;272        {
;;;273            
;;;274            TWIx->TWI_CON |= TWI_CON_STRETCH;
;;;275        }
;;;276        else
;;;277        {
;;;278            
;;;279            TWIx->TWI_CON &= ( uint16_t ) ~ ( ( uint16_t ) TWI_CON_STRETCH );
000002  6801              LDR      r1,[r0,#0]
000004  d003              BEQ      |L19.14|
000006  4a03              LDR      r2,|L19.20|
000008  4011              ANDS     r1,r1,r2
                  |L19.10|
00000a  6001              STR      r1,[r0,#0]            ;274
;;;280        }
;;;281    }
00000c  4770              BX       lr
                  |L19.14|
00000e  2201              MOVS     r2,#1                 ;274
000010  4311              ORRS     r1,r1,r2              ;274
000012  e7fa              B        |L19.10|
;;;282    
                          ENDP
                  |L19.20|
                          DCD      0x0000fffe
                          AREA ||i.TWI_StructInit||, CODE, READONLY, ALIGN=1
                  TWI_StructInit PROC
;;;79       */
;;;80     void TWI_StructInit ( TWI_InitTypeDef* TWI_InitStruct )
000000  2102              MOVS     r1,#2
;;;81     {
;;;82         
;;;83         TWI_InitStruct->TWI_Ack = TWI_Ack_Enable;
000002  8001              STRH     r1,[r0,#0]
;;;84         TWI_InitStruct->TWI_Prescaler = 0x00;
000004  2100              MOVS     r1,#0
000006  8041              STRH     r1,[r0,#2]
;;;85         TWI_InitStruct->TWI_Stretch = 0;
000008  8081              STRH     r1,[r0,#4]
;;;86     
;;;87         TWI_InitStruct->TWI_GeneralCall = TWI_GeneralCall_Disable;
00000a  80c1              STRH     r1,[r0,#6]
;;;88         TWI_InitStruct->TWI_SlaveAdress = 0x00;
00000c  6081              STR      r1,[r0,#8]
;;;89     }
00000e  4770              BX       lr
;;;90     
                          ENDP
;*** Start embedded assembler ***
#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_twi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_twi_c_24100672____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___15_sc32f1xxx_twi_c_24100672____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_twi_c_24100672____REVSH|
#line 478
|__asm___15_sc32f1xxx_twi_c_24100672____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***
