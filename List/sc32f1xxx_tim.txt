; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\sc32f1xxx_tim.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\sc32f1xxx_tim.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\sc32f1xxx_tim.crf ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_tim.c]
                          THUMB
                          AREA ||i.TIM_ClearFlag||, CODE, READONLY, ALIGN=1
                  TIM_ClearFlag PROC
;;;995     */
;;;996    void TIM_ClearFlag ( TIM_TypeDef* TIMx, uint16_t TIM_FLAG )
000000  60c1              STR      r1,[r0,#0xc]
;;;997    {
;;;998        
;;;999        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;1000   
;;;1001       
;;;1002       TIMx->TIM_STS = ( uint16_t ) TIM_FLAG;
;;;1003   }
000002  4770              BX       lr
;;;1004   
                          ENDP
                          AREA ||i.TIM_ClockOutputCmd||, CODE, READONLY, ALIGN=1
                  TIM_ClockOutputCmd PROC
;;;807     */
;;;808    void TIM_ClockOutputCmd ( TIM_TypeDef* TIMx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;809    {
;;;810        
;;;811        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;812        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;813    
;;;814        if ( NewState != DISABLE )
000002  d005              BEQ      |L2.16|
;;;815        {
;;;816            
;;;817            TIMx->TIM_CON |= TIM_CON_TXOE;
000004  6802              LDR      r2,[r0,#0]
000006  2301              MOVS     r3,#1
000008  03db              LSLS     r3,r3,#15
00000a  431a              ORRS     r2,r2,r3
00000c  6002              STR      r2,[r0,#0]
00000e  e004              B        |L2.26|
                  |L2.16|
;;;818        }
;;;819        else
;;;820        {
;;;821            
;;;822            TIMx->TIM_CON &= ( uint32_t ) ~TIM_CON_TXOE;
000010  6802              LDR      r2,[r0,#0]
000012  2301              MOVS     r3,#1
000014  03db              LSLS     r3,r3,#15
000016  439a              BICS     r2,r2,r3
000018  6002              STR      r2,[r0,#0]
                  |L2.26|
;;;823        }
;;;824    }
00001a  4770              BX       lr
;;;825    
                          ENDP
                          AREA ||i.TIM_Cmd||, CODE, READONLY, ALIGN=2
                  TIM_Cmd PROC
;;;201     */
;;;202    void TIM_Cmd ( TIM_TypeDef* TIMx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;203    {
;;;204        
;;;205        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;206        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;207    
;;;208        if ( NewState != DISABLE )
000002  d004              BEQ      |L3.14|
;;;209        {
;;;210            
;;;211            TIMx->TIM_CON |= TIM_CON_TR;
000004  6802              LDR      r2,[r0,#0]
000006  2380              MOVS     r3,#0x80
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L3.22|
                  |L3.14|
;;;212        }
;;;213        else
;;;214        {
;;;215            
;;;216            TIMx->TIM_CON &= ( uint16_t ) ~TIM_CON_TR;
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L3.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L3.22|
;;;217        }
;;;218    }
000016  4770              BX       lr
;;;219    
                          ENDP
                  |L3.24|
                          DCD      0x0000ff7f
                          AREA ||i.TIM_DMACmd||, CODE, READONLY, ALIGN=1
                  TIM_DMACmd PROC
;;;1028    */
;;;1029   void TIM_DMACmd ( TIM_TypeDef* TIMx, uint16_t TIM_DMAReq, FunctionalState NewState )
000000  b510              PUSH     {r4,lr}
;;;1030   {
;;;1031       
;;;1032       assert_param ( IS_TIM_DMA_PERIPH ( TIMx ) );
;;;1033       assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;1034   
;;;1035       if ( NewState != DISABLE )
000002  2a00              CMP      r2,#0
000004  d003              BEQ      |L4.14|
;;;1036       {
;;;1037           
;;;1038           TIMx->TIM_IDE |= TIM_DMAReq;
000006  6983              LDR      r3,[r0,#0x18]
000008  430b              ORRS     r3,r3,r1
00000a  6183              STR      r3,[r0,#0x18]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;1039       }
;;;1040       else
;;;1041       {
;;;1042           
;;;1043           TIMx->TIM_IDE &= ( uint16_t ) ~TIM_DMAReq;
00000e  6983              LDR      r3,[r0,#0x18]
000010  43cc              MVNS     r4,r1
000012  b2a4              UXTH     r4,r4
000014  4023              ANDS     r3,r3,r4
000016  6183              STR      r3,[r0,#0x18]
                  |L4.24|
;;;1044       }
;;;1045   }
000018  bd10              POP      {r4,pc}
;;;1046   
                          ENDP
                          AREA ||i.TIM_DeInit||, CODE, READONLY, ALIGN=2
                  TIM_DeInit PROC
;;;56      */
;;;57     void TIM_DeInit ( TIM_TypeDef* TIMx )
000000  b510              PUSH     {r4,lr}
;;;58     {
000002  4604              MOV      r4,r0
;;;59         assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;60     
;;;61         if ( TIMx == TIM0 )
000004  4832              LDR      r0,|L5.208|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L5.28|
;;;62         {
;;;63             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TIM0, ENABLE );
00000a  2101              MOVS     r1,#1
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;64             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TIM0, DISABLE );
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RCC_APB0PeriphResetCmd
00001a  e058              B        |L5.206|
                  |L5.28|
;;;65         }
;;;66         else if ( TIMx == TIM1 )
00001c  482c              LDR      r0,|L5.208|
00001e  3040              ADDS     r0,r0,#0x40
000020  4284              CMP      r4,r0
000022  d108              BNE      |L5.54|
;;;67         {
;;;68             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TIM1, ENABLE );
000024  2101              MOVS     r1,#1
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;69             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TIM1, DISABLE );
00002c  2100              MOVS     r1,#0
00002e  2002              MOVS     r0,#2
000030  f7fffffe          BL       RCC_APB0PeriphResetCmd
000034  e04b              B        |L5.206|
                  |L5.54|
;;;70         }
;;;71     #if !defined(SC32f15xx)
;;;72         else if ( TIMx == TIM2 )
000036  4826              LDR      r0,|L5.208|
000038  3080              ADDS     r0,r0,#0x80
00003a  4284              CMP      r4,r0
00003c  d108              BNE      |L5.80|
;;;73         {
;;;74             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TIM2, ENABLE );
00003e  2101              MOVS     r1,#1
000040  2004              MOVS     r0,#4
000042  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;75             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TIM2, DISABLE );
000046  2100              MOVS     r1,#0
000048  2004              MOVS     r0,#4
00004a  f7fffffe          BL       RCC_APB0PeriphResetCmd
00004e  e03e              B        |L5.206|
                  |L5.80|
;;;76         }
;;;77     
;;;78         else if ( TIMx == TIM3 )
000050  481f              LDR      r0,|L5.208|
000052  30c0              ADDS     r0,r0,#0xc0
000054  4284              CMP      r4,r0
000056  d108              BNE      |L5.106|
;;;79         {
;;;80             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TIM3, ENABLE );
000058  2101              MOVS     r1,#1
00005a  2008              MOVS     r0,#8
00005c  f7fffffe          BL       RCC_APB0PeriphResetCmd
;;;81             RCC_APB0PeriphResetCmd ( RCC_APB0Periph_TIM3, DISABLE );
000060  2100              MOVS     r1,#0
000062  2008              MOVS     r0,#8
000064  f7fffffe          BL       RCC_APB0PeriphResetCmd
000068  e031              B        |L5.206|
                  |L5.106|
;;;82         }
;;;83     #else
;;;84       else if(TIMx == TIM2)
;;;85       {
;;;86         RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;87         RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
;;;88       }
;;;89       else if(TIMx == TIM3)
;;;90       {
;;;91         RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
;;;92         RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
;;;93       }
;;;94     #endif	
;;;95     #if !defined(SC32f15xx)
;;;96         else if ( TIMx == TIM4 )
00006a  481a              LDR      r0,|L5.212|
00006c  4284              CMP      r4,r0
00006e  d108              BNE      |L5.130|
;;;97         {
;;;98             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TIM4, ENABLE );
000070  2101              MOVS     r1,#1
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;99             RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TIM4, DISABLE );
000078  2100              MOVS     r1,#0
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000080  e025              B        |L5.206|
                  |L5.130|
;;;100        }
;;;101        else if ( TIMx == TIM5 )
000082  4814              LDR      r0,|L5.212|
000084  3040              ADDS     r0,r0,#0x40
000086  4284              CMP      r4,r0
000088  d108              BNE      |L5.156|
;;;102        {
;;;103            RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TIM5, ENABLE );
00008a  2101              MOVS     r1,#1
00008c  2002              MOVS     r0,#2
00008e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;104            RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TIM5, DISABLE );
000092  2100              MOVS     r1,#0
000094  2002              MOVS     r0,#2
000096  f7fffffe          BL       RCC_APB1PeriphResetCmd
00009a  e018              B        |L5.206|
                  |L5.156|
;;;105        }
;;;106        else if ( TIMx == TIM6 )
00009c  480d              LDR      r0,|L5.212|
00009e  3080              ADDS     r0,r0,#0x80
0000a0  4284              CMP      r4,r0
0000a2  d108              BNE      |L5.182|
;;;107        {
;;;108            RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TIM6, ENABLE );
0000a4  2101              MOVS     r1,#1
0000a6  2004              MOVS     r0,#4
0000a8  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;109            RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TIM6, DISABLE );
0000ac  2100              MOVS     r1,#0
0000ae  2004              MOVS     r0,#4
0000b0  f7fffffe          BL       RCC_APB1PeriphResetCmd
0000b4  e00b              B        |L5.206|
                  |L5.182|
;;;110        }
;;;111        else if ( TIMx == TIM7 )
0000b6  4807              LDR      r0,|L5.212|
0000b8  30c0              ADDS     r0,r0,#0xc0
0000ba  4284              CMP      r4,r0
0000bc  d107              BNE      |L5.206|
;;;112        {
;;;113            RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TIM7, ENABLE );
0000be  2101              MOVS     r1,#1
0000c0  2008              MOVS     r0,#8
0000c2  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;114            RCC_APB1PeriphResetCmd ( RCC_APB1Periph_TIM7, DISABLE );
0000c6  2100              MOVS     r1,#0
0000c8  2008              MOVS     r0,#8
0000ca  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L5.206|
;;;115        }
;;;116    #endif
;;;117    }
0000ce  bd10              POP      {r4,pc}
;;;118    
                          ENDP
                  |L5.208|
                          DCD      0x40020100
                  |L5.212|
                          DCD      0x40021100
                          AREA ||i.TIM_GetAutoreload||, CODE, READONLY, ALIGN=1
                  TIM_GetAutoreload PROC
;;;316     */
;;;317    uint16_t TIM_GetAutoreload ( TIM_TypeDef* TIMx )
000000  4601              MOV      r1,r0
;;;318    {
;;;319        
;;;320        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;321    
;;;322        
;;;323        return TIMx->TIM_RLD;
000002  6888              LDR      r0,[r1,#8]
000004  b280              UXTH     r0,r0
;;;324    }
000006  4770              BX       lr
;;;325    
                          ENDP
                          AREA ||i.TIM_GetCounter||, CODE, READONLY, ALIGN=1
                  TIM_GetCounter PROC
;;;263     */
;;;264    uint32_t TIM_GetCounter ( TIM_TypeDef* TIMx )
000000  4601              MOV      r1,r0
;;;265    {
;;;266        
;;;267        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;268    
;;;269        
;;;270        return TIMx->TIM_CNT;
000002  6848              LDR      r0,[r1,#4]
;;;271    }
000004  4770              BX       lr
;;;272    
                          ENDP
                          AREA ||i.TIM_GetFailingCapture||, CODE, READONLY, ALIGN=1
                  TIM_GetFailingCapture PROC
;;;570      */
;;;571    uint32_t TIM_GetFailingCapture ( TIM_TypeDef* TIMx )
000000  4601              MOV      r1,r0
;;;572    {
;;;573        
;;;574        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;575    
;;;576        
;;;577        return TIMx->TIM_PDTB_FCAP;
000002  6948              LDR      r0,[r1,#0x14]
;;;578    }
000004  4770              BX       lr
;;;579    
                          ENDP
                          AREA ||i.TIM_GetFlagStatus||, CODE, READONLY, ALIGN=1
                  TIM_GetFlagStatus PROC
;;;956     */
;;;957    FlagStatus TIM_GetFlagStatus ( TIM_TypeDef* TIMx, TIM_Flag_TypeDef TIM_FLAG )
000000  4602              MOV      r2,r0
;;;958    {
;;;959        FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;960        
;;;961        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;962        assert_param ( IS_GET_TIM_FLAG ( TIM_FLAG ) );
;;;963    
;;;964        if ( ( TIMx->TIM_STS & TIM_FLAG ) != ( uint16_t ) RESET )
000004  68d3              LDR      r3,[r2,#0xc]
000006  400b              ANDS     r3,r3,r1
000008  2b00              CMP      r3,#0
00000a  d001              BEQ      |L9.16|
;;;965        {
;;;966            bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L9.18|
                  |L9.16|
;;;967        }
;;;968        else
;;;969        {
;;;970            bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L9.18|
;;;971        }
;;;972        return bitstatus;
;;;973    }
000012  4770              BX       lr
;;;974    
                          ENDP
                          AREA ||i.TIM_GetPrescaler||, CODE, READONLY, ALIGN=1
                  TIM_GetPrescaler PROC
;;;390     */
;;;391    TIM_Prescaler_TypeDef TIM_GetPrescaler ( TIM_TypeDef* TIMx )
000000  4601              MOV      r1,r0
;;;392    {
;;;393        
;;;394        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;395    
;;;396        
;;;397        return ( TIM_Prescaler_TypeDef ) ( TIMx->TIM_CON & TIM_CON_TIMCLK );
000002  6808              LDR      r0,[r1,#0]
000004  2207              MOVS     r2,#7
000006  0212              LSLS     r2,r2,#8
000008  4010              ANDS     r0,r0,r2
;;;398    }
00000a  4770              BX       lr
;;;399    
                          ENDP
                          AREA ||i.TIM_GetRisingCapture||, CODE, READONLY, ALIGN=1
                  TIM_GetRisingCapture PROC
;;;544      */
;;;545    uint32_t TIM_GetRisingCapture ( TIM_TypeDef* TIMx )
000000  4601              MOV      r1,r0
;;;546    {
;;;547        
;;;548        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;549    
;;;550        
;;;551        return TIMx->TIM_PDTA_RCAP;
000002  6908              LDR      r0,[r1,#0x10]
;;;552    }
000004  4770              BX       lr
;;;553    
                          ENDP
                          AREA ||i.TIM_ICCmd||, CODE, READONLY, ALIGN=2
                  TIM_ICCmd PROC
;;;509     */
;;;510    void TIM_ICCmd ( TIM_TypeDef* TIMx, FunctionalState NewState )
000000  2900              CMP      r1,#0
;;;511    {
;;;512        
;;;513        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;514        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;515    
;;;516        if ( NewState != DISABLE )
000002  d004              BEQ      |L12.14|
;;;517        {
;;;518            
;;;519            TIMx->TIM_CON |= TIM_CON_CPRL;
000004  6802              LDR      r2,[r0,#0]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  6002              STR      r2,[r0,#0]
00000c  e003              B        |L12.22|
                  |L12.14|
;;;520        }
;;;521        else
;;;522        {
;;;523            
;;;524            TIMx->TIM_CON &= ( uint16_t ) ~TIM_CON_CPRL;
00000e  6802              LDR      r2,[r0,#0]
000010  4b01              LDR      r3,|L12.24|
000012  401a              ANDS     r2,r2,r3
000014  6002              STR      r2,[r0,#0]
                  |L12.22|
;;;525        }
;;;526    }
000016  4770              BX       lr
;;;527    
                          ENDP
                  |L12.24|
                          DCD      0x0000fffe
                          AREA ||i.TIM_ICInit||, CODE, READONLY, ALIGN=2
                  TIM_ICInit PROC
;;;432     */
;;;433    void TIM_ICInit ( TIM_TypeDef* TIMx, TIM_IC_InitTypeDef* TIM_IC_InitStruct )
000000  b510              PUSH     {r4,lr}
;;;434    {
;;;435        uint16_t tmpreg;
;;;436        
;;;437    
;;;438    #if defined(SC32f10xx) || defined(SC32f12xx)
;;;439        if ( TIM_IC_InitStruct->TIM_FICPIN == TIM_FICPin_TnEx )
000002  884b              LDRH     r3,[r1,#2]
000004  2b30              CMP      r3,#0x30
000006  d100              BNE      |L13.10|
;;;440            assert_param ( IS_TIM_TNEX_PERIPH ( TIMx ) );
000008  bf00              NOP      
                  |L13.10|
;;;441        if ( ( TIM_IC_InitStruct->TIM_FICPIN == TIM_FICPin_Tn ) ||
00000a  884b              LDRH     r3,[r1,#2]
00000c  2b08              CMP      r3,#8
00000e  d002              BEQ      |L13.22|
;;;442                ( TIM_IC_InitStruct->TIM_RICPIN == TIM_RICPin_Tn ) )
000010  880b              LDRH     r3,[r1,#0]
000012  2b04              CMP      r3,#4
000014  d100              BNE      |L13.24|
                  |L13.22|
;;;443            assert_param ( IS_TIM_TN_PERIPH ( TIMx ) );
000016  bf00              NOP      
                  |L13.24|
;;;444    #elif defined(SC32f11xx)|| defined(SC32f15xx)
;;;445        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;446    #endif
;;;447    
;;;448    
;;;449        
;;;450        tmpreg = ( uint16_t ) TIMx->TIM_CON;
000018  6803              LDR      r3,[r0,#0]
00001a  b29a              UXTH     r2,r3
;;;451    
;;;452        
;;;453        tmpreg &= ~ ( TIM_CON_EXENR | TIM_CON_EXENF | TIM_CON_FSEL | TIM_CON_EXENX );
00001c  243c              MOVS     r4,#0x3c
00001e  4613              MOV      r3,r2
000020  43a3              BICS     r3,r3,r4
000022  461a              MOV      r2,r3
;;;454    
;;;455    
;;;456    #if defined(SC32f10xx)
;;;457        if ( TIMx == TIM0 )
000024  4b07              LDR      r3,|L13.68|
000026  4298              CMP      r0,r3
000028  d105              BNE      |L13.54|
;;;458        {
;;;459            if ( TIM_IC_InitStruct->TIM_FICPIN != TIM_FICPin_Tn )
00002a  884b              LDRH     r3,[r1,#2]
00002c  2b08              CMP      r3,#8
00002e  d006              BEQ      |L13.62|
;;;460            {
;;;461                tmpreg |= TIM_IC_InitStruct->TIM_FICPIN;
000030  884b              LDRH     r3,[r1,#2]
000032  431a              ORRS     r2,r2,r3
000034  e003              B        |L13.62|
                  |L13.54|
;;;462            }
;;;463    
;;;464        }
;;;465        else
;;;466        {
;;;467            tmpreg |= ( TIM_IC_InitStruct->TIM_FICPIN | TIM_IC_InitStruct->TIM_RICPIN );
000036  884b              LDRH     r3,[r1,#2]
000038  880c              LDRH     r4,[r1,#0]
00003a  4323              ORRS     r3,r3,r4
00003c  431a              ORRS     r2,r2,r3
                  |L13.62|
;;;468        }
;;;469    #elif defined(SC32f11xx) || defined(SC32f12xx) ||defined(SC32f15xx)
;;;470    
;;;471        tmpreg |= ( TIM_IC_InitStruct->TIM_FICPIN | TIM_IC_InitStruct->TIM_RICPIN );
;;;472    #endif
;;;473    
;;;474    
;;;475        TIMx->TIM_CON = ( uint32_t ) tmpreg;
00003e  6002              STR      r2,[r0,#0]
;;;476    }
000040  bd10              POP      {r4,pc}
;;;477    
                          ENDP
000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      0x40020100
                          AREA ||i.TIM_ICStructInit||, CODE, READONLY, ALIGN=1
                  TIM_ICStructInit PROC
;;;482      */
;;;483    void TIM_ICStructInit ( TIM_IC_InitTypeDef* TIM_IC_InitStruct )
000000  2100              MOVS     r1,#0
;;;484    {
;;;485        
;;;486        TIM_IC_InitStruct->TIM_FICPIN = TIM_FICPin_Disable;
000002  8041              STRH     r1,[r0,#2]
;;;487        TIM_IC_InitStruct->TIM_RICPIN = TIM_RICPin_Disable;
000004  8001              STRH     r1,[r0,#0]
;;;488    }
000006  4770              BX       lr
;;;489    
                          ENDP
                          AREA ||i.TIM_ITConfig||, CODE, READONLY, ALIGN=1
                  TIM_ITConfig PROC
;;;914     */
;;;915    void TIM_ITConfig ( TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState )
000000  b510              PUSH     {r4,lr}
;;;916    {
;;;917        
;;;918        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;919        assert_param ( IS_TIM_IT ( TIM_IT ) );
;;;920        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;921    
;;;922        if ( NewState != DISABLE )
000002  2a00              CMP      r2,#0
000004  d003              BEQ      |L15.14|
;;;923        {
;;;924            
;;;925            TIMx->TIM_IDE |= TIM_IT;
000006  6983              LDR      r3,[r0,#0x18]
000008  430b              ORRS     r3,r3,r1
00000a  6183              STR      r3,[r0,#0x18]
00000c  e004              B        |L15.24|
                  |L15.14|
;;;926        }
;;;927        else
;;;928        {
;;;929            
;;;930            TIMx->TIM_IDE &= ( uint16_t ) ~TIM_IT;
00000e  6983              LDR      r3,[r0,#0x18]
000010  43cc              MVNS     r4,r1
000012  b2a4              UXTH     r4,r4
000014  4023              ANDS     r3,r3,r4
000016  6183              STR      r3,[r0,#0x18]
                  |L15.24|
;;;931        }
;;;932    }
000018  bd10              POP      {r4,pc}
;;;933    
                          ENDP
                          AREA ||i.TIM_PWMGetDuty||, CODE, READONLY, ALIGN=1
                  TIM_PWMGetDuty PROC
;;;751     */
;;;752    uint16_t TIM_PWMGetDuty ( TIM_TypeDef* TIMx, TIM_PWMChannel_Typedef TIM_PWMChannel )
000000  4602              MOV      r2,r0
;;;753    {
;;;754        uint16_t tmpduty = 0;
000002  2000              MOVS     r0,#0
;;;755    
;;;756        
;;;757        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;758    
;;;759        if ( TIM_PWMChannel == TIM_PWMChannel_PWMA )
000004  2902              CMP      r1,#2
000006  d102              BNE      |L16.14|
;;;760        {
;;;761            tmpduty = ( uint16_t ) TIMx->TIM_PDTA_RCAP;
000008  6913              LDR      r3,[r2,#0x10]
00000a  b298              UXTH     r0,r3
00000c  e001              B        |L16.18|
                  |L16.14|
;;;762        }
;;;763        else
;;;764        {
;;;765            tmpduty = ( uint16_t ) TIMx->TIM_PDTB_FCAP;
00000e  6953              LDR      r3,[r2,#0x14]
000010  b298              UXTH     r0,r3
                  |L16.18|
;;;766        }
;;;767    
;;;768        return tmpduty;
;;;769    }
000012  4770              BX       lr
;;;770    
                          ENDP
                          AREA ||i.TIM_PWMInit||, CODE, READONLY, ALIGN=2
                  TIM_PWMInit PROC
;;;613     */
;;;614    void TIM_PWMInit ( TIM_TypeDef* TIMx, TIM_PWM_InitTypeDef* TIM_PWM_InitStruct )
000000  b510              PUSH     {r4,lr}
;;;615    {
;;;616        uint32_t tmpreg;
;;;617        
;;;618    #if defined(SC32f10xx) || defined(SC32f12xx)
;;;619        if ( ( TIM_PWM_InitStruct->TIM_PWMLowPolarityChannl == TIM_PWMChannel_PWMA ) ||
000002  884b              LDRH     r3,[r1,#2]
000004  2b02              CMP      r3,#2
000006  d002              BEQ      |L17.14|
;;;620                ( TIM_PWM_InitStruct->TIM_PWMOutputChannl == TIM_PWMChannel_PWMA ) )
000008  880b              LDRH     r3,[r1,#0]
00000a  2b02              CMP      r3,#2
00000c  d100              BNE      |L17.16|
                  |L17.14|
;;;621            assert_param ( IS_TIM_TN_PERIPH ( TIMx ) );
00000e  bf00              NOP      
                  |L17.16|
;;;622        if ( ( TIM_PWM_InitStruct->TIM_PWMLowPolarityChannl == TIM_PWMChannel_PWMB ) ||
000010  884b              LDRH     r3,[r1,#2]
000012  2b01              CMP      r3,#1
000014  d002              BEQ      |L17.28|
;;;623                ( TIM_PWM_InitStruct->TIM_PWMOutputChannl == TIM_PWMChannel_PWMB ) )
000016  880b              LDRH     r3,[r1,#0]
000018  2b01              CMP      r3,#1
00001a  d100              BNE      |L17.30|
                  |L17.28|
;;;624            assert_param ( IS_TIM_TNEX_PERIPH ( TIMx ) );
00001c  bf00              NOP      
                  |L17.30|
;;;625    #elif defined(SC32f11xx)|| defined(SC32f15xx)
;;;626        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;627    #endif
;;;628        
;;;629        tmpreg = TIMx->TIM_CON;
00001e  6802              LDR      r2,[r0,#0]
;;;630    
;;;631        
;;;632        tmpreg &= ( uint32_t ) ~ ( TIM_CON_EPWMNA | TIM_CON_EPWMNB | TIM_CON_INVNA | TIM_CON_INVNB );
000020  240f              MOVS     r4,#0xf
000022  02e4              LSLS     r4,r4,#11
000024  4613              MOV      r3,r2
000026  43a3              BICS     r3,r3,r4
000028  461a              MOV      r2,r3
;;;633    
;;;634        
;;;635    #if defined(SC32f10xx)
;;;636        
;;;637        if ( ( ( TIMx == TIM0 ) && ( TIM_PWM_InitStruct->TIM_PWMOutputChannl != TIM_PWMChannel_PWMA ) &&
00002a  4b0d              LDR      r3,|L17.96|
00002c  4298              CMP      r0,r3
00002e  d105              BNE      |L17.60|
000030  880b              LDRH     r3,[r1,#0]
000032  2b02              CMP      r3,#2
000034  d002              BEQ      |L17.60|
;;;638                ( TIM_PWM_InitStruct->TIM_PWMLowPolarityChannl != TIM_PWMChannel_PWMA ) ) ||
000036  884b              LDRH     r3,[r1,#2]
000038  2b02              CMP      r3,#2
00003a  d108              BNE      |L17.78|
                  |L17.60|
;;;639                ( ( TIMx != TIM0 ) && ( TIM_PWM_InitStruct->TIM_PWMOutputChannl != TIM_PWMChannel_PWMB ) &&
00003c  4b08              LDR      r3,|L17.96|
00003e  4298              CMP      r0,r3
000040  d00b              BEQ      |L17.90|
000042  880b              LDRH     r3,[r1,#0]
000044  2b01              CMP      r3,#1
000046  d008              BEQ      |L17.90|
;;;640                  ( TIM_PWM_InitStruct->TIM_PWMLowPolarityChannl != TIM_PWMChannel_PWMB ) ) )
000048  884b              LDRH     r3,[r1,#2]
00004a  2b01              CMP      r3,#1
00004c  d005              BEQ      |L17.90|
                  |L17.78|
;;;641        {
;;;642            
;;;643            
;;;644            tmpreg |= ( uint32_t ) ( ( TIM_PWM_InitStruct->TIM_PWMOutputChannl << ( 13U ) )
00004e  880b              LDRH     r3,[r1,#0]
000050  035b              LSLS     r3,r3,#13
000052  884c              LDRH     r4,[r1,#2]
000054  02e4              LSLS     r4,r4,#11
000056  4323              ORRS     r3,r3,r4
000058  431a              ORRS     r2,r2,r3
                  |L17.90|
;;;645                                     | ( TIM_PWM_InitStruct->TIM_PWMLowPolarityChannl ) << ( 11U ) );
;;;646        }
;;;647    #elif defined(SC32f11xx)|| defined(SC32f12xx)|| defined(SC32f15xx)
;;;648        {
;;;649            
;;;650            
;;;651            tmpreg |= ( uint32_t ) ( ( TIM_PWM_InitStruct->TIM_PWMOutputChannl << ( 13U ) )
;;;652                                     | ( TIM_PWM_InitStruct->TIM_PWMLowPolarityChannl ) << ( 11U ) );
;;;653        }
;;;654    
;;;655    #endif
;;;656    
;;;657        
;;;658        TIMx->TIM_CON = tmpreg;
00005a  6002              STR      r2,[r0,#0]
;;;659    }
00005c  bd10              POP      {r4,pc}
;;;660    
                          ENDP
00005e  0000              DCW      0x0000
                  |L17.96|
                          DCD      0x40020100
                          AREA ||i.TIM_PWMSetDuty||, CODE, READONLY, ALIGN=2
                  TIM_PWMSetDuty PROC
;;;694     */
;;;695    void TIM_PWMSetDuty ( TIM_TypeDef* TIMx, TIM_PWMChannel_Typedef TIM_PWMChannel, uint16_t PWM_DutyValue )
000000  2902              CMP      r1,#2
;;;696    {
;;;697    #if defined(SC32f10xx)
;;;698        
;;;699        if ( TIM_PWMChannel == TIM_PWMChannel_PWMA )
000002  d100              BNE      |L18.6|
;;;700            assert_param ( IS_TIM_TN_PERIPH ( TIMx ) );
000004  bf00              NOP      
                  |L18.6|
;;;701        if ( TIM_PWMChannel == TIM_PWMChannel_PWMB )
000006  2901              CMP      r1,#1
000008  d100              BNE      |L18.12|
;;;702            assert_param ( IS_TIM_TNEX_PERIPH ( TIMx ) );
00000a  bf00              NOP      
                  |L18.12|
;;;703    
;;;704        
;;;705        if ( ( TIMx != TIM0 ) && ( TIM_PWMChannel == TIM_PWMChannel_PWMA ) )
00000c  4b06              LDR      r3,|L18.40|
00000e  4298              CMP      r0,r3
000010  d003              BEQ      |L18.26|
000012  2902              CMP      r1,#2
000014  d101              BNE      |L18.26|
;;;706        {
;;;707            TIMx->TIM_PDTA_RCAP = PWM_DutyValue;
000016  6102              STR      r2,[r0,#0x10]
000018  e005              B        |L18.38|
                  |L18.26|
;;;708        }
;;;709        
;;;710        else if ( ( TIMx == TIM0 ) && ( TIM_PWMChannel == TIM_PWMChannel_PWMB ) )
00001a  4b03              LDR      r3,|L18.40|
00001c  4298              CMP      r0,r3
00001e  d102              BNE      |L18.38|
000020  2901              CMP      r1,#1
000022  d100              BNE      |L18.38|
;;;711        {
;;;712            TIMx->TIM_PDTB_FCAP = PWM_DutyValue;
000024  6142              STR      r2,[r0,#0x14]
                  |L18.38|
;;;713        }
;;;714    #elif defined(SC32f11xx)|| defined(SC32f12xx)|| defined(SC32f15xx)
;;;715        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;716    
;;;717        if ( TIM_PWMChannel == TIM_PWMChannel_PWMA )
;;;718        {
;;;719            TIMx->TIM_PDTA_RCAP = PWM_DutyValue;
;;;720        }
;;;721        else if ( TIM_PWMChannel == TIM_PWMChannel_PWMB )
;;;722        {
;;;723            TIMx->TIM_PDTB_FCAP = PWM_DutyValue;
;;;724        }
;;;725    
;;;726    #endif
;;;727    
;;;728    
;;;729    }
000026  4770              BX       lr
;;;730    
                          ENDP
                  |L18.40|
                          DCD      0x40020100
                          AREA ||i.TIM_PWMStructInit||, CODE, READONLY, ALIGN=1
                  TIM_PWMStructInit PROC
;;;665      */
;;;666    void TIM_PWMStructInit ( TIM_PWM_InitTypeDef* TIM_PWM_InitStruct )
000000  2100              MOVS     r1,#0
;;;667    {
;;;668        
;;;669        TIM_PWM_InitStruct->TIM_PWMLowPolarityChannl = TIM_PWMChannel_Less;
000002  8041              STRH     r1,[r0,#2]
;;;670        TIM_PWM_InitStruct->TIM_PWMOutputChannl = TIM_PWMChannel_Less;
000004  8001              STRH     r1,[r0,#0]
;;;671    }
000006  4770              BX       lr
;;;672    
                          ENDP
                          AREA ||i.TIM_PinRemapConfig||, CODE, READONLY, ALIGN=1
                  TIM_PinRemapConfig PROC
;;;857    #if defined(SC32f10xx) || defined(SC32f11xx)|| defined(SC32f15xx)
;;;858    void TIM_PinRemapConfig ( TIM_TypeDef* TIMx, TIM_PinRemap_TypeDef TIM_Remap )
000000  b510              PUSH     {r4,lr}
;;;859    {
000002  460a              MOV      r2,r1
;;;860        uint32_t tmpreg ;
;;;861        
;;;862        assert_param ( IS_TIM_REMAP_PERIPH ( TIMx ) );
;;;863        assert_param ( IS_TIM_PINREMAP ( TIM_Remap ) );
;;;864    
;;;865        tmpreg = TIMx->TIM_CON;
000004  6801              LDR      r1,[r0,#0]
;;;866    
;;;867        tmpreg &= ( uint32_t ) ( ~TIM_CON_SPOS );
000006  2401              MOVS     r4,#1
000008  04e4              LSLS     r4,r4,#19
00000a  460b              MOV      r3,r1
00000c  43a3              BICS     r3,r3,r4
00000e  4619              MOV      r1,r3
;;;868    
;;;869        tmpreg |= TIM_Remap;
000010  460b              MOV      r3,r1
000012  4313              ORRS     r3,r3,r2
000014  4619              MOV      r1,r3
;;;870    
;;;871        TIMx->TIM_CON = tmpreg;
000016  6001              STR      r1,[r0,#0]
;;;872    }
000018  bd10              POP      {r4,pc}
;;;873    #endif
                          ENDP
                          AREA ||i.TIM_SetAutoreload||, CODE, READONLY, ALIGN=1
                  TIM_SetAutoreload PROC
;;;290     */
;;;291    void TIM_SetAutoreload ( TIM_TypeDef* TIMx, uint16_t Autoreload )
000000  6081              STR      r1,[r0,#8]
;;;292    {
;;;293        
;;;294        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;295    
;;;296        
;;;297        TIMx->TIM_RLD = Autoreload;
;;;298    }
000002  4770              BX       lr
;;;299    
                          ENDP
                          AREA ||i.TIM_SetCounter||, CODE, READONLY, ALIGN=1
                  TIM_SetCounter PROC
;;;237     */
;;;238    void TIM_SetCounter ( TIM_TypeDef* TIMx, uint32_t Counter )
000000  6041              STR      r1,[r0,#4]
;;;239    {
;;;240        
;;;241        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;242    
;;;243        
;;;244        TIMx->TIM_CNT = ( uint32_t ) Counter;
;;;245    }
000002  4770              BX       lr
;;;246    
                          ENDP
                          AREA ||i.TIM_SetPerscaler||, CODE, READONLY, ALIGN=1
                  TIM_SetPerscaler PROC
;;;351     */
;;;352    void TIM_SetPerscaler ( TIM_TypeDef* TIMx, TIM_Prescaler_TypeDef TIM_Perscaler )
000000  6802              LDR      r2,[r0,#0]
;;;353    {
;;;354    
;;;355        
;;;356        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;357        assert_param ( IS_TIM_PRESCALER ( TIM_Perscaler ) );
;;;358    
;;;359        
;;;360        TIMx->TIM_CON &= ( uint32_t ) ( ~TIM_CON_TIMCLK );
000002  2307              MOVS     r3,#7
000004  021b              LSLS     r3,r3,#8
000006  439a              BICS     r2,r2,r3
000008  6002              STR      r2,[r0,#0]
;;;361    
;;;362        
;;;363        TIMx->TIM_CON |= TIM_Perscaler;
00000a  6802              LDR      r2,[r0,#0]
00000c  430a              ORRS     r2,r2,r1
00000e  6002              STR      r2,[r0,#0]
;;;364    }
000010  4770              BX       lr
;;;365    
                          ENDP
                          AREA ||i.TIM_TIMBaseInit||, CODE, READONLY, ALIGN=2
                  TIM_TIMBaseInit PROC
;;;137     */
;;;138    void TIM_TIMBaseInit ( TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct )
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140        
;;;141        uint32_t tmpreg;
;;;142        assert_param ( IS_TIM_ALL_PERIPH ( TIMx ) );
;;;143        assert_param ( IS_TIM_PRESCALER ( TIM_TimeBaseInitStruct->TIM_EXENX ) );
;;;144        assert_param ( IS_TIM_WORKMODE ( TIM_TimeBaseInitStruct->TIM_WorkMode ) );
;;;145        assert_param ( IS_TIM_COUNTERMODE ( TIM_TimeBaseInitStruct->TIM_CounterMode ) );
;;;146        assert_param ( IS_TIM_RICPin ( TIM_TimeBaseInitStruct->TIM_Prescaler ) );
;;;147    
;;;148        
;;;149        
;;;150        tmpreg = TIMx->TIM_CON;
000002  6802              LDR      r2,[r0,#0]
;;;151        
;;;152        tmpreg &= ( uint32_t ) ~ ( TIM_CON_TIMCLK | TIM_CON_CTSEL | TIM_CON_DEC | TIM_CON_EXENX );
000004  4b07              LDR      r3,|L24.36|
000006  401a              ANDS     r2,r2,r3
;;;153        
;;;154        
;;;155        
;;;156        
;;;157        
;;;158        tmpreg |= ( uint32_t ) ( TIM_TimeBaseInitStruct->TIM_Prescaler | TIM_TimeBaseInitStruct->TIM_CounterMode |
000008  880b              LDRH     r3,[r1,#0]
00000a  888c              LDRH     r4,[r1,#4]
00000c  4323              ORRS     r3,r3,r4
00000e  884c              LDRH     r4,[r1,#2]
000010  4323              ORRS     r3,r3,r4
000012  88cc              LDRH     r4,[r1,#6]
000014  0164              LSLS     r4,r4,#5
000016  4323              ORRS     r3,r3,r4
000018  431a              ORRS     r2,r2,r3
;;;159                                 TIM_TimeBaseInitStruct->TIM_WorkMode | ( TIM_TimeBaseInitStruct->TIM_EXENX << TIM_CON_EXENX_Pos ) );
;;;160        
;;;161        TIMx->TIM_CON = tmpreg;
00001a  6002              STR      r2,[r0,#0]
;;;162        
;;;163        TIMx->TIM_CNT = TIMx->TIM_RLD = TIM_TimeBaseInitStruct->TIM_Preload;
00001c  890b              LDRH     r3,[r1,#8]
00001e  6083              STR      r3,[r0,#8]
000020  6043              STR      r3,[r0,#4]
;;;164    
;;;165    }
000022  bd10              POP      {r4,pc}
;;;166    
                          ENDP
                  |L24.36|
                          DCD      0xfffff89d
                          AREA ||i.TIM_TimeBaseStructInit||, CODE, READONLY, ALIGN=1
                  TIM_TimeBaseStructInit PROC
;;;171      */
;;;172    void TIM_TimeBaseStructInit ( TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct )
000000  2100              MOVS     r1,#0
;;;173    {
;;;174        
;;;175        TIM_TimeBaseInitStruct->TIM_Prescaler = TIM_PRESCALER_1;
000002  8001              STRH     r1,[r0,#0]
;;;176        TIM_TimeBaseInitStruct->TIM_WorkMode = TIM_WorkMode_Timer;
000004  8041              STRH     r1,[r0,#2]
;;;177        TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
000006  8081              STRH     r1,[r0,#4]
;;;178        TIM_TimeBaseInitStruct->TIM_Preload = 0x0000;
000008  8101              STRH     r1,[r0,#8]
;;;179        TIM_TimeBaseInitStruct->TIM_EXENX = TIM_EXENX_Disable;
00000a  80c1              STRH     r1,[r0,#6]
;;;180    }
00000c  4770              BX       lr
;;;181    
                          ENDP
;*** Start embedded assembler ***
#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_tim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_tim_c_c458916b____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___15_sc32f1xxx_tim_c_c458916b____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_tim_c_c458916b____REVSH|
#line 478
|__asm___15_sc32f1xxx_tim_c_c458916b____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***
