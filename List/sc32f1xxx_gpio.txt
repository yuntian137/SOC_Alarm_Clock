; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\sc32f1xxx_gpio.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\sc32f1xxx_gpio.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -I..\ADC_IAP\Inc -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\sc32f1xxx_gpio.crf ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=1

                  GPIO_DeInit PROC
;;;53      */
;;;54     void GPIO_DeInit ( GPIO_TypeDef* GPIOx )
000000  6a01              LDR      r1,[r0,#0x20]
;;;55     {
;;;56         /* Check the parameters */
;;;57         assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;58     
;;;59         /* Deinitializes the GPIOx PXCON register to their default reset values. */
;;;60         GPIOx->PXCON &= ( uint32_t ) ( ~GPIO_PIN_All );
000002  0c09              LSRS     r1,r1,#16
000004  0409              LSLS     r1,r1,#16
000006  6201              STR      r1,[r0,#0x20]
;;;61         /* Deinitializes the GPIOx PXPH register to their default reset values. */
;;;62         GPIOx->PXPH &= ( uint32_t ) ( ~GPIO_PIN_All );
000008  6c01              LDR      r1,[r0,#0x40]
00000a  0c09              LSRS     r1,r1,#16
00000c  0409              LSLS     r1,r1,#16
00000e  6401              STR      r1,[r0,#0x40]
;;;63         /* Deinitializes the GPIOx PIN register to their default reset values. */
;;;64         GPIOx->PIN &= ( uint32_t ) ( ~GPIO_PIN_All );
000010  6801              LDR      r1,[r0,#0]
000012  0c09              LSRS     r1,r1,#16
000014  0409              LSLS     r1,r1,#16
000016  6001              STR      r1,[r0,#0]
;;;65         /* Deinitializes the GPIOx PXLEV register to their default reset values. */
;;;66         GPIOx->PXLEV &= ( uint32_t ) 0x00000000;
000018  6e01              LDR      r1,[r0,#0x60]
00001a  2100              MOVS     r1,#0
00001c  6601              STR      r1,[r0,#0x60]
;;;67     }
00001e  4770              BX       lr
;;;68     
                          ENDP


                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;82      */
;;;83     void GPIO_Init ( GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct )
000000  b570              PUSH     {r4-r6,lr}
;;;84     {
;;;85         uint32_t tmppin, tmppos, tmpreg;
;;;86     
;;;87         /* Check the parameters */
;;;88         assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;89         assert_param ( IS_GPIO_PIN ( GPIO_InitStruct->GPIO_Pin ) );
;;;90         assert_param ( IS_GPIO_MODE ( GPIO_InitStruct->GPIO_Mode ) );
;;;91     
;;;92         if ( GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT_PP )
000002  884d              LDRH     r5,[r1,#2]
000004  2d02              CMP      r5,#2
000006  d104              BNE      |L2.18|
;;;93         {
;;;94             /* Configure Pins to High-resistance output mode */
;;;95             GPIOx->PXCON |= ( uint32_t ) GPIO_InitStruct->GPIO_Pin;
000008  6a05              LDR      r5,[r0,#0x20]
00000a  880e              LDRH     r6,[r1,#0]
00000c  4335              ORRS     r5,r5,r6
00000e  6205              STR      r5,[r0,#0x20]
000010  e016              B        |L2.64|
                  |L2.18|
;;;96         }
;;;97         else if ( GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IN_PU )
000012  884d              LDRH     r5,[r1,#2]
000014  2d01              CMP      r5,#1
000016  d108              BNE      |L2.42|
;;;98         {
;;;99             /* Configure Pins to Pull-up input mode */
;;;100            GPIOx->PXCON &= ( uint32_t ) ( ~GPIO_InitStruct->GPIO_Pin );
000018  6a05              LDR      r5,[r0,#0x20]
00001a  880e              LDRH     r6,[r1,#0]
00001c  43b5              BICS     r5,r5,r6
00001e  6205              STR      r5,[r0,#0x20]
;;;101            GPIOx->PXPH |= ( uint32_t ) GPIO_InitStruct->GPIO_Pin;
000020  6c05              LDR      r5,[r0,#0x40]
000022  880e              LDRH     r6,[r1,#0]
000024  4335              ORRS     r5,r5,r6
000026  6405              STR      r5,[r0,#0x40]
000028  e00a              B        |L2.64|
                  |L2.42|
;;;102        }
;;;103        else if ( GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IN_HI )
00002a  884d              LDRH     r5,[r1,#2]
00002c  2d00              CMP      r5,#0
00002e  d107              BNE      |L2.64|
;;;104        {
;;;105            /* Configure Pin to High-resistance intput mode */
;;;106            GPIOx->PXCON &= ( uint32_t ) ( ~GPIO_InitStruct->GPIO_Pin );
000030  6a05              LDR      r5,[r0,#0x20]
000032  880e              LDRH     r6,[r1,#0]
000034  43b5              BICS     r5,r5,r6
000036  6205              STR      r5,[r0,#0x20]
;;;107            GPIOx->PXPH &= ( uint32_t ) ( ~GPIO_InitStruct->GPIO_Pin );
000038  6c05              LDR      r5,[r0,#0x40]
00003a  880e              LDRH     r6,[r1,#0]
00003c  43b5              BICS     r5,r5,r6
00003e  6405              STR      r5,[r0,#0x40]
                  |L2.64|
;;;108        }
;;;109    
;;;110        /* Get GPIOx PXLEV value */
;;;111        tmpreg = GPIOx->PXLEV;
000040  6e03              LDR      r3,[r0,#0x60]
;;;112        /* Query the Pins that needs to be manipulated */
;;;113        for ( tmppos = 0; tmppos < 16; tmppos++ )
000042  2200              MOVS     r2,#0
000044  e010              B        |L2.104|
                  |L2.70|
;;;114        {
;;;115            tmppin = ( uint32_t ) ( 0x01 << tmppos );
000046  2401              MOVS     r4,#1
000048  4094              LSLS     r4,r4,r2
;;;116            if ( ( tmppin & GPIO_InitStruct->GPIO_Pin ) != RESET )
00004a  880d              LDRH     r5,[r1,#0]
00004c  4025              ANDS     r5,r5,r4
00004e  2d00              CMP      r5,#0
000050  d009              BEQ      |L2.102|
;;;117            {
;;;118                /* Clear the LEVx bits */
;;;119                tmpreg &= ( uint32_t ) ~ ( GPIO_DriveLevel_3 << ( tmppos * 2 ) );
000052  0056              LSLS     r6,r2,#1
000054  2503              MOVS     r5,#3
000056  40b5              LSLS     r5,r5,r6
000058  461e              MOV      r6,r3
00005a  43ae              BICS     r6,r6,r5
00005c  4633              MOV      r3,r6
;;;120                /* Set LEVx bits according to Drive Level value */
;;;121                tmpreg |= ( uint32_t ) ( GPIO_InitStruct->GPIO_DriveLevel << ( tmppos * 2 ) );
00005e  888d              LDRH     r5,[r1,#4]
000060  0056              LSLS     r6,r2,#1
000062  40b5              LSLS     r5,r5,r6
000064  432b              ORRS     r3,r3,r5
                  |L2.102|
000066  1c52              ADDS     r2,r2,#1              ;113
                  |L2.104|
000068  2a10              CMP      r2,#0x10              ;113
00006a  d3ec              BCC      |L2.70|
;;;122            }
;;;123        }
;;;124        /* Store GPIOx PXLEV the new value */
;;;125        GPIOx->PXLEV = tmpreg;
00006c  6603              STR      r3,[r0,#0x60]
;;;126    }
00006e  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP


                          AREA ||i.GPIO_ReadData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadData PROC
;;;236     */
;;;237    uint16_t GPIO_ReadData ( GPIO_TypeDef* GPIOx )
000000  4601              MOV      r1,r0
;;;238    {
;;;239        /* Check the parameters */
;;;240        assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;241    
;;;242        return ( uint16_t ) ( GPIOx->PIN );
000002  6808              LDR      r0,[r1,#0]
000004  b280              UXTH     r0,r0
;;;243    }
000006  4770              BX       lr
;;;244    
                          ENDP


                          AREA ||i.GPIO_ReadDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadDataBit PROC
;;;279     */
;;;280    BitAction GPIO_ReadDataBit ( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
000000  4602              MOV      r2,r0
;;;281    {
;;;282        BitAction bitstatus;
;;;283        /* Check the parameters */
;;;284        assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;285        assert_param ( IS_GPIO_PIN ( GPIO_Pin ) );
;;;286    
;;;287        if ( GPIOx->PIN & GPIO_Pin )
000002  6813              LDR      r3,[r2,#0]
000004  400b              ANDS     r3,r3,r1
000006  2b00              CMP      r3,#0
000008  d001              BEQ      |L4.14|
;;;288        {
;;;289            bitstatus = Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L4.16|
                  |L4.14|
;;;290        }
;;;291        else
;;;292        {
;;;293            bitstatus = Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L4.16|
;;;294        }
;;;295    
;;;296        return bitstatus;
;;;297    }
000010  4770              BX       lr
;;;298    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;381     */
;;;382    void GPIO_ResetBits ( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
000000  b508              PUSH     {r3,lr}
;;;383    {
;;;384        /* Check the parameters */
;;;385        assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;386        assert_param ( IS_GPIO_PIN ( GPIO_Pin ) );
;;;387    
;;;388        __IO uint32_t tmpreg = ( uint32_t ) GPIOx;
000002  9000              STR      r0,[sp,#0]
;;;389    
;;;390        while ( GPIO_Pin != 0 )
000004  e00a              B        |L5.28|
                  |L5.6|
;;;391        {
;;;392            if ( GPIO_Pin & 0x0001 )
000006  07ca              LSLS     r2,r1,#31
000008  0fd2              LSRS     r2,r2,#31
00000a  2a00              CMP      r2,#0
00000c  d002              BEQ      |L5.20|
;;;393            {
;;;394                ( * ( ( uint8_t* ) ( tmpreg ) ) ) = 0;
00000e  2200              MOVS     r2,#0
000010  9b00              LDR      r3,[sp,#0]
000012  701a              STRB     r2,[r3,#0]
                  |L5.20|
;;;395            }
;;;396            GPIO_Pin = GPIO_Pin >> 1;
000014  1049              ASRS     r1,r1,#1
;;;397            tmpreg++;
000016  9a00              LDR      r2,[sp,#0]
000018  1c52              ADDS     r2,r2,#1
00001a  9200              STR      r2,[sp,#0]
                  |L5.28|
00001c  2900              CMP      r1,#0                 ;390
00001e  d1f2              BNE      |L5.6|
;;;398        }
;;;399    }
000020  bd08              POP      {r3,pc}
;;;400    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;331     */
;;;332    void GPIO_SetBits ( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
000000  b508              PUSH     {r3,lr}
;;;333    {
;;;334        /* Check the parameters */
;;;335        assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;336        assert_param ( IS_GPIO_PIN ( GPIO_Pin ) );
;;;337        __IO uint32_t tmpreg = ( uint32_t ) GPIOx;
000002  9000              STR      r0,[sp,#0]
;;;338        while ( GPIO_Pin != 0 )
000004  e00a              B        |L6.28|
                  |L6.6|
;;;339        {
;;;340            if ( GPIO_Pin & 0x0001 )
000006  07ca              LSLS     r2,r1,#31
000008  0fd2              LSRS     r2,r2,#31
00000a  2a00              CMP      r2,#0
00000c  d002              BEQ      |L6.20|
;;;341            {
;;;342                ( * ( ( uint8_t* ) ( tmpreg ) ) ) = 1;
00000e  2201              MOVS     r2,#1
000010  9b00              LDR      r3,[sp,#0]
000012  701a              STRB     r2,[r3,#0]
                  |L6.20|
;;;343            }
;;;344            GPIO_Pin = GPIO_Pin >> 1;
000014  1049              ASRS     r1,r1,#1
;;;345            tmpreg++;
000016  9a00              LDR      r2,[sp,#0]
000018  1c52              ADDS     r2,r2,#1
00001a  9200              STR      r2,[sp,#0]
                  |L6.28|
00001c  2900              CMP      r1,#0                 ;338
00001e  d1f2              BNE      |L6.6|
;;;346        }
;;;347    }
000020  bd08              POP      {r3,pc}
;;;348    
                          ENDP


                          AREA ||i.GPIO_SetDriveLevel||, CODE, READONLY, ALIGN=1

                  GPIO_SetDriveLevel PROC
;;;165     */
;;;166    void GPIO_SetDriveLevel ( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_DriveLevel_TypeDef GPIO_DriveLevel )
000000  b5f0              PUSH     {r4-r7,lr}
;;;167    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;168        uint32_t tmppin, tmppos, tmpreg;
;;;169        /* Get GPIOx PXLEV value */
;;;170        tmpreg = GPIOx->PXLEV;
000006  6e19              LDR      r1,[r3,#0x60]
;;;171        /* Query the Pins that needs to be manipulated */
;;;172        for ( tmppos = 0; tmppos < 16; tmppos++ )
000008  2000              MOVS     r0,#0
00000a  e010              B        |L7.46|
                  |L7.12|
;;;173        {
;;;174            tmppin = ( uint32_t ) ( 0x01 << tmppos );
00000c  2501              MOVS     r5,#1
00000e  4085              LSLS     r5,r5,r0
;;;175            if ( ( tmppin & GPIO_Pin ) != RESET )
000010  462e              MOV      r6,r5
000012  4026              ANDS     r6,r6,r4
000014  2e00              CMP      r6,#0
000016  d009              BEQ      |L7.44|
;;;176            {
;;;177                /* Clear the LEVx bits */
;;;178                tmpreg &= ( uint32_t ) ~ ( GPIO_DriveLevel_3 << ( tmppos * 2 ) );
000018  0047              LSLS     r7,r0,#1
00001a  2603              MOVS     r6,#3
00001c  40be              LSLS     r6,r6,r7
00001e  460f              MOV      r7,r1
000020  43b7              BICS     r7,r7,r6
000022  4639              MOV      r1,r7
;;;179                /* Set LEVx bits according to Drive Level value */
;;;180                tmpreg |= ( uint32_t ) ( GPIO_DriveLevel << ( tmppos * 2 ) );
000024  0047              LSLS     r7,r0,#1
000026  4616              MOV      r6,r2
000028  40be              LSLS     r6,r6,r7
00002a  4331              ORRS     r1,r1,r6
                  |L7.44|
00002c  1c40              ADDS     r0,r0,#1              ;172
                  |L7.46|
00002e  2810              CMP      r0,#0x10              ;172
000030  d3ec              BCC      |L7.12|
;;;181            }
;;;182        }
;;;183        /* Store GPIOx PXLEV the new value */
;;;184        GPIOx->PXLEV = tmpreg;
000032  6619              STR      r1,[r3,#0x60]
;;;185    
;;;186    }
000034  bdf0              POP      {r4-r7,pc}
;;;187    
                          ENDP


                          AREA ||i.GPIO_TogglePins||, CODE, READONLY, ALIGN=1

                  GPIO_TogglePins PROC
;;;511     */
;;;512    void GPIO_TogglePins ( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
000000  b518              PUSH     {r3,r4,lr}
;;;513    {
;;;514        /* Check the parameters */
;;;515        assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;516        assert_param ( IS_GPIO_PIN ( GPIO_Pin ) );
;;;517        __IO uint32_t tmpreg = ( uint32_t ) GPIOx + ( 0x00000010UL );
000002  4603              MOV      r3,r0
000004  3310              ADDS     r3,r3,#0x10
000006  9300              STR      r3,[sp,#0]
;;;518        uint32_t temp = 0;
000008  2200              MOVS     r2,#0
;;;519        /* Set the GPIOx PIN value  */
;;;520        while ( GPIO_Pin != 0 )
00000a  e00c              B        |L8.38|
                  |L8.12|
;;;521        {
;;;522    
;;;523            if ( GPIO_Pin & 0x0001 )
00000c  07cb              LSLS     r3,r1,#31
00000e  0fdb              LSRS     r3,r3,#31
000010  2b00              CMP      r3,#0
000012  d004              BEQ      |L8.30|
;;;524            {
;;;525                temp = ~ ( * ( ( uint8_t* ) ( tmpreg ) ) );
000014  9b00              LDR      r3,[sp,#0]
000016  781b              LDRB     r3,[r3,#0]
000018  43da              MVNS     r2,r3
;;;526                ( * ( ( uint8_t* ) ( tmpreg ) ) ) = temp;
00001a  9c00              LDR      r4,[sp,#0]
00001c  7022              STRB     r2,[r4,#0]
                  |L8.30|
;;;527            }
;;;528            GPIO_Pin = GPIO_Pin >> 1;
00001e  1049              ASRS     r1,r1,#1
;;;529            tmpreg++;
000020  9b00              LDR      r3,[sp,#0]
000022  1c5b              ADDS     r3,r3,#1
000024  9300              STR      r3,[sp,#0]
                  |L8.38|
000026  2900              CMP      r1,#0                 ;520
000028  d1f0              BNE      |L8.12|
;;;530        }
;;;531    }
00002a  bd18              POP      {r3,r4,pc}
;;;532    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;415     */
;;;416    void GPIO_Write ( GPIO_TypeDef* GPIOx, uint16_t PortVal )
000000  6001              STR      r1,[r0,#0]
;;;417    {
;;;418        /* Check the parameters */
;;;419        assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;420    
;;;421        /*  */
;;;422        GPIOx->PIN = PortVal;
;;;423    }
000002  4770              BX       lr
;;;424    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;461      */
;;;462    void GPIO_WriteBit ( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal )
000000  2a00              CMP      r2,#0
;;;463    {
;;;464        /* Check the parameters */
;;;465        assert_param ( IS_GPIO_ALL_PERIPH ( GPIOx ) );
;;;466        assert_param ( IS_GET_GPIO_PIN ( GPIO_Pin ) );
;;;467        assert_param ( IS_GPIO_BITACTION ( BitVal ) );
;;;468    
;;;469        if ( BitVal != Bit_RESET )
000002  d003              BEQ      |L10.12|
;;;470        {
;;;471            GPIOx->PIN |= GPIO_Pin;
000004  6803              LDR      r3,[r0,#0]
000006  430b              ORRS     r3,r3,r1
000008  6003              STR      r3,[r0,#0]
00000a  e002              B        |L10.18|
                  |L10.12|
;;;472        }
;;;473        else
;;;474        {
;;;475            GPIOx->PIN &= ( ~GPIO_Pin ) ;
00000c  6803              LDR      r3,[r0,#0]
00000e  438b              BICS     r3,r3,r1
000010  6003              STR      r3,[r0,#0]
                  |L10.18|
;;;476        }
;;;477    }
000012  4770              BX       lr
;;;478    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_sc32f1xxx_gpio_c_f8e8e39a____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___16_sc32f1xxx_gpio_c_f8e8e39a____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_sc32f1xxx_gpio_c_f8e8e39a____REVSH|
#line 478
|__asm___16_sc32f1xxx_gpio_c_f8e8e39a____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
