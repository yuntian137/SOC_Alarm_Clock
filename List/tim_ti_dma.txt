; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\output\tim_ti_dma.o --asm_dir=..\List\ --list_dir=..\List\ --depend=..\output\tim_ti_dma.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -I..\Buzz\Inc -I..\Drivers\TKDriver\C -I..\Mqtt\Inc -ID:\keil\ARM\PACK\Keil\SC32F1xxx_DFP\1.0.6\Device\SC32F10xx\FWLib\SC32_Lib\inc -D__MICROLIB -D__UVISION_VERSION=534 -DSC32F10xx -DSC32f10xx --omf_browse=..\output\tim_ti_dma.crf ..\Apps\TIM_TI_DMA.C]
                          THUMB

                          AREA ||i.TIM_TI_DMA||, CODE, READONLY, ALIGN=2

                  TIM_TI_DMA PROC
;;;7      
;;;8      void TIM_TI_DMA(void)
000000  2400              MOVS     r4,#0
;;;9      {
;;;10       uint8_t i;
;;;11     
;;;12       for(i = 0; i < 200; i++)
000002  e003              B        |L1.12|
                  |L1.4|
;;;13       {
;;;14         TIM_TI_DMA_SrcData[i] = i;//被搬运数组写入数据
000004  4810              LDR      r0,|L1.72|
000006  5504              STRB     r4,[r0,r4]
000008  1c60              ADDS     r0,r4,#1              ;12
00000a  b2c4              UXTB     r4,r0                 ;12
                  |L1.12|
00000c  2cc8              CMP      r4,#0xc8              ;12
00000e  dbf9              BLT      |L1.4|
;;;15       }
;;;16       /* 源数据数组写入数据完毕 */
;;;17     
;;;18       /* 准备开始搬运源数组中的数据*/
;;;19       while(1)
000010  e018              B        |L1.68|
                  |L1.18|
;;;20       {
;;;21         if(TIM_DMA_Flag == SET)//自定义TIM_DMA标志位置起
000012  480e              LDR      r0,|L1.76|
000014  7800              LDRB     r0,[r0,#0]  ; TIM_DMA_Flag
000016  2801              CMP      r0,#1
000018  d114              BNE      |L1.68|
;;;22         {
;;;23           /* TIM2定时器溢出触发DMA0搬运源数组“TIM_TI_DMA_SrcData[]”中的数据至目标搬运数组”TIM_TI_DMA_DstData[]“已搬运完成 */
;;;24     
;;;25           memset(TIM_TI_DMA_DstData, 0x00, 200);//将目标数据数组中的数据清零
00001a  21c8              MOVS     r1,#0xc8
00001c  480c              LDR      r0,|L1.80|
00001e  f7fffffe          BL       __aeabi_memclr
;;;26     
;;;27           /* 开启下一轮DMA搬运 */
;;;28           DMA_SetCurrDataCounter(DMA0, 200);//重新写入DMA搬运数量
000022  21c8              MOVS     r1,#0xc8
000024  480b              LDR      r0,|L1.84|
000026  f7fffffe          BL       DMA_SetCurrDataCounter
;;;29     
;;;30           /* 重新使能DMA */
;;;31           TIM_DMACmd(TIM2, TIM_DMAReq_TI, DISABLE);
00002a  2200              MOVS     r2,#0
00002c  2110              MOVS     r1,#0x10
00002e  480a              LDR      r0,|L1.88|
000030  f7fffffe          BL       TIM_DMACmd
;;;32           TIM_DMACmd(TIM2, TIM_DMAReq_TI, ENABLE);
000034  2201              MOVS     r2,#1
000036  2110              MOVS     r1,#0x10
000038  4807              LDR      r0,|L1.88|
00003a  f7fffffe          BL       TIM_DMACmd
;;;33     
;;;34           TIM_DMA_Flag = RESET;//自定义TIM_DMA标志位清零
00003e  2000              MOVS     r0,#0
000040  4902              LDR      r1,|L1.76|
000042  7008              STRB     r0,[r1,#0]
                  |L1.68|
000044  e7e5              B        |L1.18|
;;;35         }
;;;36       }
;;;37     }
;;;38     
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      TIM_TI_DMA_SrcData
                  |L1.76|
                          DCD      TIM_DMA_Flag
                  |L1.80|
                          DCD      TIM_TI_DMA_DstData
                  |L1.84|
                          DCD      0x40010800
                  |L1.88|
                          DCD      0x40020180

                          AREA ||i.TIM_TI_DMA_DMA0Handler||, CODE, READONLY, ALIGN=2

                  TIM_TI_DMA_DMA0Handler PROC
;;;38     
;;;39     void TIM_TI_DMA_DMA0Handler(void)
000000  b510              PUSH     {r4,lr}
;;;40     {
;;;41       if(DMA_GetFlagStatus(DMA0, DMA_FLAG_TCIF) == SET)//DMA0传输完成中断置起
000002  2102              MOVS     r1,#2
000004  4806              LDR      r0,|L2.32|
000006  f7fffffe          BL       DMA_GetFlagStatus
00000a  2801              CMP      r0,#1
00000c  d106              BNE      |L2.28|
;;;42       {
;;;43         DMA_ClearFlag(DMA0, DMA_FLAG_TCIF);//清除DMA0中断
00000e  2102              MOVS     r1,#2
000010  4803              LDR      r0,|L2.32|
000012  f7fffffe          BL       DMA_ClearFlag
;;;44         TIM_DMA_Flag = SET;//自定义TIM_DMA标志位置起
000016  2001              MOVS     r0,#1
000018  4902              LDR      r1,|L2.36|
00001a  7008              STRB     r0,[r1,#0]
                  |L2.28|
;;;45       }
;;;46     }
00001c  bd10              POP      {r4,pc}
;;;47     
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0x40010800
                  |L2.36|
                          DCD      TIM_DMA_Flag

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  TIM_TI_DMA_SrcData
                          %        200
                  TIM_TI_DMA_DstData
                          %        200

                          AREA ||.data||, DATA, ALIGN=0

                  TIM_DMA_Flag
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\Apps\\TIM_TI_DMA.C"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_TIM_TI_DMA_C_244cbf05____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___12_TIM_TI_DMA_C_244cbf05____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_TIM_TI_DMA_C_244cbf05____REVSH|
#line 478
|__asm___12_TIM_TI_DMA_C_244cbf05____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
